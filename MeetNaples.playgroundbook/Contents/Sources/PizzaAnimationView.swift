//
// PizzaAnimationView.swift
// Generated by Core Animator version 1.3.2 on 28/03/2017.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class PizzaAnimationPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@objc(PizzaAnimationView)
@IBDesignable
public class PizzaAnimationView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	public var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 512, height: 768))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required public init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override public func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:512, height:768)
		__scaling__.center = CGPoint(x:256.0, y:384.0)
		__scaling__.layer.masksToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let pizza__root = PizzaAnimationPassthroughView()
		let pizza__xScale = PizzaAnimationPassthroughView()
		let pizza__yScale = PizzaAnimationPassthroughView()
		let pizza = UIView()
		pizza.layer.anchorPoint = CGPoint(x:0.823, y:0.076)
		pizza.bounds = CGRect(x:0, y:0, width:119.2, height:120.6)
		pizza__root.layer.position = CGPoint(x:294.371, y:332.738)
		pizza__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		pizza__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		pizza__root.transform = CGAffineTransform(rotationAngle: 6.281)
		__scaling__.addSubview(pizza__root)
		pizza__root.addSubview(pizza__xScale)
		pizza__xScale.addSubview(pizza__yScale)
		pizza__yScale.addSubview(pizza)
		__scaling__.addSubview(pizza__root)
		viewsByName["Pizza__root"] = pizza__root
		viewsByName["Pizza__xScale"] = pizza__xScale
		viewsByName["Pizza__yScale"] = pizza__yScale
		viewsByName["Pizza"] = pizza

		let base__root = PizzaAnimationPassthroughView()
		let base__xScale = PizzaAnimationPassthroughView()
		let base__yScale = PizzaAnimationPassthroughView()
		let base = UIImageView()
		let imgBase = UIImage(named:"Base.png", in: bundle, compatibleWith: nil)
		if imgBase == nil {
			print("** Warning: Could not create image from 'Base.png'")
		}
		base.image = imgBase
		base.contentMode = .center
		base.bounds = CGRect(x:0, y:0, width:596.0, height:603.0)
		base__root.layer.position = CGPoint(x:59.600, y:60.300)
		base__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		base__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		base__root.transform = CGAffineTransform(rotationAngle: 0.000)
		pizza.addSubview(base__root)
		base__root.addSubview(base__xScale)
		base__xScale.addSubview(base__yScale)
		base__yScale.addSubview(base)
		pizza.addSubview(base__root)
		viewsByName["Base__root"] = base__root
		viewsByName["Base__xScale"] = base__xScale
		viewsByName["Base__yScale"] = base__yScale
		viewsByName["Base"] = base

		let salsa__root = PizzaAnimationPassthroughView()
		let salsa__xScale = PizzaAnimationPassthroughView()
		let salsa__yScale = PizzaAnimationPassthroughView()
		let salsa = UIImageView()
		let imgSalsa = UIImage(named:"Salsa.png", in: bundle, compatibleWith: nil)
		if imgSalsa == nil {
			print("** Warning: Could not create image from 'Salsa.png'")
		}
		salsa.image = imgSalsa
		salsa.contentMode = .center
		salsa.bounds = CGRect(x:0, y:0, width:548.0, height:548.0)
		salsa__root.layer.position = CGPoint(x:59.600, y:60.836)
		salsa__root.alpha = 0.00
		salsa__xScale.transform = CGAffineTransform(scaleX: 0.02, y: 1.00)
		salsa__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.02)
		salsa__root.transform = CGAffineTransform(rotationAngle: 6.283)
		pizza.addSubview(salsa__root)
		salsa__root.addSubview(salsa__xScale)
		salsa__xScale.addSubview(salsa__yScale)
		salsa__yScale.addSubview(salsa)
		pizza.addSubview(salsa__root)
		viewsByName["Salsa__root"] = salsa__root
		viewsByName["Salsa__xScale"] = salsa__xScale
		viewsByName["Salsa__yScale"] = salsa__yScale
        viewsByName["Salsa"] = salsa
        
        let origano__root = PizzaAnimationPassthroughView()
        let origano__xScale = PizzaAnimationPassthroughView()
        let origano__yScale = PizzaAnimationPassthroughView()
        let origano = UIImageView()
        let imgOrigano = UIImage(named:"Origano.png", in: bundle, compatibleWith: nil)
        if imgOrigano == nil {
            print("** Warning: Could not create image from 'Origano.png'")
        }
        origano.image = imgOrigano
        origano.contentMode = .center
        origano.bounds = CGRect(x:0, y:0, width:452.0, height:455.0)
        origano__root.layer.position = CGPoint(x:60.000, y:60.300)
        origano__root.alpha = 0.00
        origano__xScale.transform = CGAffineTransform(scaleX: 0.25, y: 1.00)
        origano__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.25)
        origano__root.transform = CGAffineTransform(rotationAngle: 0.000)
        pizza.addSubview(origano__root)
        origano__root.addSubview(origano__xScale)
        origano__xScale.addSubview(origano__yScale)
        origano__yScale.addSubview(origano)
        pizza.addSubview(origano__root)
        viewsByName["Origano__root"] = origano__root
        viewsByName["Origano__xScale"] = origano__xScale
        viewsByName["Origano__yScale"] = origano__yScale
        viewsByName["Origano"] = origano

		let panna__root = PizzaAnimationPassthroughView()
		let panna__xScale = PizzaAnimationPassthroughView()
		let panna__yScale = PizzaAnimationPassthroughView()
		let panna = UIImageView()
		let imgPanna = UIImage(named:"Panna.png", in: bundle, compatibleWith: nil)
		if imgPanna == nil {
			print("** Warning: Could not create image from 'Panna.png'")
		}
		panna.image = imgPanna
		panna.contentMode = .center
		panna.bounds = CGRect(x:0, y:0, width:1094.0, height:1096.0)
		panna__root.layer.position = CGPoint(x:59.600, y:60.300)
		panna__root.alpha = 0.00
		panna__xScale.transform = CGAffineTransform(scaleX: 0.01, y: 1.00)
		panna__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.01)
		panna__root.transform = CGAffineTransform(rotationAngle: 0.003)
		pizza.addSubview(panna__root)
		panna__root.addSubview(panna__xScale)
		panna__xScale.addSubview(panna__yScale)
		panna__yScale.addSubview(panna)
		pizza.addSubview(panna__root)
		viewsByName["Panna__root"] = panna__root
		viewsByName["Panna__xScale"] = panna__xScale
		viewsByName["Panna__yScale"] = panna__yScale
		viewsByName["Panna"] = panna

		let mozzarella__root = PizzaAnimationPassthroughView()
		let mozzarella__xScale = PizzaAnimationPassthroughView()
		let mozzarella__yScale = PizzaAnimationPassthroughView()
		let mozzarella = UIView()
		mozzarella.bounds = CGRect(x:0, y:0, width:691.9, height:414.5)
		mozzarella__root.layer.position = CGPoint(x:57.954, y:30.511)
		mozzarella__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mozzarella__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mozzarella__root.transform = CGAffineTransform(rotationAngle: 0.000)
		pizza.addSubview(mozzarella__root)
		mozzarella__root.addSubview(mozzarella__xScale)
		mozzarella__xScale.addSubview(mozzarella__yScale)
		mozzarella__yScale.addSubview(mozzarella)
		pizza.addSubview(mozzarella__root)
		viewsByName["Mozzarella__root"] = mozzarella__root
		viewsByName["Mozzarella__xScale"] = mozzarella__xScale
		viewsByName["Mozzarella__yScale"] = mozzarella__yScale
		viewsByName["Mozzarella"] = mozzarella

		let mozzarella9__root = PizzaAnimationPassthroughView()
		let mozzarella9__xScale = PizzaAnimationPassthroughView()
		let mozzarella9__yScale = PizzaAnimationPassthroughView()
		let mozzarella9 = UIImageView()
		let imgMozzarella9 = UIImage(named:"Mozzarella:9.png", in: bundle, compatibleWith: nil)
		if imgMozzarella9 == nil {
			print("** Warning: Could not create image from 'Mozzarella_9.png'")
		}
		mozzarella9.image = imgMozzarella9
		mozzarella9.contentMode = .center
		mozzarella9.bounds = CGRect(x:0, y:0, width:147.0, height:124.0)
		mozzarella9__root.layer.position = CGPoint(x:-20.000, y:57.051)
		mozzarella9__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		mozzarella9__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		mozzarella9__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mozzarella.addSubview(mozzarella9__root)
		mozzarella9__root.addSubview(mozzarella9__xScale)
		mozzarella9__xScale.addSubview(mozzarella9__yScale)
		mozzarella9__yScale.addSubview(mozzarella9)
		mozzarella.addSubview(mozzarella9__root)
		viewsByName["Mozzarella/9__root"] = mozzarella9__root
		viewsByName["Mozzarella/9__xScale"] = mozzarella9__xScale
		viewsByName["Mozzarella/9__yScale"] = mozzarella9__yScale
		viewsByName["Mozzarella/9"] = mozzarella9

		let mozzarella8__root = PizzaAnimationPassthroughView()
		let mozzarella8__xScale = PizzaAnimationPassthroughView()
		let mozzarella8__yScale = PizzaAnimationPassthroughView()
		let mozzarella8 = UIImageView()
		let imgMozzarella8 = UIImage(named:"Mozzarella:8.png", in: bundle, compatibleWith: nil)
		if imgMozzarella8 == nil {
			print("** Warning: Could not create image from 'Mozzarella_8.png'")
		}
		mozzarella8.image = imgMozzarella8
		mozzarella8.contentMode = .center
		mozzarella8.bounds = CGRect(x:0, y:0, width:139.0, height:120.0)
		mozzarella8__root.layer.position = CGPoint(x:713.000, y:12.000)
		mozzarella8__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		mozzarella8__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		mozzarella8__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mozzarella.addSubview(mozzarella8__root)
		mozzarella8__root.addSubview(mozzarella8__xScale)
		mozzarella8__xScale.addSubview(mozzarella8__yScale)
		mozzarella8__yScale.addSubview(mozzarella8)
		mozzarella.addSubview(mozzarella8__root)
		viewsByName["Mozzarella/8__root"] = mozzarella8__root
		viewsByName["Mozzarella/8__xScale"] = mozzarella8__xScale
		viewsByName["Mozzarella/8__yScale"] = mozzarella8__yScale
		viewsByName["Mozzarella/8"] = mozzarella8

		let mozzarella7__root = PizzaAnimationPassthroughView()
		let mozzarella7__xScale = PizzaAnimationPassthroughView()
		let mozzarella7__yScale = PizzaAnimationPassthroughView()
		let mozzarella7 = UIImageView()
		let imgMozzarella7 = UIImage(named:"Mozzarella:7.png", in: bundle, compatibleWith: nil)
		if imgMozzarella7 == nil {
			print("** Warning: Could not create image from 'Mozzarella_7.png'")
		}
		mozzarella7.image = imgMozzarella7
		mozzarella7.contentMode = .center
		mozzarella7.bounds = CGRect(x:0, y:0, width:160.0, height:147.0)
		mozzarella7__root.layer.position = CGPoint(x:713.000, y:125.450)
		mozzarella7__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		mozzarella7__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		mozzarella7__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mozzarella.addSubview(mozzarella7__root)
		mozzarella7__root.addSubview(mozzarella7__xScale)
		mozzarella7__xScale.addSubview(mozzarella7__yScale)
		mozzarella7__yScale.addSubview(mozzarella7)
		mozzarella.addSubview(mozzarella7__root)
		viewsByName["Mozzarella/7__root"] = mozzarella7__root
		viewsByName["Mozzarella/7__xScale"] = mozzarella7__xScale
		viewsByName["Mozzarella/7__yScale"] = mozzarella7__yScale
		viewsByName["Mozzarella/7"] = mozzarella7

		let mozzarella6__root = PizzaAnimationPassthroughView()
		let mozzarella6__xScale = PizzaAnimationPassthroughView()
		let mozzarella6__yScale = PizzaAnimationPassthroughView()
		let mozzarella6 = UIImageView()
		let imgMozzarella6 = UIImage(named:"Mozzarella:6.png", in: bundle, compatibleWith: nil)
		if imgMozzarella6 == nil {
			print("** Warning: Could not create image from 'Mozzarella_6.png'")
		}
		mozzarella6.image = imgMozzarella6
		mozzarella6.contentMode = .center
		mozzarella6.bounds = CGRect(x:0, y:0, width:156.0, height:109.0)
		mozzarella6__root.layer.position = CGPoint(x:-20.000, y:129.506)
		mozzarella6__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		mozzarella6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		mozzarella6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mozzarella.addSubview(mozzarella6__root)
		mozzarella6__root.addSubview(mozzarella6__xScale)
		mozzarella6__xScale.addSubview(mozzarella6__yScale)
		mozzarella6__yScale.addSubview(mozzarella6)
		mozzarella.addSubview(mozzarella6__root)
		viewsByName["Mozzarella/6__root"] = mozzarella6__root
		viewsByName["Mozzarella/6__xScale"] = mozzarella6__xScale
		viewsByName["Mozzarella/6__yScale"] = mozzarella6__yScale
		viewsByName["Mozzarella/6"] = mozzarella6

		let mozzarella5__root = PizzaAnimationPassthroughView()
		let mozzarella5__xScale = PizzaAnimationPassthroughView()
		let mozzarella5__yScale = PizzaAnimationPassthroughView()
		let mozzarella5 = UIImageView()
		let imgMozzarella5 = UIImage(named:"Mozzarella:5.png", in: bundle, compatibleWith: nil)
		if imgMozzarella5 == nil {
			print("** Warning: Could not create image from 'Mozzarella_5.png'")
		}
		mozzarella5.image = imgMozzarella5
		mozzarella5.contentMode = .center
		mozzarella5.bounds = CGRect(x:0, y:0, width:128.0, height:178.0)
		mozzarella5__root.layer.position = CGPoint(x:-20.000, y:271.165)
		mozzarella5__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		mozzarella5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		mozzarella5__root.transform = CGAffineTransform(rotationAngle: 6.283)
		mozzarella.addSubview(mozzarella5__root)
		mozzarella5__root.addSubview(mozzarella5__xScale)
		mozzarella5__xScale.addSubview(mozzarella5__yScale)
		mozzarella5__yScale.addSubview(mozzarella5)
		mozzarella.addSubview(mozzarella5__root)
		viewsByName["Mozzarella/5__root"] = mozzarella5__root
		viewsByName["Mozzarella/5__xScale"] = mozzarella5__xScale
		viewsByName["Mozzarella/5__yScale"] = mozzarella5__yScale
		viewsByName["Mozzarella/5"] = mozzarella5

		let mozzarella4__root = PizzaAnimationPassthroughView()
		let mozzarella4__xScale = PizzaAnimationPassthroughView()
		let mozzarella4__yScale = PizzaAnimationPassthroughView()
		let mozzarella4 = UIImageView()
		let imgMozzarella4 = UIImage(named:"Mozzarella:4.png", in: bundle, compatibleWith: nil)
		if imgMozzarella4 == nil {
			print("** Warning: Could not create image from 'Mozzarella_4.png'")
		}
		mozzarella4.image = imgMozzarella4
		mozzarella4.contentMode = .center
		mozzarella4.bounds = CGRect(x:0, y:0, width:127.0, height:127.0)
		mozzarella4__root.layer.position = CGPoint(x:713.000, y:318.315)
		mozzarella4__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		mozzarella4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		mozzarella4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mozzarella.addSubview(mozzarella4__root)
		mozzarella4__root.addSubview(mozzarella4__xScale)
		mozzarella4__xScale.addSubview(mozzarella4__yScale)
		mozzarella4__yScale.addSubview(mozzarella4)
		mozzarella.addSubview(mozzarella4__root)
		viewsByName["Mozzarella/4__root"] = mozzarella4__root
		viewsByName["Mozzarella/4__xScale"] = mozzarella4__xScale
		viewsByName["Mozzarella/4__yScale"] = mozzarella4__yScale
		viewsByName["Mozzarella/4"] = mozzarella4

		let mozzarella3__root = PizzaAnimationPassthroughView()
		let mozzarella3__xScale = PizzaAnimationPassthroughView()
		let mozzarella3__yScale = PizzaAnimationPassthroughView()
		let mozzarella3 = UIImageView()
		let imgMozzarella3 = UIImage(named:"Mozzarella:3.png", in: bundle, compatibleWith: nil)
		if imgMozzarella3 == nil {
			print("** Warning: Could not create image from 'Mozzarella_3.png'")
		}
		mozzarella3.image = imgMozzarella3
		mozzarella3.contentMode = .center
		mozzarella3.bounds = CGRect(x:0, y:0, width:195.0, height:166.0)
		mozzarella3__root.layer.position = CGPoint(x:713.000, y:220.451)
		mozzarella3__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		mozzarella3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		mozzarella3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mozzarella.addSubview(mozzarella3__root)
		mozzarella3__root.addSubview(mozzarella3__xScale)
		mozzarella3__xScale.addSubview(mozzarella3__yScale)
		mozzarella3__yScale.addSubview(mozzarella3)
		mozzarella.addSubview(mozzarella3__root)
		viewsByName["Mozzarella/3__root"] = mozzarella3__root
		viewsByName["Mozzarella/3__xScale"] = mozzarella3__xScale
		viewsByName["Mozzarella/3__yScale"] = mozzarella3__yScale
		viewsByName["Mozzarella/3"] = mozzarella3

		let mozzarella2__root = PizzaAnimationPassthroughView()
		let mozzarella2__xScale = PizzaAnimationPassthroughView()
		let mozzarella2__yScale = PizzaAnimationPassthroughView()
		let mozzarella2 = UIImageView()
		let imgMozzarella2 = UIImage(named:"Mozzarella:2.png", in: bundle, compatibleWith: nil)
		if imgMozzarella2 == nil {
			print("** Warning: Could not create image from 'Mozzarella_2.png'")
		}
		mozzarella2.image = imgMozzarella2
		mozzarella2.contentMode = .center
		mozzarella2.bounds = CGRect(x:0, y:0, width:224.0, height:148.0)
        mozzarella2__root.layer.position = CGPoint(x:-20.000, y:382.274)
		mozzarella2__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		mozzarella2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		mozzarella2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mozzarella.addSubview(mozzarella2__root)
		mozzarella2__root.addSubview(mozzarella2__xScale)
		mozzarella2__xScale.addSubview(mozzarella2__yScale)
		mozzarella2__yScale.addSubview(mozzarella2)
		mozzarella.addSubview(mozzarella2__root)
		viewsByName["Mozzarella/2__root"] = mozzarella2__root
		viewsByName["Mozzarella/2__xScale"] = mozzarella2__xScale
		viewsByName["Mozzarella/2__yScale"] = mozzarella2__yScale
		viewsByName["Mozzarella/2"] = mozzarella2

		let mozzarella1__root = PizzaAnimationPassthroughView()
		let mozzarella1__xScale = PizzaAnimationPassthroughView()
		let mozzarella1__yScale = PizzaAnimationPassthroughView()
		let mozzarella1 = UIImageView()
		let imgMozzarella1 = UIImage(named:"Mozzarella:1.png", in: bundle, compatibleWith: nil)
		if imgMozzarella1 == nil {
			print("** Warning: Could not create image from 'Mozzarella_1.png'")
		}
		mozzarella1.image = imgMozzarella1
		mozzarella1.contentMode = .center
		mozzarella1.bounds = CGRect(x:0, y:0, width:147.0, height:120.0)
		mozzarella1__root.layer.position = CGPoint(x:713.000, y:402.525)
		mozzarella1__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		mozzarella1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		mozzarella1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mozzarella.addSubview(mozzarella1__root)
		mozzarella1__root.addSubview(mozzarella1__xScale)
		mozzarella1__xScale.addSubview(mozzarella1__yScale)
		mozzarella1__yScale.addSubview(mozzarella1)
		mozzarella.addSubview(mozzarella1__root)
		viewsByName["Mozzarella/1__root"] = mozzarella1__root
		viewsByName["Mozzarella/1__xScale"] = mozzarella1__xScale
		viewsByName["Mozzarella/1__yScale"] = mozzarella1__yScale
		viewsByName["Mozzarella/1"] = mozzarella1

		let salame__root = PizzaAnimationPassthroughView()
		let salame__xScale = PizzaAnimationPassthroughView()
		let salame__yScale = PizzaAnimationPassthroughView()
		let salame = UIView()
		salame.bounds = CGRect(x:0, y:0, width:786.1, height:440.6)
		salame__root.layer.position = CGPoint(x:52.835, y:37.099)
		salame__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		salame__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		salame__root.transform = CGAffineTransform(rotationAngle: 0.003)
		pizza.addSubview(salame__root)
		salame__root.addSubview(salame__xScale)
		salame__xScale.addSubview(salame__yScale)
		salame__yScale.addSubview(salame)
		pizza.addSubview(salame__root)
		viewsByName["Salame__root"] = salame__root
		viewsByName["Salame__xScale"] = salame__xScale
		viewsByName["Salame__yScale"] = salame__yScale
		viewsByName["Salame"] = salame

		let salame1__root = PizzaAnimationPassthroughView()
		let salame1__xScale = PizzaAnimationPassthroughView()
		let salame1__yScale = PizzaAnimationPassthroughView()
		let salame1 = UIImageView()
		let imgSalame1 = UIImage(named:"Salame:1.png", in: bundle, compatibleWith: nil)
		if imgSalame1 == nil {
			print("** Warning: Could not create image from 'Salame:1.png'")
		}
		salame1.image = imgSalame1
		salame1.contentMode = .center
		salame1.bounds = CGRect(x:0, y:0, width:226.0, height:210.0)
		salame1__root.layer.position = CGPoint(x:97.522, y:170.208)
		salame1__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		salame1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		salame1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		salame.addSubview(salame1__root)
		salame1__root.addSubview(salame1__xScale)
		salame1__xScale.addSubview(salame1__yScale)
		salame1__yScale.addSubview(salame1)
		salame.addSubview(salame1__root)
		viewsByName["Salame/1__root"] = salame1__root
		viewsByName["Salame/1__xScale"] = salame1__xScale
		viewsByName["Salame/1__yScale"] = salame1__yScale
		viewsByName["Salame/1"] = salame1

		let salame2__root = PizzaAnimationPassthroughView()
		let salame2__xScale = PizzaAnimationPassthroughView()
		let salame2__yScale = PizzaAnimationPassthroughView()
		let salame2 = UIImageView()
		let imgSalame2 = UIImage(named:"Salame:2.png", in: bundle, compatibleWith: nil)
		if imgSalame2 == nil {
			print("** Warning: Could not create image from 'Salame:2.png'")
		}
		salame2.image = imgSalame2
		salame2.contentMode = .center
		salame2.bounds = CGRect(x:0, y:0, width:220.0, height:224.0)
		salame2__root.layer.position = CGPoint(x:59.944, y:106.747)
		salame2__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		salame2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		salame2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		salame.addSubview(salame2__root)
		salame2__root.addSubview(salame2__xScale)
		salame2__xScale.addSubview(salame2__yScale)
		salame2__yScale.addSubview(salame2)
		salame.addSubview(salame2__root)
		viewsByName["Salame/2__root"] = salame2__root
		viewsByName["Salame/2__xScale"] = salame2__xScale
		viewsByName["Salame/2__yScale"] = salame2__yScale
		viewsByName["Salame/2"] = salame2

		let salame4__root = PizzaAnimationPassthroughView()
		let salame4__xScale = PizzaAnimationPassthroughView()
		let salame4__yScale = PizzaAnimationPassthroughView()
		let salame4 = UIImageView()
		salame4.image = imgSalame1
		salame4.contentMode = .center
		salame4.bounds = CGRect(x:0, y:0, width:226.0, height:210.0)
		salame4__root.layer.position = CGPoint(x:763.545, y:170.075)
		salame4__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		salame4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		salame4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		salame.addSubview(salame4__root)
		salame4__root.addSubview(salame4__xScale)
		salame4__xScale.addSubview(salame4__yScale)
		salame4__yScale.addSubview(salame4)
		salame.addSubview(salame4__root)
		viewsByName["Salame/4__root"] = salame4__root
		viewsByName["Salame/4__xScale"] = salame4__xScale
		viewsByName["Salame/4__yScale"] = salame4__yScale
		viewsByName["Salame/4"] = salame4

		let salame5__root = PizzaAnimationPassthroughView()
		let salame5__xScale = PizzaAnimationPassthroughView()
		let salame5__yScale = PizzaAnimationPassthroughView()
		let salame5 = UIImageView()
		salame5.image = imgSalame1
		salame5.contentMode = .center
		salame5.bounds = CGRect(x:0, y:0, width:226.0, height:210.0)
		salame5__root.layer.position = CGPoint(x:678.497, y:384.091)
		salame5__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		salame5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		salame5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		salame.addSubview(salame5__root)
		salame5__root.addSubview(salame5__xScale)
		salame5__xScale.addSubview(salame5__yScale)
		salame5__yScale.addSubview(salame5)
		salame.addSubview(salame5__root)
		viewsByName["Salame/5__root"] = salame5__root
		viewsByName["Salame/5__xScale"] = salame5__xScale
		viewsByName["Salame/5__yScale"] = salame5__yScale
		viewsByName["Salame/5"] = salame5

		let salame6__root = PizzaAnimationPassthroughView()
		let salame6__xScale = PizzaAnimationPassthroughView()
		let salame6__yScale = PizzaAnimationPassthroughView()
		let salame6 = UIImageView()
		salame6.image = imgSalame1
		salame6.contentMode = .center
		salame6.bounds = CGRect(x:0, y:0, width:226.0, height:210.0)
		salame6__root.layer.position = CGPoint(x:22.600, y:335.677)
		salame6__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		salame6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		salame6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		salame.addSubview(salame6__root)
		salame6__root.addSubview(salame6__xScale)
		salame6__xScale.addSubview(salame6__yScale)
		salame6__yScale.addSubview(salame6)
		salame.addSubview(salame6__root)
		viewsByName["Salame/6__root"] = salame6__root
		viewsByName["Salame/6__xScale"] = salame6__xScale
		viewsByName["Salame/6__yScale"] = salame6__yScale
		viewsByName["Salame/6"] = salame6

		let salame7__root = PizzaAnimationPassthroughView()
		let salame7__xScale = PizzaAnimationPassthroughView()
		let salame7__yScale = PizzaAnimationPassthroughView()
		let salame7 = UIImageView()
		salame7.image = imgSalame2
		salame7.contentMode = .center
		salame7.bounds = CGRect(x:0, y:0, width:220.0, height:224.0)
		salame7__root.layer.position = CGPoint(x:702.483, y:95.239)
		salame7__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		salame7__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		salame7__root.transform = CGAffineTransform(rotationAngle: 0.000)
		salame.addSubview(salame7__root)
		salame7__root.addSubview(salame7__xScale)
		salame7__xScale.addSubview(salame7__yScale)
		salame7__yScale.addSubview(salame7)
		salame.addSubview(salame7__root)
		viewsByName["Salame/7__root"] = salame7__root
		viewsByName["Salame/7__xScale"] = salame7__xScale
		viewsByName["Salame/7__yScale"] = salame7__yScale
		viewsByName["Salame/7"] = salame7

		let salame11__root = PizzaAnimationPassthroughView()
		let salame11__xScale = PizzaAnimationPassthroughView()
		let salame11__yScale = PizzaAnimationPassthroughView()
		let salame11 = UIImageView()
		let imgSalame3 = UIImage(named:"Salame:3.png", in: bundle, compatibleWith: nil)
		if imgSalame3 == nil {
			print("** Warning: Could not create image from 'Salame:3.png'")
		}
		salame11.image = imgSalame3
		salame11.contentMode = .center
		salame11.layer.anchorPoint = CGPoint(x:0.006, y:-1.284)
		salame11.bounds = CGRect(x:0, y:0, width:220.0, height:222.0)
		salame11__root.layer.position = CGPoint(x:700.389, y:-56.995)
		salame11__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		salame11__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		salame11__root.transform = CGAffineTransform(rotationAngle: 0.000)
		salame.addSubview(salame11__root)
		salame11__root.addSubview(salame11__xScale)
		salame11__xScale.addSubview(salame11__yScale)
		salame11__yScale.addSubview(salame11)
		salame.addSubview(salame11__root)
		viewsByName["Salame/11__root"] = salame11__root
		viewsByName["Salame/11__xScale"] = salame11__xScale
		viewsByName["Salame/11__yScale"] = salame11__yScale
		viewsByName["Salame/11"] = salame11

		let salame14__root = PizzaAnimationPassthroughView()
		let salame14__xScale = PizzaAnimationPassthroughView()
		let salame14__yScale = PizzaAnimationPassthroughView()
		let salame14 = UIImageView()
		salame14.image = imgSalame3
		salame14.contentMode = .center
		salame14.layer.anchorPoint = CGPoint(x:0.006, y:-1.284)
		salame14.bounds = CGRect(x:0, y:0, width:220.0, height:222.0)
		salame14__root.layer.position = CGPoint(x:12.577, y:164.278)
		salame14__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		salame14__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		salame14__root.transform = CGAffineTransform(rotationAngle: 0.000)
		salame.addSubview(salame14__root)
		salame14__root.addSubview(salame14__xScale)
		salame14__xScale.addSubview(salame14__yScale)
		salame14__yScale.addSubview(salame14)
		salame.addSubview(salame14__root)
		viewsByName["Salame/14__root"] = salame14__root
		viewsByName["Salame/14__xScale"] = salame14__xScale
		viewsByName["Salame/14__yScale"] = salame14__yScale
		viewsByName["Salame/14"] = salame14

		let wurstel__root = PizzaAnimationPassthroughView()
		let wurstel__xScale = PizzaAnimationPassthroughView()
		let wurstel__yScale = PizzaAnimationPassthroughView()
		let wurstel = UIView()
		wurstel.bounds = CGRect(x:0, y:0, width:723.3, height:432.0)
		wurstel__root.layer.position = CGPoint(x:65.263, y:36.457)
		wurstel__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		wurstel__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		wurstel__root.transform = CGAffineTransform(rotationAngle: 0.003)
		pizza.addSubview(wurstel__root)
		wurstel__root.addSubview(wurstel__xScale)
		wurstel__xScale.addSubview(wurstel__yScale)
		wurstel__yScale.addSubview(wurstel)
		pizza.addSubview(wurstel__root)
		viewsByName["Wurstel__root"] = wurstel__root
		viewsByName["Wurstel__xScale"] = wurstel__xScale
		viewsByName["Wurstel__yScale"] = wurstel__yScale
		viewsByName["Wurstel"] = wurstel

		let wurstel17__root = PizzaAnimationPassthroughView()
		let wurstel17__xScale = PizzaAnimationPassthroughView()
		let wurstel17__yScale = PizzaAnimationPassthroughView()
		let wurstel17 = UIImageView()
		let imgWurstel = UIImage(named:"Wurstel.png", in: bundle, compatibleWith: nil)
		if imgWurstel == nil {
			print("** Warning: Could not create image from 'Wurstel.png'")
		}
		wurstel17.image = imgWurstel
		wurstel17.contentMode = .center
		wurstel17.layer.anchorPoint = CGPoint(x:0.012, y:-0.692)
		wurstel17.bounds = CGRect(x:0, y:0, width:122.0, height:128.0)
		wurstel17__root.layer.position = CGPoint(x:640.954, y:303.374)
		wurstel17__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		wurstel17__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		wurstel17__root.transform = CGAffineTransform(rotationAngle: 0.000)
		wurstel.addSubview(wurstel17__root)
		wurstel17__root.addSubview(wurstel17__xScale)
		wurstel17__xScale.addSubview(wurstel17__yScale)
		wurstel17__yScale.addSubview(wurstel17)
		wurstel.addSubview(wurstel17__root)
		viewsByName["Wurstel/17__root"] = wurstel17__root
		viewsByName["Wurstel/17__xScale"] = wurstel17__xScale
		viewsByName["Wurstel/17__yScale"] = wurstel17__yScale
		viewsByName["Wurstel/17"] = wurstel17

		let wurstel16__root = PizzaAnimationPassthroughView()
		let wurstel16__xScale = PizzaAnimationPassthroughView()
		let wurstel16__yScale = PizzaAnimationPassthroughView()
		let wurstel16 = UIImageView()
		wurstel16.image = imgWurstel
		wurstel16.contentMode = .center
		wurstel16.layer.anchorPoint = CGPoint(x:0.012, y:-0.692)
		wurstel16.bounds = CGRect(x:0, y:0, width:122.0, height:128.0)
		wurstel16__root.layer.position = CGPoint(x:637.747, y:388.675)
		wurstel16__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		wurstel16__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		wurstel16__root.transform = CGAffineTransform(rotationAngle: 0.000)
		wurstel.addSubview(wurstel16__root)
		wurstel16__root.addSubview(wurstel16__xScale)
		wurstel16__xScale.addSubview(wurstel16__yScale)
		wurstel16__yScale.addSubview(wurstel16)
		wurstel.addSubview(wurstel16__root)
		viewsByName["Wurstel/16__root"] = wurstel16__root
		viewsByName["Wurstel/16__xScale"] = wurstel16__xScale
		viewsByName["Wurstel/16__yScale"] = wurstel16__yScale
		viewsByName["Wurstel/16"] = wurstel16

		let wurstel15__root = PizzaAnimationPassthroughView()
		let wurstel15__xScale = PizzaAnimationPassthroughView()
		let wurstel15__yScale = PizzaAnimationPassthroughView()
		let wurstel15 = UIImageView()
		wurstel15.image = imgWurstel
		wurstel15.contentMode = .center
		wurstel15.layer.anchorPoint = CGPoint(x:0.012, y:-0.692)
		wurstel15.bounds = CGRect(x:0, y:0, width:122.0, height:128.0)
		wurstel15__root.layer.position = CGPoint(x:699.235, y:154.234)
		wurstel15__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		wurstel15__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		wurstel15__root.transform = CGAffineTransform(rotationAngle: 0.000)
		wurstel.addSubview(wurstel15__root)
		wurstel15__root.addSubview(wurstel15__xScale)
		wurstel15__xScale.addSubview(wurstel15__yScale)
		wurstel15__yScale.addSubview(wurstel15)
		wurstel.addSubview(wurstel15__root)
		viewsByName["Wurstel/15__root"] = wurstel15__root
		viewsByName["Wurstel/15__xScale"] = wurstel15__xScale
		viewsByName["Wurstel/15__yScale"] = wurstel15__yScale
		viewsByName["Wurstel/15"] = wurstel15

		let wurstel12__root = PizzaAnimationPassthroughView()
		let wurstel12__xScale = PizzaAnimationPassthroughView()
		let wurstel12__yScale = PizzaAnimationPassthroughView()
		let wurstel12 = UIImageView()
		wurstel12.image = imgWurstel
		wurstel12.contentMode = .center
		wurstel12.layer.anchorPoint = CGPoint(x:0.012, y:-0.692)
		wurstel12.bounds = CGRect(x:0, y:0, width:122.0, height:128.0)
		wurstel12__root.layer.position = CGPoint(x:639.997, y:42.745)
		wurstel12__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		wurstel12__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		wurstel12__root.transform = CGAffineTransform(rotationAngle: 0.000)
		wurstel.addSubview(wurstel12__root)
		wurstel12__root.addSubview(wurstel12__xScale)
		wurstel12__xScale.addSubview(wurstel12__yScale)
		wurstel12__yScale.addSubview(wurstel12)
		wurstel.addSubview(wurstel12__root)
		viewsByName["Wurstel/12__root"] = wurstel12__root
		viewsByName["Wurstel/12__xScale"] = wurstel12__xScale
		viewsByName["Wurstel/12__yScale"] = wurstel12__yScale
		viewsByName["Wurstel/12"] = wurstel12

		let wurstel9__root = PizzaAnimationPassthroughView()
		let wurstel9__xScale = PizzaAnimationPassthroughView()
		let wurstel9__yScale = PizzaAnimationPassthroughView()
		let wurstel9 = UIImageView()
		wurstel9.image = imgWurstel
		wurstel9.contentMode = .center
		wurstel9.layer.anchorPoint = CGPoint(x:0.012, y:-0.692)
		wurstel9.bounds = CGRect(x:0, y:0, width:122.0, height:128.0)
		wurstel9__root.layer.position = CGPoint(x:30.665, y:341.741)
		wurstel9__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		wurstel9__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		wurstel9__root.transform = CGAffineTransform(rotationAngle: 0.000)
		wurstel.addSubview(wurstel9__root)
		wurstel9__root.addSubview(wurstel9__xScale)
		wurstel9__xScale.addSubview(wurstel9__yScale)
		wurstel9__yScale.addSubview(wurstel9)
		wurstel.addSubview(wurstel9__root)
		viewsByName["Wurstel/9__root"] = wurstel9__root
		viewsByName["Wurstel/9__xScale"] = wurstel9__xScale
		viewsByName["Wurstel/9__yScale"] = wurstel9__yScale
		viewsByName["Wurstel/9"] = wurstel9

		let wurstel5__root = PizzaAnimationPassthroughView()
		let wurstel5__xScale = PizzaAnimationPassthroughView()
		let wurstel5__yScale = PizzaAnimationPassthroughView()
		let wurstel5 = UIImageView()
		wurstel5.image = imgWurstel
		wurstel5.contentMode = .center
		wurstel5.layer.anchorPoint = CGPoint(x:0.012, y:-0.692)
		wurstel5.bounds = CGRect(x:0, y:0, width:122.0, height:128.0)
		wurstel5__root.layer.position = CGPoint(x:33.868, y:196.535)
		wurstel5__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		wurstel5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		wurstel5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		wurstel.addSubview(wurstel5__root)
		wurstel5__root.addSubview(wurstel5__xScale)
		wurstel5__xScale.addSubview(wurstel5__yScale)
		wurstel5__yScale.addSubview(wurstel5)
		wurstel.addSubview(wurstel5__root)
		viewsByName["Wurstel/5__root"] = wurstel5__root
		viewsByName["Wurstel/5__xScale"] = wurstel5__xScale
		viewsByName["Wurstel/5__yScale"] = wurstel5__yScale
		viewsByName["Wurstel/5"] = wurstel5

		let wurstel4__root = PizzaAnimationPassthroughView()
		let wurstel4__xScale = PizzaAnimationPassthroughView()
		let wurstel4__yScale = PizzaAnimationPassthroughView()
		let wurstel4 = UIImageView()
		wurstel4.image = imgWurstel
		wurstel4.contentMode = .center
		wurstel4.layer.anchorPoint = CGPoint(x:0.012, y:-0.692)
		wurstel4.bounds = CGRect(x:0, y:0, width:122.0, height:128.0)
		wurstel4__root.layer.position = CGPoint(x:22.552, y:141.257)
		wurstel4__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		wurstel4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		wurstel4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		wurstel.addSubview(wurstel4__root)
		wurstel4__root.addSubview(wurstel4__xScale)
		wurstel4__xScale.addSubview(wurstel4__yScale)
		wurstel4__yScale.addSubview(wurstel4)
		wurstel.addSubview(wurstel4__root)
		viewsByName["Wurstel/4__root"] = wurstel4__root
		viewsByName["Wurstel/4__xScale"] = wurstel4__xScale
		viewsByName["Wurstel/4__yScale"] = wurstel4__yScale
		viewsByName["Wurstel/4"] = wurstel4

		let wurstel2__root = PizzaAnimationPassthroughView()
		let wurstel2__xScale = PizzaAnimationPassthroughView()
		let wurstel2__yScale = PizzaAnimationPassthroughView()
		let wurstel2 = UIImageView()
		wurstel2.image = imgWurstel
		wurstel2.contentMode = .center
		wurstel2.layer.anchorPoint = CGPoint(x:0.012, y:-0.692)
		wurstel2.bounds = CGRect(x:0, y:0, width:122.0, height:128.0)
		wurstel2__root.layer.position = CGPoint(x:37.368, y:29.847)
		wurstel2__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		wurstel2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		wurstel2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		wurstel.addSubview(wurstel2__root)
		wurstel2__root.addSubview(wurstel2__xScale)
		wurstel2__xScale.addSubview(wurstel2__yScale)
		wurstel2__yScale.addSubview(wurstel2)
		wurstel.addSubview(wurstel2__root)
		viewsByName["Wurstel/2__root"] = wurstel2__root
		viewsByName["Wurstel/2__xScale"] = wurstel2__xScale
		viewsByName["Wurstel/2__yScale"] = wurstel2__yScale
		viewsByName["Wurstel/2"] = wurstel2

		let patatine__root = PizzaAnimationPassthroughView()
		let patatine__xScale = PizzaAnimationPassthroughView()
		let patatine__yScale = PizzaAnimationPassthroughView()
		let patatine = UIView()
		patatine.bounds = CGRect(x:0, y:0, width:226.5, height:224.6)
		patatine__root.layer.position = CGPoint(x:23.751, y:172.781)
		patatine__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		patatine__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		patatine__root.transform = CGAffineTransform(rotationAngle: 0.000)
		pizza.addSubview(patatine__root)
		patatine__root.addSubview(patatine__xScale)
		patatine__xScale.addSubview(patatine__yScale)
		patatine__yScale.addSubview(patatine)
		pizza.addSubview(patatine__root)
		viewsByName["Patatine__root"] = patatine__root
		viewsByName["Patatine__xScale"] = patatine__xScale
		viewsByName["Patatine__yScale"] = patatine__yScale
		viewsByName["Patatine"] = patatine

		let patatine11__root = PizzaAnimationPassthroughView()
		let patatine11__xScale = PizzaAnimationPassthroughView()
		let patatine11__yScale = PizzaAnimationPassthroughView()
		let patatine11 = UIImageView()
		let img21 = UIImage(named:"Patatina:3.png", in: bundle, compatibleWith: nil)
		if img21 == nil {
			print("** Warning: Could not create image from '2_1.png'")
		}
		patatine11.image = img21
		patatine11.contentMode = .center
		patatine11.bounds = CGRect(x:0, y:0, width:122.0, height:476.0)
		patatine11__root.layer.position = CGPoint(x:-153.433, y:-22.035)
		patatine11__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		patatine11__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		patatine11__root.transform = CGAffineTransform(rotationAngle: 0.000)
		patatine.addSubview(patatine11__root)
		patatine11__root.addSubview(patatine11__xScale)
		patatine11__xScale.addSubview(patatine11__yScale)
		patatine11__yScale.addSubview(patatine11)
		patatine.addSubview(patatine11__root)
		viewsByName["Patatine/11__root"] = patatine11__root
		viewsByName["Patatine/11__xScale"] = patatine11__xScale
		viewsByName["Patatine/11__yScale"] = patatine11__yScale
		viewsByName["Patatine/11"] = patatine11

		let patatine5__root = PizzaAnimationPassthroughView()
		let patatine5__xScale = PizzaAnimationPassthroughView()
		let patatine5__yScale = PizzaAnimationPassthroughView()
		let patatine5 = UIImageView()
		let img11 = UIImage(named:"Patatina:1.png", in: bundle, compatibleWith: nil)
		if img11 == nil {
			print("** Warning: Could not create image from '1_1.png'")
		}
		patatine5.image = img11
		patatine5.contentMode = .center
		patatine5.bounds = CGRect(x:0, y:0, width:96.0, height:382.0)
		patatine5__root.layer.position = CGPoint(x:444.261, y:79.642)
		patatine5__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		patatine5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		patatine5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		patatine.addSubview(patatine5__root)
		patatine5__root.addSubview(patatine5__xScale)
		patatine5__xScale.addSubview(patatine5__yScale)
		patatine5__yScale.addSubview(patatine5)
		patatine.addSubview(patatine5__root)
		viewsByName["Patatine/5__root"] = patatine5__root
		viewsByName["Patatine/5__xScale"] = patatine5__xScale
		viewsByName["Patatine/5__yScale"] = patatine5__yScale
		viewsByName["Patatine/5"] = patatine5

		let patatine7__root = PizzaAnimationPassthroughView()
		let patatine7__xScale = PizzaAnimationPassthroughView()
		let patatine7__yScale = PizzaAnimationPassthroughView()
		let patatine7 = UIImageView()
		let img31 = UIImage(named:"Patatina:2.png", in: bundle, compatibleWith: nil)
		if img31 == nil {
			print("** Warning: Could not create image from '3_1.png'")
		}
		patatine7.image = img31
		patatine7.contentMode = .center
		patatine7.bounds = CGRect(x:0, y:0, width:124.0, height:506.0)
		patatine7__root.layer.position = CGPoint(x:-159.430, y:-181.283)
		patatine7__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		patatine7__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		patatine7__root.transform = CGAffineTransform(rotationAngle: 0.000)
		patatine.addSubview(patatine7__root)
		patatine7__root.addSubview(patatine7__xScale)
		patatine7__xScale.addSubview(patatine7__yScale)
		patatine7__yScale.addSubview(patatine7)
		patatine.addSubview(patatine7__root)
		viewsByName["Patatine/7__root"] = patatine7__root
		viewsByName["Patatine/7__xScale"] = patatine7__xScale
		viewsByName["Patatine/7__yScale"] = patatine7__yScale
		viewsByName["Patatine/7"] = patatine7

		let patatine15__root = PizzaAnimationPassthroughView()
		let patatine15__xScale = PizzaAnimationPassthroughView()
		let patatine15__yScale = PizzaAnimationPassthroughView()
		let patatine15 = UIImageView()
		patatine15.image = img11
		patatine15.contentMode = .center
		patatine15.bounds = CGRect(x:0, y:0, width:96.0, height:382.0)
		patatine15__root.layer.position = CGPoint(x:-199.176, y:-138.885)
		patatine15__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		patatine15__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		patatine15__root.transform = CGAffineTransform(rotationAngle: 0.000)
		patatine.addSubview(patatine15__root)
		patatine15__root.addSubview(patatine15__xScale)
		patatine15__xScale.addSubview(patatine15__yScale)
		patatine15__yScale.addSubview(patatine15)
		patatine.addSubview(patatine15__root)
		viewsByName["Patatine/15__root"] = patatine15__root
		viewsByName["Patatine/15__xScale"] = patatine15__xScale
		viewsByName["Patatine/15__yScale"] = patatine15__yScale
		viewsByName["Patatine/15"] = patatine15

		let patatine8__root = PizzaAnimationPassthroughView()
		let patatine8__xScale = PizzaAnimationPassthroughView()
		let patatine8__yScale = PizzaAnimationPassthroughView()
		let patatine8 = UIImageView()
		patatine8.image = img21
		patatine8.contentMode = .center
		patatine8.bounds = CGRect(x:0, y:0, width:122.0, height:476.0)
		patatine8__root.layer.position = CGPoint(x:-190.107, y:34.936)
		patatine8__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		patatine8__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		patatine8__root.transform = CGAffineTransform(rotationAngle: 0.000)
		patatine.addSubview(patatine8__root)
		patatine8__root.addSubview(patatine8__xScale)
		patatine8__xScale.addSubview(patatine8__yScale)
		patatine8__yScale.addSubview(patatine8)
		patatine.addSubview(patatine8__root)
		viewsByName["Patatine/8__root"] = patatine8__root
		viewsByName["Patatine/8__xScale"] = patatine8__xScale
		viewsByName["Patatine/8__yScale"] = patatine8__yScale
		viewsByName["Patatine/8"] = patatine8

		let patatine3__root = PizzaAnimationPassthroughView()
		let patatine3__xScale = PizzaAnimationPassthroughView()
		let patatine3__yScale = PizzaAnimationPassthroughView()
		let patatine3 = UIImageView()
		patatine3.image = img31
		patatine3.contentMode = .center
		patatine3.bounds = CGRect(x:0, y:0, width:124.0, height:506.0)
		patatine3__root.layer.position = CGPoint(x:471.287, y:-21.627)
		patatine3__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		patatine3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		patatine3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		patatine.addSubview(patatine3__root)
		patatine3__root.addSubview(patatine3__xScale)
		patatine3__xScale.addSubview(patatine3__yScale)
		patatine3__yScale.addSubview(patatine3)
		patatine.addSubview(patatine3__root)
		viewsByName["Patatine/3__root"] = patatine3__root
		viewsByName["Patatine/3__xScale"] = patatine3__xScale
		viewsByName["Patatine/3__yScale"] = patatine3__yScale
		viewsByName["Patatine/3"] = patatine3

		let patatine10__root = PizzaAnimationPassthroughView()
		let patatine10__xScale = PizzaAnimationPassthroughView()
		let patatine10__yScale = PizzaAnimationPassthroughView()
		let patatine10 = UIImageView()
		patatine10.image = img21
		patatine10.contentMode = .center
		patatine10.bounds = CGRect(x:0, y:0, width:122.0, height:476.0)
		patatine10__root.layer.position = CGPoint(x:439.125, y:-226.244)
		patatine10__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		patatine10__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		patatine10__root.transform = CGAffineTransform(rotationAngle: 0.000)
		patatine.addSubview(patatine10__root)
		patatine10__root.addSubview(patatine10__xScale)
		patatine10__xScale.addSubview(patatine10__yScale)
		patatine10__yScale.addSubview(patatine10)
		patatine.addSubview(patatine10__root)
		viewsByName["Patatine/10__root"] = patatine10__root
		viewsByName["Patatine/10__xScale"] = patatine10__xScale
		viewsByName["Patatine/10__yScale"] = patatine10__yScale
		viewsByName["Patatine/10"] = patatine10

		let patatine14__root = PizzaAnimationPassthroughView()
		let patatine14__xScale = PizzaAnimationPassthroughView()
		let patatine14__yScale = PizzaAnimationPassthroughView()
		let patatine14 = UIImageView()
		patatine14.image = img31
		patatine14.contentMode = .center
		patatine14.bounds = CGRect(x:0, y:0, width:124.0, height:506.0)
		patatine14__root.layer.position = CGPoint(x:471.007, y:-168.068)
		patatine14__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		patatine14__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		patatine14__root.transform = CGAffineTransform(rotationAngle: 0.000)
		patatine.addSubview(patatine14__root)
		patatine14__root.addSubview(patatine14__xScale)
		patatine14__xScale.addSubview(patatine14__yScale)
		patatine14__yScale.addSubview(patatine14)
		patatine.addSubview(patatine14__root)
		viewsByName["Patatine/14__root"] = patatine14__root
		viewsByName["Patatine/14__xScale"] = patatine14__xScale
		viewsByName["Patatine/14__yScale"] = patatine14__yScale
		viewsByName["Patatine/14"] = patatine14

		let aglio__root = PizzaAnimationPassthroughView()
		let aglio__xScale = PizzaAnimationPassthroughView()
		let aglio__yScale = PizzaAnimationPassthroughView()
		let aglio = UIView()
		aglio.bounds = CGRect(x:0, y:0, width:626.5, height:389.6)
		aglio__root.layer.position = CGPoint(x:69.643, y:12.754)
		aglio__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		aglio__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		aglio__root.transform = CGAffineTransform(rotationAngle: 0.003)
		pizza.addSubview(aglio__root)
		aglio__root.addSubview(aglio__xScale)
		aglio__xScale.addSubview(aglio__yScale)
		aglio__yScale.addSubview(aglio)
		pizza.addSubview(aglio__root)
		viewsByName["Aglio__root"] = aglio__root
		viewsByName["Aglio__xScale"] = aglio__xScale
		viewsByName["Aglio__yScale"] = aglio__yScale
		viewsByName["Aglio"] = aglio

		let aglio7__root = PizzaAnimationPassthroughView()
		let aglio7__xScale = PizzaAnimationPassthroughView()
		let aglio7__yScale = PizzaAnimationPassthroughView()
		let aglio7 = UIImageView()
		let imgAglio1 = UIImage(named:"Aglio:1.png", in: bundle, compatibleWith: nil)
		if imgAglio1 == nil {
			print("** Warning: Could not create image from 'Aglio:1.png'")
		}
		aglio7.image = imgAglio1
		aglio7.contentMode = .center
		aglio7.bounds = CGRect(x:0, y:0, width:56.0, height:78.0)
		aglio7__root.layer.position = CGPoint(x:614.600, y:381.800)
		aglio7__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		aglio7__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		aglio7__root.transform = CGAffineTransform(rotationAngle: 0.000)
		aglio.addSubview(aglio7__root)
		aglio7__root.addSubview(aglio7__xScale)
		aglio7__xScale.addSubview(aglio7__yScale)
		aglio7__yScale.addSubview(aglio7)
		aglio.addSubview(aglio7__root)
		viewsByName["Aglio/7__root"] = aglio7__root
		viewsByName["Aglio/7__xScale"] = aglio7__xScale
		viewsByName["Aglio/7__yScale"] = aglio7__yScale
		viewsByName["Aglio/7"] = aglio7

		let aglio4__root = PizzaAnimationPassthroughView()
		let aglio4__xScale = PizzaAnimationPassthroughView()
		let aglio4__yScale = PizzaAnimationPassthroughView()
		let aglio4 = UIImageView()
		aglio4.image = imgAglio1
		aglio4.contentMode = .center
		aglio4.bounds = CGRect(x:0, y:0, width:56.0, height:78.0)
		aglio4__root.layer.position = CGPoint(x:612.600, y:7.800)
		aglio4__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		aglio4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		aglio4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		aglio.addSubview(aglio4__root)
		aglio4__root.addSubview(aglio4__xScale)
		aglio4__xScale.addSubview(aglio4__yScale)
		aglio4__yScale.addSubview(aglio4)
		aglio.addSubview(aglio4__root)
		viewsByName["Aglio/4__root"] = aglio4__root
		viewsByName["Aglio/4__xScale"] = aglio4__xScale
		viewsByName["Aglio/4__yScale"] = aglio4__yScale
		viewsByName["Aglio/4"] = aglio4

		let aglio2__root = PizzaAnimationPassthroughView()
		let aglio2__xScale = PizzaAnimationPassthroughView()
		let aglio2__yScale = PizzaAnimationPassthroughView()
		let aglio2 = UIImageView()
		let imgAglio2 = UIImage(named:"Aglio:2.png", in: bundle, compatibleWith: nil)
		if imgAglio2 == nil {
			print("** Warning: Could not create image from 'Aglio:2.png'")
		}
		aglio2.image = imgAglio2
		aglio2.contentMode = .center
		aglio2.bounds = CGRect(x:0, y:0, width:102.0, height:94.0)
		aglio2__root.layer.position = CGPoint(x:14.169, y:80.655)
		aglio2__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		aglio2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		aglio2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		aglio.addSubview(aglio2__root)
		aglio2__root.addSubview(aglio2__xScale)
		aglio2__xScale.addSubview(aglio2__yScale)
		aglio2__yScale.addSubview(aglio2)
		aglio.addSubview(aglio2__root)
		viewsByName["Aglio/2__root"] = aglio2__root
		viewsByName["Aglio/2__xScale"] = aglio2__xScale
		viewsByName["Aglio/2__yScale"] = aglio2__yScale
		viewsByName["Aglio/2"] = aglio2

		let aglio5__root = PizzaAnimationPassthroughView()
		let aglio5__xScale = PizzaAnimationPassthroughView()
		let aglio5__yScale = PizzaAnimationPassthroughView()
		let aglio5 = UIImageView()
		aglio5.image = imgAglio2
		aglio5.contentMode = .center
		aglio5.bounds = CGRect(x:0, y:0, width:102.0, height:94.0)
		aglio5__root.layer.position = CGPoint(x:11.161, y:355.651)
		aglio5__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		aglio5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		aglio5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		aglio.addSubview(aglio5__root)
		aglio5__root.addSubview(aglio5__xScale)
		aglio5__xScale.addSubview(aglio5__yScale)
		aglio5__yScale.addSubview(aglio5)
		aglio.addSubview(aglio5__root)
		viewsByName["Aglio/5__root"] = aglio5__root
		viewsByName["Aglio/5__xScale"] = aglio5__xScale
		viewsByName["Aglio/5__yScale"] = aglio5__yScale
		viewsByName["Aglio/5"] = aglio5

		let aglio3__root = PizzaAnimationPassthroughView()
		let aglio3__xScale = PizzaAnimationPassthroughView()
		let aglio3__yScale = PizzaAnimationPassthroughView()
		let aglio3 = UIImageView()
		let imgAglio3 = UIImage(named:"Aglio:3.png", in: bundle, compatibleWith: nil)
		if imgAglio3 == nil {
			print("** Warning: Could not create image from 'Aglio:3.png'")
		}
		aglio3.image = imgAglio3
		aglio3.contentMode = .center
		aglio3.bounds = CGRect(x:0, y:0, width:56.0, height:84.0)
		aglio3__root.layer.position = CGPoint(x:7.883, y:24.083)
		aglio3__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		aglio3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		aglio3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		aglio.addSubview(aglio3__root)
		aglio3__root.addSubview(aglio3__xScale)
		aglio3__xScale.addSubview(aglio3__yScale)
		aglio3__yScale.addSubview(aglio3)
		aglio.addSubview(aglio3__root)
		viewsByName["Aglio/3__root"] = aglio3__root
		viewsByName["Aglio/3__xScale"] = aglio3__xScale
		viewsByName["Aglio/3__yScale"] = aglio3__yScale
		viewsByName["Aglio/3"] = aglio3

		let aglio6__root = PizzaAnimationPassthroughView()
		let aglio6__xScale = PizzaAnimationPassthroughView()
		let aglio6__yScale = PizzaAnimationPassthroughView()
		let aglio6 = UIImageView()
		aglio6.image = imgAglio3
		aglio6.contentMode = .center
		aglio6.bounds = CGRect(x:0, y:0, width:56.0, height:84.0)
		aglio6__root.layer.position = CGPoint(x:620.880, y:152.083)
		aglio6__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		aglio6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		aglio6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		aglio.addSubview(aglio6__root)
		aglio6__root.addSubview(aglio6__xScale)
		aglio6__xScale.addSubview(aglio6__yScale)
		aglio6__yScale.addSubview(aglio6)
		aglio.addSubview(aglio6__root)
		viewsByName["Aglio/6__root"] = aglio6__root
		viewsByName["Aglio/6__xScale"] = aglio6__xScale
		viewsByName["Aglio/6__yScale"] = aglio6__yScale
		viewsByName["Aglio/6"] = aglio6

		let acciughe__root = PizzaAnimationPassthroughView()
		let acciughe__xScale = PizzaAnimationPassthroughView()
		let acciughe__yScale = PizzaAnimationPassthroughView()
		let acciughe = UIView()
		acciughe.bounds = CGRect(x:0, y:0, width:672.0, height:436.0)
		acciughe__root.layer.position = CGPoint(x:55.348, y:30.721)
		acciughe__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		acciughe__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		acciughe__root.transform = CGAffineTransform(rotationAngle: 0.003)
		pizza.addSubview(acciughe__root)
		acciughe__root.addSubview(acciughe__xScale)
		acciughe__xScale.addSubview(acciughe__yScale)
		acciughe__yScale.addSubview(acciughe)
		pizza.addSubview(acciughe__root)
		viewsByName["Acciughe__root"] = acciughe__root
		viewsByName["Acciughe__xScale"] = acciughe__xScale
		viewsByName["Acciughe__yScale"] = acciughe__yScale
		viewsByName["Acciughe"] = acciughe

		let acciuga1__root = PizzaAnimationPassthroughView()
		let acciuga1__xScale = PizzaAnimationPassthroughView()
		let acciuga1__yScale = PizzaAnimationPassthroughView()
		let acciuga1 = UIImageView()
		let imgAcciuga = UIImage(named:"Acciuga.png", in: bundle, compatibleWith: nil)
		if imgAcciuga == nil {
			print("** Warning: Could not create image from 'Acciuga.png'")
		}
		acciuga1.image = imgAcciuga
		acciuga1.contentMode = .center
		acciuga1.bounds = CGRect(x:0, y:0, width:80.0, height:226.0)
		acciuga1__root.layer.position = CGPoint(x:46.543, y:60.721)
		acciuga1__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		acciuga1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		acciuga1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		acciughe.addSubview(acciuga1__root)
		acciuga1__root.addSubview(acciuga1__xScale)
		acciuga1__xScale.addSubview(acciuga1__yScale)
		acciuga1__yScale.addSubview(acciuga1)
		acciughe.addSubview(acciuga1__root)
		viewsByName["Acciuga/1__root"] = acciuga1__root
		viewsByName["Acciuga/1__xScale"] = acciuga1__xScale
		viewsByName["Acciuga/1__yScale"] = acciuga1__yScale
		viewsByName["Acciuga/1"] = acciuga1

		let acciuga2__root = PizzaAnimationPassthroughView()
		let acciuga2__xScale = PizzaAnimationPassthroughView()
		let acciuga2__yScale = PizzaAnimationPassthroughView()
		let acciuga2 = UIImageView()
		acciuga2.image = imgAcciuga
		acciuga2.contentMode = .center
		acciuga2.bounds = CGRect(x:0, y:0, width:80.0, height:226.0)
		acciuga2__root.layer.position = CGPoint(x:50.539, y:144.288)
		acciuga2__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		acciuga2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		acciuga2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		acciughe.addSubview(acciuga2__root)
		acciuga2__root.addSubview(acciuga2__xScale)
		acciuga2__xScale.addSubview(acciuga2__yScale)
		acciuga2__yScale.addSubview(acciuga2)
		acciughe.addSubview(acciuga2__root)
		viewsByName["Acciuga/2__root"] = acciuga2__root
		viewsByName["Acciuga/2__xScale"] = acciuga2__xScale
		viewsByName["Acciuga/2__yScale"] = acciuga2__yScale
		viewsByName["Acciuga/2"] = acciuga2

		let acciuga4__root = PizzaAnimationPassthroughView()
		let acciuga4__xScale = PizzaAnimationPassthroughView()
		let acciuga4__yScale = PizzaAnimationPassthroughView()
		let acciuga4 = UIImageView()
		acciuga4.image = imgAcciuga
		acciuga4.contentMode = .center
		acciuga4.bounds = CGRect(x:0, y:0, width:80.0, height:226.0)
		acciuga4__root.layer.position = CGPoint(x:42.887, y:387.334)
		acciuga4__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		acciuga4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		acciuga4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		acciughe.addSubview(acciuga4__root)
		acciuga4__root.addSubview(acciuga4__xScale)
		acciuga4__xScale.addSubview(acciuga4__yScale)
		acciuga4__yScale.addSubview(acciuga4)
		acciughe.addSubview(acciuga4__root)
		viewsByName["Acciuga/4__root"] = acciuga4__root
		viewsByName["Acciuga/4__xScale"] = acciuga4__xScale
		viewsByName["Acciuga/4__yScale"] = acciuga4__yScale
		viewsByName["Acciuga/4"] = acciuga4

		let acciuga6__root = PizzaAnimationPassthroughView()
		let acciuga6__xScale = PizzaAnimationPassthroughView()
		let acciuga6__yScale = PizzaAnimationPassthroughView()
		let acciuga6 = UIImageView()
		acciuga6.image = imgAcciuga
		acciuga6.contentMode = .center
		acciuga6.bounds = CGRect(x:0, y:0, width:80.0, height:226.0)
		acciuga6__root.layer.position = CGPoint(x:629.355, y:134.413)
		acciuga6__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		acciuga6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		acciuga6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		acciughe.addSubview(acciuga6__root)
		acciuga6__root.addSubview(acciuga6__xScale)
		acciuga6__xScale.addSubview(acciuga6__yScale)
		acciuga6__yScale.addSubview(acciuga6)
		acciughe.addSubview(acciuga6__root)
		viewsByName["Acciuga/6__root"] = acciuga6__root
		viewsByName["Acciuga/6__xScale"] = acciuga6__xScale
		viewsByName["Acciuga/6__yScale"] = acciuga6__yScale
		viewsByName["Acciuga/6"] = acciuga6

		let acciuga7__root = PizzaAnimationPassthroughView()
		let acciuga7__xScale = PizzaAnimationPassthroughView()
		let acciuga7__yScale = PizzaAnimationPassthroughView()
		let acciuga7 = UIImageView()
		acciuga7.image = imgAcciuga
		acciuga7.contentMode = .center
		acciuga7.bounds = CGRect(x:0, y:0, width:80.0, height:226.0)
		acciuga7__root.layer.position = CGPoint(x:663.953, y:224.984)
		acciuga7__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		acciuga7__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		acciuga7__root.transform = CGAffineTransform(rotationAngle: 0.000)
		acciughe.addSubview(acciuga7__root)
		acciuga7__root.addSubview(acciuga7__xScale)
		acciuga7__xScale.addSubview(acciuga7__yScale)
		acciuga7__yScale.addSubview(acciuga7)
		acciughe.addSubview(acciuga7__root)
		viewsByName["Acciuga/7__root"] = acciuga7__root
		viewsByName["Acciuga/7__xScale"] = acciuga7__xScale
		viewsByName["Acciuga/7__yScale"] = acciuga7__yScale
		viewsByName["Acciuga/7"] = acciuga7

		let acciuga9__root = PizzaAnimationPassthroughView()
		let acciuga9__xScale = PizzaAnimationPassthroughView()
		let acciuga9__yScale = PizzaAnimationPassthroughView()
		let acciuga9 = UIImageView()
		acciuga9.image = imgAcciuga
		acciuga9.contentMode = .center
		acciuga9.bounds = CGRect(x:0, y:0, width:80.0, height:226.0)
		acciuga9__root.layer.position = CGPoint(x:639.883, y:413.434)
		acciuga9__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		acciuga9__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		acciuga9__root.transform = CGAffineTransform(rotationAngle: 0.000)
		acciughe.addSubview(acciuga9__root)
		acciuga9__root.addSubview(acciuga9__xScale)
		acciuga9__xScale.addSubview(acciuga9__yScale)
		acciuga9__yScale.addSubview(acciuga9)
		acciughe.addSubview(acciuga9__root)
		viewsByName["Acciuga/9__root"] = acciuga9__root
		viewsByName["Acciuga/9__xScale"] = acciuga9__xScale
		viewsByName["Acciuga/9__yScale"] = acciuga9__yScale
		viewsByName["Acciuga/9"] = acciuga9

		let capperi__root = PizzaAnimationPassthroughView()
		let capperi__xScale = PizzaAnimationPassthroughView()
		let capperi__yScale = PizzaAnimationPassthroughView()
		let capperi = UIView()
		capperi.bounds = CGRect(x:0, y:0, width:635.4, height:387.8)
		capperi__root.layer.position = CGPoint(x:56.380, y:19.661)
		capperi__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		capperi__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		capperi__root.transform = CGAffineTransform(rotationAngle: 0.003)
		pizza.addSubview(capperi__root)
		capperi__root.addSubview(capperi__xScale)
		capperi__xScale.addSubview(capperi__yScale)
		capperi__yScale.addSubview(capperi)
		pizza.addSubview(capperi__root)
		viewsByName["Capperi__root"] = capperi__root
		viewsByName["Capperi__xScale"] = capperi__xScale
		viewsByName["Capperi__yScale"] = capperi__yScale
		viewsByName["Capperi"] = capperi

		let cappero4__root = PizzaAnimationPassthroughView()
		let cappero4__xScale = PizzaAnimationPassthroughView()
		let cappero4__yScale = PizzaAnimationPassthroughView()
		let cappero4 = UIImageView()
		let imgCappero1 = UIImage(named:"Cappero:1.png", in: bundle, compatibleWith: nil)
		if imgCappero1 == nil {
			print("** Warning: Could not create image from 'Cappero:1.png'")
		}
		cappero4.image = imgCappero1
		cappero4.contentMode = .center
		cappero4.bounds = CGRect(x:0, y:0, width:56.0, height:96.0)
		cappero4__root.layer.position = CGPoint(x:629.842, y:378.237)
		cappero4__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		cappero4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		cappero4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		capperi.addSubview(cappero4__root)
		cappero4__root.addSubview(cappero4__xScale)
		cappero4__xScale.addSubview(cappero4__yScale)
		cappero4__yScale.addSubview(cappero4)
		capperi.addSubview(cappero4__root)
		viewsByName["Cappero/4__root"] = cappero4__root
		viewsByName["Cappero/4__xScale"] = cappero4__xScale
		viewsByName["Cappero/4__yScale"] = cappero4__yScale
		viewsByName["Cappero/4"] = cappero4

		let cappero5__root = PizzaAnimationPassthroughView()
		let cappero5__xScale = PizzaAnimationPassthroughView()
		let cappero5__yScale = PizzaAnimationPassthroughView()
		let cappero5 = UIImageView()
		cappero5.image = imgCappero1
		cappero5.contentMode = .center
		cappero5.bounds = CGRect(x:0, y:0, width:56.0, height:96.0)
		cappero5__root.layer.position = CGPoint(x:616.881, y:9.600)
		cappero5__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		cappero5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		cappero5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		capperi.addSubview(cappero5__root)
		cappero5__root.addSubview(cappero5__xScale)
		cappero5__xScale.addSubview(cappero5__yScale)
		cappero5__yScale.addSubview(cappero5)
		capperi.addSubview(cappero5__root)
		viewsByName["Cappero/5__root"] = cappero5__root
		viewsByName["Cappero/5__xScale"] = cappero5__xScale
		viewsByName["Cappero/5__yScale"] = cappero5__yScale
		viewsByName["Cappero/5"] = cappero5

		let cappero2__root = PizzaAnimationPassthroughView()
		let cappero2__xScale = PizzaAnimationPassthroughView()
		let cappero2__yScale = PizzaAnimationPassthroughView()
		let cappero2 = UIImageView()
		let imgCappero2 = UIImage(named:"Cappero:2.png", in: bundle, compatibleWith: nil)
		if imgCappero2 == nil {
			print("** Warning: Could not create image from 'Cappero:2.png'")
		}
		cappero2.image = imgCappero2
		cappero2.contentMode = .center
		cappero2.bounds = CGRect(x:0, y:0, width:82.0, height:62.0)
		cappero2__root.layer.position = CGPoint(x:28.444, y:130.866)
		cappero2__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		cappero2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		cappero2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		capperi.addSubview(cappero2__root)
		cappero2__root.addSubview(cappero2__xScale)
		cappero2__xScale.addSubview(cappero2__yScale)
		cappero2__yScale.addSubview(cappero2)
		capperi.addSubview(cappero2__root)
		viewsByName["Cappero/2__root"] = cappero2__root
		viewsByName["Cappero/2__xScale"] = cappero2__xScale
		viewsByName["Cappero/2__yScale"] = cappero2__yScale
		viewsByName["Cappero/2"] = cappero2

		let cappero6__root = PizzaAnimationPassthroughView()
		let cappero6__xScale = PizzaAnimationPassthroughView()
		let cappero6__yScale = PizzaAnimationPassthroughView()
		let cappero6 = UIImageView()
		cappero6.image = imgCappero2
		cappero6.contentMode = .center
		cappero6.bounds = CGRect(x:0, y:0, width:82.0, height:62.0)
		cappero6__root.layer.position = CGPoint(x:619.541, y:255.436)
		cappero6__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		cappero6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		cappero6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		capperi.addSubview(cappero6__root)
		cappero6__root.addSubview(cappero6__xScale)
		cappero6__xScale.addSubview(cappero6__yScale)
		cappero6__yScale.addSubview(cappero6)
		capperi.addSubview(cappero6__root)
		viewsByName["Cappero/6__root"] = cappero6__root
		viewsByName["Cappero/6__xScale"] = cappero6__xScale
		viewsByName["Cappero/6__yScale"] = cappero6__yScale
		viewsByName["Cappero/6"] = cappero6

		let cappero7__root = PizzaAnimationPassthroughView()
		let cappero7__xScale = PizzaAnimationPassthroughView()
		let cappero7__yScale = PizzaAnimationPassthroughView()
		let cappero7 = UIImageView()
		cappero7.image = imgCappero2
		cappero7.contentMode = .center
		cappero7.bounds = CGRect(x:0, y:0, width:82.0, height:62.0)
		cappero7__root.layer.position = CGPoint(x:27.803, y:379.940)
		cappero7__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		cappero7__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		cappero7__root.transform = CGAffineTransform(rotationAngle: 0.000)
		capperi.addSubview(cappero7__root)
		cappero7__root.addSubview(cappero7__xScale)
		cappero7__xScale.addSubview(cappero7__yScale)
		cappero7__yScale.addSubview(cappero7)
		capperi.addSubview(cappero7__root)
		viewsByName["Cappero/7__root"] = cappero7__root
		viewsByName["Cappero/7__xScale"] = cappero7__xScale
		viewsByName["Cappero/7__yScale"] = cappero7__yScale
		viewsByName["Cappero/7"] = cappero7

		let cappero8__root = PizzaAnimationPassthroughView()
		let cappero8__xScale = PizzaAnimationPassthroughView()
		let cappero8__yScale = PizzaAnimationPassthroughView()
		let cappero8 = UIImageView()
		let imgCappero3 = UIImage(named:"Cappero:3.png", in: bundle, compatibleWith: nil)
		if imgCappero3 == nil {
			print("** Warning: Could not create image from 'Cappero:3.png'")
		}
		cappero8.image = imgCappero3
		cappero8.contentMode = .center
		cappero8.bounds = CGRect(x:0, y:0, width:56.0, height:88.0)
		cappero8__root.layer.position = CGPoint(x:28.159, y:285.385)
		cappero8__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		cappero8__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		cappero8__root.transform = CGAffineTransform(rotationAngle: 0.000)
		capperi.addSubview(cappero8__root)
		cappero8__root.addSubview(cappero8__xScale)
		cappero8__xScale.addSubview(cappero8__yScale)
		cappero8__yScale.addSubview(cappero8)
		capperi.addSubview(cappero8__root)
		viewsByName["Cappero/8__root"] = cappero8__root
		viewsByName["Cappero/8__xScale"] = cappero8__xScale
		viewsByName["Cappero/8__yScale"] = cappero8__yScale
		viewsByName["Cappero/8"] = cappero8

		let oliveVerdi__root = PizzaAnimationPassthroughView()
		let oliveVerdi__xScale = PizzaAnimationPassthroughView()
		let oliveVerdi__yScale = PizzaAnimationPassthroughView()
		let oliveVerdi = UIView()
		oliveVerdi.bounds = CGRect(x:0, y:0, width:683.2, height:425.7)
		oliveVerdi__root.layer.position = CGPoint(x:54.684, y:28.882)
		oliveVerdi__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		oliveVerdi__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		oliveVerdi__root.transform = CGAffineTransform(rotationAngle: 0.003)
		pizza.addSubview(oliveVerdi__root)
		oliveVerdi__root.addSubview(oliveVerdi__xScale)
		oliveVerdi__xScale.addSubview(oliveVerdi__yScale)
		oliveVerdi__yScale.addSubview(oliveVerdi)
		pizza.addSubview(oliveVerdi__root)
		viewsByName["OliveVerdi__root"] = oliveVerdi__root
		viewsByName["OliveVerdi__xScale"] = oliveVerdi__xScale
		viewsByName["OliveVerdi__yScale"] = oliveVerdi__yScale
		viewsByName["OliveVerdi"] = oliveVerdi

		let olivaVerde1__root = PizzaAnimationPassthroughView()
		let olivaVerde1__xScale = PizzaAnimationPassthroughView()
		let olivaVerde1__yScale = PizzaAnimationPassthroughView()
		let olivaVerde1 = UIImageView()
		let imgOlivaVerde1 = UIImage(named:"Oliva:Verde:1.png", in: bundle, compatibleWith: nil)
		if imgOlivaVerde1 == nil {
			print("** Warning: Could not create image from 'Oliva:Verde:1.png'")
		}
		olivaVerde1.image = imgOlivaVerde1
		olivaVerde1.contentMode = .center
		olivaVerde1.bounds = CGRect(x:0, y:0, width:188.0, height:158.0)
		olivaVerde1__root.layer.position = CGPoint(x:18.800, y:274.556)
		olivaVerde1__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		olivaVerde1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		olivaVerde1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		oliveVerdi.addSubview(olivaVerde1__root)
		olivaVerde1__root.addSubview(olivaVerde1__xScale)
		olivaVerde1__xScale.addSubview(olivaVerde1__yScale)
		olivaVerde1__yScale.addSubview(olivaVerde1)
		oliveVerdi.addSubview(olivaVerde1__root)
		viewsByName["Oliva/Verde/1__root"] = olivaVerde1__root
		viewsByName["Oliva/Verde/1__xScale"] = olivaVerde1__xScale
		viewsByName["Oliva/Verde/1__yScale"] = olivaVerde1__yScale
		viewsByName["Oliva/Verde/1"] = olivaVerde1

		let olivaVerde2__root = PizzaAnimationPassthroughView()
		let olivaVerde2__xScale = PizzaAnimationPassthroughView()
		let olivaVerde2__yScale = PizzaAnimationPassthroughView()
		let olivaVerde2 = UIImageView()
		let imgOlivaVerde2 = UIImage(named:"Oliva:Verde:2.png", in: bundle, compatibleWith: nil)
		if imgOlivaVerde2 == nil {
			print("** Warning: Could not create image from 'Oliva:Verde:2.png'")
		}
		olivaVerde2.image = imgOlivaVerde2
		olivaVerde2.contentMode = .center
		olivaVerde2.bounds = CGRect(x:0, y:0, width:138.0, height:164.0)
		olivaVerde2__root.layer.position = CGPoint(x:53.296, y:148.380)
		olivaVerde2__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		olivaVerde2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		olivaVerde2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		oliveVerdi.addSubview(olivaVerde2__root)
		olivaVerde2__root.addSubview(olivaVerde2__xScale)
		olivaVerde2__xScale.addSubview(olivaVerde2__yScale)
		olivaVerde2__yScale.addSubview(olivaVerde2)
		oliveVerdi.addSubview(olivaVerde2__root)
		viewsByName["Oliva/Verde/2__root"] = olivaVerde2__root
		viewsByName["Oliva/Verde/2__xScale"] = olivaVerde2__xScale
		viewsByName["Oliva/Verde/2__yScale"] = olivaVerde2__yScale
		viewsByName["Oliva/Verde/2"] = olivaVerde2

		let olivaVerde6__root = PizzaAnimationPassthroughView()
		let olivaVerde6__xScale = PizzaAnimationPassthroughView()
		let olivaVerde6__yScale = PizzaAnimationPassthroughView()
		let olivaVerde6 = UIImageView()
		olivaVerde6.image = imgOlivaVerde2
		olivaVerde6.contentMode = .center
		olivaVerde6.bounds = CGRect(x:0, y:0, width:138.0, height:164.0)
		olivaVerde6__root.layer.position = CGPoint(x:634.288, y:16.400)
		olivaVerde6__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		olivaVerde6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		olivaVerde6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		oliveVerdi.addSubview(olivaVerde6__root)
		olivaVerde6__root.addSubview(olivaVerde6__xScale)
		olivaVerde6__xScale.addSubview(olivaVerde6__yScale)
		olivaVerde6__yScale.addSubview(olivaVerde6)
		oliveVerdi.addSubview(olivaVerde6__root)
		viewsByName["Oliva/Verde/6__root"] = olivaVerde6__root
		viewsByName["Oliva/Verde/6__xScale"] = olivaVerde6__xScale
		viewsByName["Oliva/Verde/6__yScale"] = olivaVerde6__yScale
		viewsByName["Oliva/Verde/6"] = olivaVerde6

		let olivaVerde7__root = PizzaAnimationPassthroughView()
		let olivaVerde7__xScale = PizzaAnimationPassthroughView()
		let olivaVerde7__yScale = PizzaAnimationPassthroughView()
		let olivaVerde7 = UIImageView()
		olivaVerde7.image = imgOlivaVerde2
		olivaVerde7.contentMode = .center
		olivaVerde7.bounds = CGRect(x:0, y:0, width:138.0, height:164.0)
		olivaVerde7__root.layer.position = CGPoint(x:643.550, y:322.275)
		olivaVerde7__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		olivaVerde7__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		olivaVerde7__root.transform = CGAffineTransform(rotationAngle: 0.000)
		oliveVerdi.addSubview(olivaVerde7__root)
		olivaVerde7__root.addSubview(olivaVerde7__xScale)
		olivaVerde7__xScale.addSubview(olivaVerde7__yScale)
		olivaVerde7__yScale.addSubview(olivaVerde7)
		oliveVerdi.addSubview(olivaVerde7__root)
		viewsByName["Oliva/Verde/7__root"] = olivaVerde7__root
		viewsByName["Oliva/Verde/7__xScale"] = olivaVerde7__xScale
		viewsByName["Oliva/Verde/7__yScale"] = olivaVerde7__yScale
		viewsByName["Oliva/Verde/7"] = olivaVerde7

		let olivaVerde3__root = PizzaAnimationPassthroughView()
		let olivaVerde3__xScale = PizzaAnimationPassthroughView()
		let olivaVerde3__yScale = PizzaAnimationPassthroughView()
		let olivaVerde3 = UIImageView()
		let imgOlivaVerde3 = UIImage(named:"Oliva:Verde:3.png", in: bundle, compatibleWith: nil)
		if imgOlivaVerde3 == nil {
			print("** Warning: Could not create image from 'Oliva:Verde:3.png'")
		}
		olivaVerde3.image = imgOlivaVerde3
		olivaVerde3.contentMode = .center
		olivaVerde3.bounds = CGRect(x:0, y:0, width:142.0, height:162.0)
		olivaVerde3__root.layer.position = CGPoint(x:49.991, y:63.123)
		olivaVerde3__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		olivaVerde3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		olivaVerde3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		oliveVerdi.addSubview(olivaVerde3__root)
		olivaVerde3__root.addSubview(olivaVerde3__xScale)
		olivaVerde3__xScale.addSubview(olivaVerde3__yScale)
		olivaVerde3__yScale.addSubview(olivaVerde3)
		oliveVerdi.addSubview(olivaVerde3__root)
		viewsByName["Oliva/Verde/3__root"] = olivaVerde3__root
		viewsByName["Oliva/Verde/3__xScale"] = olivaVerde3__xScale
		viewsByName["Oliva/Verde/3__yScale"] = olivaVerde3__yScale
		viewsByName["Oliva/Verde/3"] = olivaVerde3

		let olivaVerde9__root = PizzaAnimationPassthroughView()
		let olivaVerde9__xScale = PizzaAnimationPassthroughView()
		let olivaVerde9__yScale = PizzaAnimationPassthroughView()
		let olivaVerde9 = UIImageView()
		olivaVerde9.image = imgOlivaVerde3
		olivaVerde9.contentMode = .center
		olivaVerde9.bounds = CGRect(x:0, y:0, width:142.0, height:162.0)
		olivaVerde9__root.layer.position = CGPoint(x:669.030, y:228.059)
		olivaVerde9__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		olivaVerde9__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		olivaVerde9__root.transform = CGAffineTransform(rotationAngle: 0.000)
		oliveVerdi.addSubview(olivaVerde9__root)
		olivaVerde9__root.addSubview(olivaVerde9__xScale)
		olivaVerde9__xScale.addSubview(olivaVerde9__yScale)
		olivaVerde9__yScale.addSubview(olivaVerde9)
		oliveVerdi.addSubview(olivaVerde9__root)
		viewsByName["Oliva/Verde/9__root"] = olivaVerde9__root
		viewsByName["Oliva/Verde/9__xScale"] = olivaVerde9__xScale
		viewsByName["Oliva/Verde/9__yScale"] = olivaVerde9__yScale
		viewsByName["Oliva/Verde/9"] = olivaVerde9

		let basilico__root = PizzaAnimationPassthroughView()
		let basilico__xScale = PizzaAnimationPassthroughView()
		let basilico__yScale = PizzaAnimationPassthroughView()
		let basilico = UIView()
		basilico.bounds = CGRect(x:0, y:0, width:711.9, height:266.8)
		basilico__root.layer.position = CGPoint(x:54.074, y:48.089)
		basilico__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		basilico__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		basilico__root.transform = CGAffineTransform(rotationAngle: 0.000)
		pizza.addSubview(basilico__root)
		basilico__root.addSubview(basilico__xScale)
		basilico__xScale.addSubview(basilico__yScale)
		basilico__yScale.addSubview(basilico)
		pizza.addSubview(basilico__root)
		viewsByName["Basilico__root"] = basilico__root
		viewsByName["Basilico__xScale"] = basilico__xScale
		viewsByName["Basilico__yScale"] = basilico__yScale
		viewsByName["Basilico"] = basilico

		let basilico4__root = PizzaAnimationPassthroughView()
		let basilico4__xScale = PizzaAnimationPassthroughView()
		let basilico4__yScale = PizzaAnimationPassthroughView()
		let basilico4 = UIImageView()
		let imgBasil3 = UIImage(named:"Basilico.png", in: bundle, compatibleWith: nil)
		if imgBasil3 == nil {
			print("** Warning: Could not create image from 'Basil_3.png'")
		}
		basilico4.image = imgBasil3
		basilico4.contentMode = .center
		basilico4.bounds = CGRect(x:0, y:0, width:65.0, height:92.0)
		basilico4__root.layer.position = CGPoint(x:27.996, y:68.311)
		basilico4__xScale.transform = CGAffineTransform(scaleX: 0.70, y: 1.00)
		basilico4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.70)
		basilico4__root.transform = CGAffineTransform(rotationAngle: 0.175)
		basilico.addSubview(basilico4__root)
		basilico4__root.addSubview(basilico4__xScale)
		basilico4__xScale.addSubview(basilico4__yScale)
		basilico4__yScale.addSubview(basilico4)
		basilico.addSubview(basilico4__root)
		viewsByName["Basilico/4__root"] = basilico4__root
		viewsByName["Basilico/4__xScale"] = basilico4__xScale
		viewsByName["Basilico/4__yScale"] = basilico4__yScale
		viewsByName["Basilico/4"] = basilico4

		let basilico2__root = PizzaAnimationPassthroughView()
		let basilico2__xScale = PizzaAnimationPassthroughView()
		let basilico2__yScale = PizzaAnimationPassthroughView()
		let basilico2 = UIImageView()
		let imgBasil1 = UIImage(named:"Basilico.png", in: bundle, compatibleWith: nil)
		if imgBasil1 == nil {
			print("** Warning: Could not create image from 'Basil_1.png'")
		}
		basilico2.image = imgBasil1
		basilico2.contentMode = .center
		basilico2.bounds = CGRect(x:0, y:0, width:65.0, height:92.0)
		basilico2__root.layer.position = CGPoint(x:679.516, y:183.639)
		basilico2__xScale.transform = CGAffineTransform(scaleX: 0.70, y: 1.00)
		basilico2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.70)
		basilico2__root.transform = CGAffineTransform(rotationAngle: 5.934)
		basilico.addSubview(basilico2__root)
		basilico2__root.addSubview(basilico2__xScale)
		basilico2__xScale.addSubview(basilico2__yScale)
		basilico2__yScale.addSubview(basilico2)
		basilico.addSubview(basilico2__root)
		viewsByName["Basilico/2__root"] = basilico2__root
		viewsByName["Basilico/2__xScale"] = basilico2__xScale
		viewsByName["Basilico/2__yScale"] = basilico2__yScale
		viewsByName["Basilico/2"] = basilico2

		let prosciuttoCotto__root = PizzaAnimationPassthroughView()
		let prosciuttoCotto__xScale = PizzaAnimationPassthroughView()
		let prosciuttoCotto__yScale = PizzaAnimationPassthroughView()
		let prosciuttoCotto = UIView()
		prosciuttoCotto.bounds = CGRect(x:0, y:0, width:761.4, height:367.7)
		prosciuttoCotto__root.layer.position = CGPoint(x:69.831, y:19.305)
		prosciuttoCotto__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		prosciuttoCotto__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		prosciuttoCotto__root.transform = CGAffineTransform(rotationAngle: 0.003)
		pizza.addSubview(prosciuttoCotto__root)
		prosciuttoCotto__root.addSubview(prosciuttoCotto__xScale)
		prosciuttoCotto__xScale.addSubview(prosciuttoCotto__yScale)
		prosciuttoCotto__yScale.addSubview(prosciuttoCotto)
		pizza.addSubview(prosciuttoCotto__root)
		viewsByName["ProsciuttoCotto__root"] = prosciuttoCotto__root
		viewsByName["ProsciuttoCotto__xScale"] = prosciuttoCotto__xScale
		viewsByName["ProsciuttoCotto__yScale"] = prosciuttoCotto__yScale
		viewsByName["ProsciuttoCotto"] = prosciuttoCotto

		let cotto1__root = PizzaAnimationPassthroughView()
		let cotto1__xScale = PizzaAnimationPassthroughView()
		let cotto1__yScale = PizzaAnimationPassthroughView()
		let cotto1 = UIImageView()
		let imgCotto1 = UIImage(named:"Prosciutto:Cotto:1.png", in: bundle, compatibleWith: nil)
		if imgCotto1 == nil {
			print("** Warning: Could not create image from 'Cotto:1.png'")
		}
		cotto1.image = imgCotto1
		cotto1.contentMode = .center
		cotto1.bounds = CGRect(x:0, y:0, width:482.0, height:310.0)
		cotto1__root.layer.position = CGPoint(x:48.200, y:319.379)
		cotto1__xScale.transform = CGAffineTransform(scaleX: 0.15, y: 1.00)
		cotto1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.15)
		cotto1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		prosciuttoCotto.addSubview(cotto1__root)
		cotto1__root.addSubview(cotto1__xScale)
		cotto1__xScale.addSubview(cotto1__yScale)
		cotto1__yScale.addSubview(cotto1)
		prosciuttoCotto.addSubview(cotto1__root)
		viewsByName["Cotto/1__root"] = cotto1__root
		viewsByName["Cotto/1__xScale"] = cotto1__xScale
		viewsByName["Cotto/1__yScale"] = cotto1__yScale
		viewsByName["Cotto/1"] = cotto1

		let cotto2__root = PizzaAnimationPassthroughView()
		let cotto2__xScale = PizzaAnimationPassthroughView()
		let cotto2__yScale = PizzaAnimationPassthroughView()
		let cotto2 = UIImageView()
		let imgCotto2 = UIImage(named:"Prosciutto:Cotto:2.png", in: bundle, compatibleWith: nil)
		if imgCotto2 == nil {
			print("** Warning: Could not create image from 'Cotto:2.png'")
		}
		cotto2.image = imgCotto2
		cotto2.contentMode = .center
		cotto2.bounds = CGRect(x:0, y:0, width:424.0, height:244.0)
		cotto2__root.layer.position = CGPoint(x:54.458, y:181.074)
		cotto2__xScale.transform = CGAffineTransform(scaleX: 0.15, y: 1.00)
		cotto2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.15)
		cotto2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		prosciuttoCotto.addSubview(cotto2__root)
		cotto2__root.addSubview(cotto2__xScale)
		cotto2__xScale.addSubview(cotto2__yScale)
		cotto2__yScale.addSubview(cotto2)
		prosciuttoCotto.addSubview(cotto2__root)
		viewsByName["Cotto/2__root"] = cotto2__root
		viewsByName["Cotto/2__xScale"] = cotto2__xScale
		viewsByName["Cotto/2__yScale"] = cotto2__yScale
		viewsByName["Cotto/2"] = cotto2

		let cotto6__root = PizzaAnimationPassthroughView()
		let cotto6__xScale = PizzaAnimationPassthroughView()
		let cotto6__yScale = PizzaAnimationPassthroughView()
		let cotto6 = UIImageView()
		cotto6.image = imgCotto2
		cotto6.contentMode = .center
		cotto6.bounds = CGRect(x:0, y:0, width:424.0, height:244.0)
		cotto6__root.layer.position = CGPoint(x:719.048, y:343.277)
		cotto6__xScale.transform = CGAffineTransform(scaleX: 0.15, y: 1.00)
		cotto6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.15)
		cotto6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		prosciuttoCotto.addSubview(cotto6__root)
		cotto6__root.addSubview(cotto6__xScale)
		cotto6__xScale.addSubview(cotto6__yScale)
		cotto6__yScale.addSubview(cotto6)
		prosciuttoCotto.addSubview(cotto6__root)
		viewsByName["Cotto/6__root"] = cotto6__root
		viewsByName["Cotto/6__xScale"] = cotto6__xScale
		viewsByName["Cotto/6__yScale"] = cotto6__yScale
		viewsByName["Cotto/6"] = cotto6

		let cotto8__root = PizzaAnimationPassthroughView()
		let cotto8__xScale = PizzaAnimationPassthroughView()
		let cotto8__yScale = PizzaAnimationPassthroughView()
		let cotto8 = UIImageView()
		cotto8.image = imgCotto2
		cotto8.contentMode = .center
		cotto8.bounds = CGRect(x:0, y:0, width:424.0, height:244.0)
		cotto8__root.layer.position = CGPoint(x:755.122, y:98.355)
		cotto8__xScale.transform = CGAffineTransform(scaleX: 0.15, y: 1.00)
		cotto8__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.15)
		cotto8__root.transform = CGAffineTransform(rotationAngle: 0.000)
		prosciuttoCotto.addSubview(cotto8__root)
		cotto8__root.addSubview(cotto8__xScale)
		cotto8__xScale.addSubview(cotto8__yScale)
		cotto8__yScale.addSubview(cotto8)
		prosciuttoCotto.addSubview(cotto8__root)
		viewsByName["Cotto/8__root"] = cotto8__root
		viewsByName["Cotto/8__xScale"] = cotto8__xScale
		viewsByName["Cotto/8__yScale"] = cotto8__yScale
		viewsByName["Cotto/8"] = cotto8

		let cotto3__root = PizzaAnimationPassthroughView()
		let cotto3__xScale = PizzaAnimationPassthroughView()
		let cotto3__yScale = PizzaAnimationPassthroughView()
		let cotto3 = UIImageView()
		let imgCotto3 = UIImage(named:"Prosciutto:Cotto:3.png", in: bundle, compatibleWith: nil)
		if imgCotto3 == nil {
			print("** Warning: Could not create image from 'Cotto:3.png'")
		}
		cotto3.image = imgCotto3
		cotto3.contentMode = .center
		cotto3.bounds = CGRect(x:0, y:0, width:448.0, height:256.0)
		cotto3__root.layer.position = CGPoint(x:58.059, y:44.465)
		cotto3__xScale.transform = CGAffineTransform(scaleX: 0.15, y: 1.00)
		cotto3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.15)
		cotto3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		prosciuttoCotto.addSubview(cotto3__root)
		cotto3__root.addSubview(cotto3__xScale)
		cotto3__xScale.addSubview(cotto3__yScale)
		cotto3__yScale.addSubview(cotto3)
		prosciuttoCotto.addSubview(cotto3__root)
		viewsByName["Cotto/3__root"] = cotto3__root
		viewsByName["Cotto/3__xScale"] = cotto3__xScale
		viewsByName["Cotto/3__yScale"] = cotto3__yScale
		viewsByName["Cotto/3"] = cotto3

		let cotto4__root = PizzaAnimationPassthroughView()
		let cotto4__xScale = PizzaAnimationPassthroughView()
		let cotto4__yScale = PizzaAnimationPassthroughView()
		let cotto4 = UIImageView()
		cotto4.image = imgCotto3
		cotto4.contentMode = .center
		cotto4.bounds = CGRect(x:0, y:0, width:448.0, height:256.0)
		cotto4__root.layer.position = CGPoint(x:707.235, y:199.259)
		cotto4__xScale.transform = CGAffineTransform(scaleX: 0.15, y: 1.00)
		cotto4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.15)
		cotto4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		prosciuttoCotto.addSubview(cotto4__root)
		cotto4__root.addSubview(cotto4__xScale)
		cotto4__xScale.addSubview(cotto4__yScale)
		cotto4__yScale.addSubview(cotto4)
		prosciuttoCotto.addSubview(cotto4__root)
		viewsByName["Cotto/4__root"] = cotto4__root
		viewsByName["Cotto/4__xScale"] = cotto4__xScale
		viewsByName["Cotto/4__yScale"] = cotto4__yScale
		viewsByName["Cotto/4"] = cotto4

		let mais__root = PizzaAnimationPassthroughView()
		let mais__xScale = PizzaAnimationPassthroughView()
		let mais__yScale = PizzaAnimationPassthroughView()
		let mais = UIView()
		mais.bounds = CGRect(x:0, y:0, width:122.8, height:122.2)
		mais__root.layer.position = CGPoint(x:55.264, y:65.204)
		mais__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mais__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mais__root.transform = CGAffineTransform(rotationAngle: 0.003)
		pizza.addSubview(mais__root)
		mais__root.addSubview(mais__xScale)
		mais__xScale.addSubview(mais__yScale)
		mais__yScale.addSubview(mais)
		pizza.addSubview(mais__root)
		viewsByName["Mais__root"] = mais__root
		viewsByName["Mais__xScale"] = mais__xScale
		viewsByName["Mais__yScale"] = mais__yScale
		viewsByName["Mais"] = mais

		let mais122__root = PizzaAnimationPassthroughView()
		let mais122__xScale = PizzaAnimationPassthroughView()
		let mais122__yScale = PizzaAnimationPassthroughView()
		let mais122 = UIView()
		mais122.bounds = CGRect(x:0, y:0, width:89.7, height:83.9)
		mais122__root.layer.position = CGPoint(x:65.712, y:56.180)
		mais122__root.alpha = 0.00
		mais122__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mais122__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mais122__root.transform = CGAffineTransform(rotationAngle: 4.719)
		mais.addSubview(mais122__root)
		mais122__root.addSubview(mais122__xScale)
		mais122__xScale.addSubview(mais122__yScale)
		mais122__yScale.addSubview(mais122)
		mais.addSubview(mais122__root)
		viewsByName["Mais//1__root"] = mais122__root
		viewsByName["Mais//1__xScale"] = mais122__xScale
		viewsByName["Mais//1__yScale"] = mais122__yScale
		viewsByName["Mais//1"] = mais122

		let mais1__root = PizzaAnimationPassthroughView()
		let mais1__xScale = PizzaAnimationPassthroughView()
		let mais1__yScale = PizzaAnimationPassthroughView()
		let mais1 = UIImageView()
		let imgMais = UIImage(named:"Mais.png", in: bundle, compatibleWith: nil)
		if imgMais == nil {
			print("** Warning: Could not create image from 'Mais.png'")
		}
		mais1.image = imgMais
		mais1.contentMode = .center
		mais1.layer.anchorPoint = CGPoint(x:-0.059, y:-1.524)
		mais1.bounds = CGRect(x:0, y:0, width:68.0, height:86.0)
		mais1__root.layer.position = CGPoint(x:7.072, y:-0.329)
		mais1__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		mais1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		mais1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mais122.addSubview(mais1__root)
		mais1__root.addSubview(mais1__xScale)
		mais1__xScale.addSubview(mais1__yScale)
		mais1__yScale.addSubview(mais1)
		mais122.addSubview(mais1__root)
		viewsByName["Mais/1__root"] = mais1__root
		viewsByName["Mais/1__xScale"] = mais1__xScale
		viewsByName["Mais/1__yScale"] = mais1__yScale
		viewsByName["Mais/1"] = mais1

		let mais2__root = PizzaAnimationPassthroughView()
		let mais2__xScale = PizzaAnimationPassthroughView()
		let mais2__yScale = PizzaAnimationPassthroughView()
		let mais2 = UIImageView()
		mais2.image = imgMais
		mais2.contentMode = .center
		mais2.layer.anchorPoint = CGPoint(x:-0.059, y:-1.524)
		mais2.bounds = CGRect(x:0, y:0, width:68.0, height:86.0)
		mais2__root.layer.position = CGPoint(x:31.171, y:-10.575)
		mais2__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		mais2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		mais2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mais122.addSubview(mais2__root)
		mais2__root.addSubview(mais2__xScale)
		mais2__xScale.addSubview(mais2__yScale)
		mais2__yScale.addSubview(mais2)
		mais122.addSubview(mais2__root)
		viewsByName["Mais/2__root"] = mais2__root
		viewsByName["Mais/2__xScale"] = mais2__xScale
		viewsByName["Mais/2__yScale"] = mais2__yScale
		viewsByName["Mais/2"] = mais2

		let mais3__root = PizzaAnimationPassthroughView()
		let mais3__xScale = PizzaAnimationPassthroughView()
		let mais3__yScale = PizzaAnimationPassthroughView()
		let mais3 = UIImageView()
		mais3.image = imgMais
		mais3.contentMode = .center
		mais3.layer.anchorPoint = CGPoint(x:-0.059, y:-1.524)
		mais3.bounds = CGRect(x:0, y:0, width:68.0, height:86.0)
		mais3__root.layer.position = CGPoint(x:62.696, y:-13.104)
		mais3__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		mais3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		mais3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mais122.addSubview(mais3__root)
		mais3__root.addSubview(mais3__xScale)
		mais3__xScale.addSubview(mais3__yScale)
		mais3__yScale.addSubview(mais3)
		mais122.addSubview(mais3__root)
		viewsByName["Mais/3__root"] = mais3__root
		viewsByName["Mais/3__xScale"] = mais3__xScale
		viewsByName["Mais/3__yScale"] = mais3__yScale
		viewsByName["Mais/3"] = mais3

		let mais4__root = PizzaAnimationPassthroughView()
		let mais4__xScale = PizzaAnimationPassthroughView()
		let mais4__yScale = PizzaAnimationPassthroughView()
		let mais4 = UIImageView()
		mais4.image = imgMais
		mais4.contentMode = .center
		mais4.layer.anchorPoint = CGPoint(x:-0.059, y:-1.524)
		mais4.bounds = CGRect(x:0, y:0, width:68.0, height:86.0)
		mais4__root.layer.position = CGPoint(x:80.667, y:9.177)
		mais4__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		mais4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		mais4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mais122.addSubview(mais4__root)
		mais4__root.addSubview(mais4__xScale)
		mais4__xScale.addSubview(mais4__yScale)
		mais4__yScale.addSubview(mais4)
		mais122.addSubview(mais4__root)
		viewsByName["Mais/4__root"] = mais4__root
		viewsByName["Mais/4__xScale"] = mais4__xScale
		viewsByName["Mais/4__yScale"] = mais4__yScale
		viewsByName["Mais/4"] = mais4

		let mais5__root = PizzaAnimationPassthroughView()
		let mais5__xScale = PizzaAnimationPassthroughView()
		let mais5__yScale = PizzaAnimationPassthroughView()
		let mais5 = UIImageView()
		mais5.image = imgMais
		mais5.contentMode = .center
		mais5.layer.anchorPoint = CGPoint(x:-0.059, y:-1.524)
		mais5.bounds = CGRect(x:0, y:0, width:68.0, height:86.0)
		mais5__root.layer.position = CGPoint(x:53.978, y:9.453)
		mais5__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		mais5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		mais5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mais122.addSubview(mais5__root)
		mais5__root.addSubview(mais5__xScale)
		mais5__xScale.addSubview(mais5__yScale)
		mais5__yScale.addSubview(mais5)
		mais122.addSubview(mais5__root)
		viewsByName["Mais/5__root"] = mais5__root
		viewsByName["Mais/5__xScale"] = mais5__xScale
		viewsByName["Mais/5__yScale"] = mais5__yScale
		viewsByName["Mais/5"] = mais5

		let mais6__root = PizzaAnimationPassthroughView()
		let mais6__xScale = PizzaAnimationPassthroughView()
		let mais6__yScale = PizzaAnimationPassthroughView()
		let mais6 = UIImageView()
		mais6.image = imgMais
		mais6.contentMode = .center
		mais6.layer.anchorPoint = CGPoint(x:-0.059, y:-1.524)
		mais6.bounds = CGRect(x:0, y:0, width:68.0, height:86.0)
		mais6__root.layer.position = CGPoint(x:22.144, y:14.160)
		mais6__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		mais6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		mais6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mais122.addSubview(mais6__root)
		mais6__root.addSubview(mais6__xScale)
		mais6__xScale.addSubview(mais6__yScale)
		mais6__yScale.addSubview(mais6)
		mais122.addSubview(mais6__root)
		viewsByName["Mais/6__root"] = mais6__root
		viewsByName["Mais/6__xScale"] = mais6__xScale
		viewsByName["Mais/6__yScale"] = mais6__yScale
		viewsByName["Mais/6"] = mais6

		let mais7__root = PizzaAnimationPassthroughView()
		let mais7__xScale = PizzaAnimationPassthroughView()
		let mais7__yScale = PizzaAnimationPassthroughView()
		let mais7 = UIImageView()
		mais7.image = imgMais
		mais7.contentMode = .center
		mais7.layer.anchorPoint = CGPoint(x:-0.059, y:-1.524)
		mais7.bounds = CGRect(x:0, y:0, width:68.0, height:86.0)
		mais7__root.layer.position = CGPoint(x:-0.401, y:28.827)
		mais7__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		mais7__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		mais7__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mais122.addSubview(mais7__root)
		mais7__root.addSubview(mais7__xScale)
		mais7__xScale.addSubview(mais7__yScale)
		mais7__yScale.addSubview(mais7)
		mais122.addSubview(mais7__root)
		viewsByName["Mais/7__root"] = mais7__root
		viewsByName["Mais/7__xScale"] = mais7__xScale
		viewsByName["Mais/7__yScale"] = mais7__yScale
		viewsByName["Mais/7"] = mais7

		let mais8__root = PizzaAnimationPassthroughView()
		let mais8__xScale = PizzaAnimationPassthroughView()
		let mais8__yScale = PizzaAnimationPassthroughView()
		let mais8 = UIImageView()
		mais8.image = imgMais
		mais8.contentMode = .center
		mais8.layer.anchorPoint = CGPoint(x:-0.059, y:-1.524)
		mais8.bounds = CGRect(x:0, y:0, width:68.0, height:86.0)
		mais8__root.layer.position = CGPoint(x:5.409, y:47.993)
		mais8__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		mais8__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		mais8__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mais122.addSubview(mais8__root)
		mais8__root.addSubview(mais8__xScale)
		mais8__xScale.addSubview(mais8__yScale)
		mais8__yScale.addSubview(mais8)
		mais122.addSubview(mais8__root)
		viewsByName["Mais/8__root"] = mais8__root
		viewsByName["Mais/8__xScale"] = mais8__xScale
		viewsByName["Mais/8__yScale"] = mais8__yScale
		viewsByName["Mais/8"] = mais8

		let mais9__root = PizzaAnimationPassthroughView()
		let mais9__xScale = PizzaAnimationPassthroughView()
		let mais9__yScale = PizzaAnimationPassthroughView()
		let mais9 = UIImageView()
		mais9.image = imgMais
		mais9.contentMode = .center
		mais9.layer.anchorPoint = CGPoint(x:-0.059, y:-1.524)
		mais9.bounds = CGRect(x:0, y:0, width:68.0, height:86.0)
		mais9__root.layer.position = CGPoint(x:23.881, y:33.912)
		mais9__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		mais9__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		mais9__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mais122.addSubview(mais9__root)
		mais9__root.addSubview(mais9__xScale)
		mais9__xScale.addSubview(mais9__yScale)
		mais9__yScale.addSubview(mais9)
		mais122.addSubview(mais9__root)
		viewsByName["Mais/9__root"] = mais9__root
		viewsByName["Mais/9__xScale"] = mais9__xScale
		viewsByName["Mais/9__yScale"] = mais9__yScale
		viewsByName["Mais/9"] = mais9

		let mais10__root = PizzaAnimationPassthroughView()
		let mais10__xScale = PizzaAnimationPassthroughView()
		let mais10__yScale = PizzaAnimationPassthroughView()
		let mais10 = UIImageView()
		mais10.image = imgMais
		mais10.contentMode = .center
		mais10.layer.anchorPoint = CGPoint(x:-0.059, y:-1.524)
		mais10.bounds = CGRect(x:0, y:0, width:68.0, height:86.0)
		mais10__root.layer.position = CGPoint(x:22.690, y:62.232)
		mais10__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		mais10__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		mais10__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mais122.addSubview(mais10__root)
		mais10__root.addSubview(mais10__xScale)
		mais10__xScale.addSubview(mais10__yScale)
		mais10__yScale.addSubview(mais10)
		mais122.addSubview(mais10__root)
		viewsByName["Mais/10__root"] = mais10__root
		viewsByName["Mais/10__xScale"] = mais10__xScale
		viewsByName["Mais/10__yScale"] = mais10__yScale
		viewsByName["Mais/10"] = mais10

		let mais11__root = PizzaAnimationPassthroughView()
		let mais11__xScale = PizzaAnimationPassthroughView()
		let mais11__yScale = PizzaAnimationPassthroughView()
		let mais11 = UIImageView()
		mais11.image = imgMais
		mais11.contentMode = .center
		mais11.layer.anchorPoint = CGPoint(x:-0.059, y:-1.524)
		mais11.bounds = CGRect(x:0, y:0, width:68.0, height:86.0)
		mais11__root.layer.position = CGPoint(x:45.642, y:34.401)
		mais11__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		mais11__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		mais11__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mais122.addSubview(mais11__root)
		mais11__root.addSubview(mais11__xScale)
		mais11__xScale.addSubview(mais11__yScale)
		mais11__yScale.addSubview(mais11)
		mais122.addSubview(mais11__root)
		viewsByName["Mais/11__root"] = mais11__root
		viewsByName["Mais/11__xScale"] = mais11__xScale
		viewsByName["Mais/11__yScale"] = mais11__yScale
		viewsByName["Mais/11"] = mais11

		let mais12__root = PizzaAnimationPassthroughView()
		let mais12__xScale = PizzaAnimationPassthroughView()
		let mais12__yScale = PizzaAnimationPassthroughView()
		let mais12 = UIImageView()
		mais12.image = imgMais
		mais12.contentMode = .center
		mais12.layer.anchorPoint = CGPoint(x:-0.059, y:-1.524)
		mais12.bounds = CGRect(x:0, y:0, width:68.0, height:86.0)
		mais12__root.layer.position = CGPoint(x:49.042, y:58.482)
		mais12__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		mais12__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		mais12__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mais122.addSubview(mais12__root)
		mais12__root.addSubview(mais12__xScale)
		mais12__xScale.addSubview(mais12__yScale)
		mais12__yScale.addSubview(mais12)
		mais122.addSubview(mais12__root)
		viewsByName["Mais/12__root"] = mais12__root
		viewsByName["Mais/12__xScale"] = mais12__xScale
		viewsByName["Mais/12__yScale"] = mais12__yScale
		viewsByName["Mais/12"] = mais12

		let mais13__root = PizzaAnimationPassthroughView()
		let mais13__xScale = PizzaAnimationPassthroughView()
		let mais13__yScale = PizzaAnimationPassthroughView()
		let mais13 = UIImageView()
		mais13.image = imgMais
		mais13.contentMode = .center
		mais13.layer.anchorPoint = CGPoint(x:-0.059, y:-1.524)
		mais13.bounds = CGRect(x:0, y:0, width:68.0, height:86.0)
		mais13__root.layer.position = CGPoint(x:76.710, y:24.527)
		mais13__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		mais13__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		mais13__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mais122.addSubview(mais13__root)
		mais13__root.addSubview(mais13__xScale)
		mais13__xScale.addSubview(mais13__yScale)
		mais13__yScale.addSubview(mais13)
		mais122.addSubview(mais13__root)
		viewsByName["Mais/13__root"] = mais13__root
		viewsByName["Mais/13__xScale"] = mais13__xScale
		viewsByName["Mais/13__yScale"] = mais13__yScale
		viewsByName["Mais/13"] = mais13

		let mais14__root = PizzaAnimationPassthroughView()
		let mais14__xScale = PizzaAnimationPassthroughView()
		let mais14__yScale = PizzaAnimationPassthroughView()
		let mais14 = UIImageView()
		mais14.image = imgMais
		mais14.contentMode = .center
		mais14.layer.anchorPoint = CGPoint(x:-0.059, y:-1.524)
		mais14.bounds = CGRect(x:0, y:0, width:68.0, height:86.0)
		mais14__root.layer.position = CGPoint(x:66.581, y:39.746)
		mais14__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		mais14__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		mais14__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mais122.addSubview(mais14__root)
		mais14__root.addSubview(mais14__xScale)
		mais14__xScale.addSubview(mais14__yScale)
		mais14__yScale.addSubview(mais14)
		mais122.addSubview(mais14__root)
		viewsByName["Mais/14__root"] = mais14__root
		viewsByName["Mais/14__xScale"] = mais14__xScale
		viewsByName["Mais/14__yScale"] = mais14__yScale
		viewsByName["Mais/14"] = mais14

		let mais15__root = PizzaAnimationPassthroughView()
		let mais15__xScale = PizzaAnimationPassthroughView()
		let mais15__yScale = PizzaAnimationPassthroughView()
		let mais15 = UIImageView()
		mais15.image = imgMais
		mais15.contentMode = .center
		mais15.layer.anchorPoint = CGPoint(x:-0.059, y:-1.524)
		mais15.bounds = CGRect(x:0, y:0, width:68.0, height:86.0)
		mais15__root.layer.position = CGPoint(x:82.528, y:55.637)
		mais15__xScale.transform = CGAffineTransform(scaleX: 0.10, y: 1.00)
		mais15__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.10)
		mais15__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mais122.addSubview(mais15__root)
		mais15__root.addSubview(mais15__xScale)
		mais15__xScale.addSubview(mais15__yScale)
		mais15__yScale.addSubview(mais15)
		mais122.addSubview(mais15__root)
		viewsByName["Mais/15__root"] = mais15__root
		viewsByName["Mais/15__xScale"] = mais15__xScale
		viewsByName["Mais/15__yScale"] = mais15__yScale
		viewsByName["Mais/15"] = mais15

		let carciofini__root = PizzaAnimationPassthroughView()
		let carciofini__xScale = PizzaAnimationPassthroughView()
		let carciofini__yScale = PizzaAnimationPassthroughView()
		let carciofini = UIView()
		carciofini.bounds = CGRect(x:0, y:0, width:686.9, height:448.6)
		carciofini__root.layer.position = CGPoint(x:148.009, y:-98.292)
		carciofini__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		carciofini__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		carciofini__root.transform = CGAffineTransform(rotationAngle: 0.000)
		pizza.addSubview(carciofini__root)
		carciofini__root.addSubview(carciofini__xScale)
		carciofini__xScale.addSubview(carciofini__yScale)
		carciofini__yScale.addSubview(carciofini)
		pizza.addSubview(carciofini__root)
		viewsByName["Carciofini__root"] = carciofini__root
		viewsByName["Carciofini__xScale"] = carciofini__xScale
		viewsByName["Carciofini__yScale"] = carciofini__yScale
		viewsByName["Carciofini"] = carciofini

		let carciofino1__root = PizzaAnimationPassthroughView()
		let carciofino1__xScale = PizzaAnimationPassthroughView()
		let carciofino1__yScale = PizzaAnimationPassthroughView()
		let carciofino1 = UIImageView()
		let imgCarciofino = UIImage(named:"Carciofino.png", in: bundle, compatibleWith: nil)
		if imgCarciofino == nil {
			print("** Warning: Could not create image from 'Carciofino.png'")
		}
		carciofino1.image = imgCarciofino
		carciofino1.contentMode = .center
		carciofino1.bounds = CGRect(x:0, y:0, width:160.0, height:276.0)
		carciofino1__root.layer.position = CGPoint(x:-49.410, y:203.113)
		carciofino1__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		carciofino1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		carciofino1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		carciofini.addSubview(carciofino1__root)
		carciofino1__root.addSubview(carciofino1__xScale)
		carciofino1__xScale.addSubview(carciofino1__yScale)
		carciofino1__yScale.addSubview(carciofino1)
		carciofini.addSubview(carciofino1__root)
		viewsByName["Carciofino/1__root"] = carciofino1__root
		viewsByName["Carciofino/1__xScale"] = carciofino1__xScale
		viewsByName["Carciofino/1__yScale"] = carciofino1__yScale
		viewsByName["Carciofino/1"] = carciofino1

		let carciofino2__root = PizzaAnimationPassthroughView()
		let carciofino2__xScale = PizzaAnimationPassthroughView()
		let carciofino2__yScale = PizzaAnimationPassthroughView()
		let carciofino2 = UIImageView()
		carciofino2.image = imgCarciofino
		carciofino2.contentMode = .center
		carciofino2.bounds = CGRect(x:0, y:0, width:160.0, height:276.0)
		carciofino2__root.layer.position = CGPoint(x:-44.191, y:278.613)
		carciofino2__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		carciofino2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		carciofino2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		carciofini.addSubview(carciofino2__root)
		carciofino2__root.addSubview(carciofino2__xScale)
		carciofino2__xScale.addSubview(carciofino2__yScale)
		carciofino2__yScale.addSubview(carciofino2)
		carciofini.addSubview(carciofino2__root)
		viewsByName["Carciofino/2__root"] = carciofino2__root
		viewsByName["Carciofino/2__xScale"] = carciofino2__xScale
		viewsByName["Carciofino/2__yScale"] = carciofino2__yScale
		viewsByName["Carciofino/2"] = carciofino2

		let carciofino4__root = PizzaAnimationPassthroughView()
		let carciofino4__xScale = PizzaAnimationPassthroughView()
		let carciofino4__yScale = PizzaAnimationPassthroughView()
		let carciofino4 = UIImageView()
		carciofino4.image = imgCarciofino
		carciofino4.contentMode = .center
		carciofino4.bounds = CGRect(x:0, y:0, width:160.0, height:276.0)
		carciofino4__root.layer.position = CGPoint(x:-53.117, y:526.413)
		carciofino4__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		carciofino4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		carciofino4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		carciofini.addSubview(carciofino4__root)
		carciofino4__root.addSubview(carciofino4__xScale)
		carciofino4__xScale.addSubview(carciofino4__yScale)
		carciofino4__yScale.addSubview(carciofino4)
		carciofini.addSubview(carciofino4__root)
		viewsByName["Carciofino/4__root"] = carciofino4__root
		viewsByName["Carciofino/4__xScale"] = carciofino4__xScale
		viewsByName["Carciofino/4__yScale"] = carciofino4__yScale
		viewsByName["Carciofino/4"] = carciofino4

		let carciofino5__root = PizzaAnimationPassthroughView()
		let carciofino5__xScale = PizzaAnimationPassthroughView()
		let carciofino5__yScale = PizzaAnimationPassthroughView()
		let carciofino5 = UIImageView()
		carciofino5.image = imgCarciofino
		carciofino5.contentMode = .center
		carciofino5.bounds = CGRect(x:0, y:0, width:160.0, height:276.0)
		carciofino5__root.layer.position = CGPoint(x:539.953, y:158.569)
		carciofino5__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		carciofino5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		carciofino5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		carciofini.addSubview(carciofino5__root)
		carciofino5__root.addSubview(carciofino5__xScale)
		carciofino5__xScale.addSubview(carciofino5__yScale)
		carciofino5__yScale.addSubview(carciofino5)
		carciofini.addSubview(carciofino5__root)
		viewsByName["Carciofino/5__root"] = carciofino5__root
		viewsByName["Carciofino/5__xScale"] = carciofino5__xScale
		viewsByName["Carciofino/5__yScale"] = carciofino5__yScale
		viewsByName["Carciofino/5"] = carciofino5

		let carciofino8__root = PizzaAnimationPassthroughView()
		let carciofino8__xScale = PizzaAnimationPassthroughView()
		let carciofino8__yScale = PizzaAnimationPassthroughView()
		let carciofino8 = UIImageView()
		carciofino8.image = imgCarciofino
		carciofino8.contentMode = .center
		carciofino8.layer.anchorPoint = CGPoint(x:0.651, y:0.617)
		carciofino8.bounds = CGRect(x:0, y:0, width:160.0, height:276.0)
		carciofino8__root.layer.position = CGPoint(x:565.301, y:469.570)
		carciofino8__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		carciofino8__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		carciofino8__root.transform = CGAffineTransform(rotationAngle: 0.000)
		carciofini.addSubview(carciofino8__root)
		carciofino8__root.addSubview(carciofino8__xScale)
		carciofino8__xScale.addSubview(carciofino8__yScale)
		carciofino8__yScale.addSubview(carciofino8)
		carciofini.addSubview(carciofino8__root)
		viewsByName["Carciofino/8__root"] = carciofino8__root
		viewsByName["Carciofino/8__xScale"] = carciofino8__xScale
		viewsByName["Carciofino/8__yScale"] = carciofino8__yScale
		viewsByName["Carciofino/8"] = carciofino8

		let carciofino9__root = PizzaAnimationPassthroughView()
		let carciofino9__xScale = PizzaAnimationPassthroughView()
		let carciofino9__yScale = PizzaAnimationPassthroughView()
		let carciofino9 = UIImageView()
		carciofino9.image = imgCarciofino
		carciofino9.contentMode = .center
		carciofino9.layer.anchorPoint = CGPoint(x:0.651, y:0.617)
		carciofino9.bounds = CGRect(x:0, y:0, width:160.0, height:276.0)
		carciofino9__root.layer.position = CGPoint(x:560.762, y:558.445)
		carciofino9__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		carciofino9__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		carciofino9__root.transform = CGAffineTransform(rotationAngle: 0.000)
		carciofini.addSubview(carciofino9__root)
		carciofino9__root.addSubview(carciofino9__xScale)
		carciofino9__xScale.addSubview(carciofino9__yScale)
		carciofino9__yScale.addSubview(carciofino9)
		carciofini.addSubview(carciofino9__root)
		viewsByName["Carciofino/9__root"] = carciofino9__root
		viewsByName["Carciofino/9__xScale"] = carciofino9__xScale
		viewsByName["Carciofino/9__yScale"] = carciofino9__yScale
		viewsByName["Carciofino/9"] = carciofino9

		let funghi__root = PizzaAnimationPassthroughView()
		let funghi__xScale = PizzaAnimationPassthroughView()
		let funghi__yScale = PizzaAnimationPassthroughView()
		let funghi = UIView()
		funghi.bounds = CGRect(x:0, y:0, width:770.4, height:480.8)
		funghi__root.layer.position = CGPoint(x:189.677, y:-41.319)
		funghi__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		funghi__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		funghi__root.transform = CGAffineTransform(rotationAngle: 0.000)
		pizza.addSubview(funghi__root)
		funghi__root.addSubview(funghi__xScale)
		funghi__xScale.addSubview(funghi__yScale)
		funghi__yScale.addSubview(funghi)
		pizza.addSubview(funghi__root)
		viewsByName["Funghi__root"] = funghi__root
		viewsByName["Funghi__xScale"] = funghi__xScale
		viewsByName["Funghi__yScale"] = funghi__yScale
		viewsByName["Funghi"] = funghi

		let fungo1__root = PizzaAnimationPassthroughView()
		let fungo1__xScale = PizzaAnimationPassthroughView()
		let fungo1__yScale = PizzaAnimationPassthroughView()
		let fungo1 = UIImageView()
		let imgFungo = UIImage(named:"Fungo.png", in: bundle, compatibleWith: nil)
		if imgFungo == nil {
			print("** Warning: Could not create image from 'Fungo.png'")
		}
		fungo1.image = imgFungo
		fungo1.contentMode = .center
		fungo1.bounds = CGRect(x:0, y:0, width:202.0, height:214.0)
		fungo1__root.layer.position = CGPoint(x:-43.309, y:194.418)
		fungo1__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		fungo1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		fungo1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		funghi.addSubview(fungo1__root)
		fungo1__root.addSubview(fungo1__xScale)
		fungo1__xScale.addSubview(fungo1__yScale)
		fungo1__yScale.addSubview(fungo1)
		funghi.addSubview(fungo1__root)
		viewsByName["Fungo/1__root"] = fungo1__root
		viewsByName["Fungo/1__xScale"] = fungo1__xScale
		viewsByName["Fungo/1__yScale"] = fungo1__yScale
		viewsByName["Fungo/1"] = fungo1

		let fungo3__root = PizzaAnimationPassthroughView()
		let fungo3__xScale = PizzaAnimationPassthroughView()
		let fungo3__yScale = PizzaAnimationPassthroughView()
		let fungo3 = UIImageView()
		fungo3.image = imgFungo
		fungo3.contentMode = .center
		fungo3.bounds = CGRect(x:0, y:0, width:202.0, height:214.0)
		fungo3__root.layer.position = CGPoint(x:-51.633, y:345.523)
		fungo3__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		fungo3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		fungo3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		funghi.addSubview(fungo3__root)
		fungo3__root.addSubview(fungo3__xScale)
		fungo3__xScale.addSubview(fungo3__yScale)
		fungo3__yScale.addSubview(fungo3)
		funghi.addSubview(fungo3__root)
		viewsByName["Fungo/3__root"] = fungo3__root
		viewsByName["Fungo/3__xScale"] = fungo3__xScale
		viewsByName["Fungo/3__yScale"] = fungo3__yScale
		viewsByName["Fungo/3"] = fungo3

		let fungo4__root = PizzaAnimationPassthroughView()
		let fungo4__xScale = PizzaAnimationPassthroughView()
		let fungo4__yScale = PizzaAnimationPassthroughView()
		let fungo4 = UIImageView()
		fungo4.image = imgFungo
		fungo4.contentMode = .center
		fungo4.bounds = CGRect(x:0, y:0, width:202.0, height:214.0)
		fungo4__root.layer.position = CGPoint(x:-66.512, y:419.113)
		fungo4__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		fungo4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		fungo4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		funghi.addSubview(fungo4__root)
		fungo4__root.addSubview(fungo4__xScale)
		fungo4__xScale.addSubview(fungo4__yScale)
		fungo4__yScale.addSubview(fungo4)
		funghi.addSubview(fungo4__root)
		viewsByName["Fungo/4__root"] = fungo4__root
		viewsByName["Fungo/4__xScale"] = fungo4__xScale
		viewsByName["Fungo/4__yScale"] = fungo4__yScale
		viewsByName["Fungo/4"] = fungo4

		let fungo6__root = PizzaAnimationPassthroughView()
		let fungo6__xScale = PizzaAnimationPassthroughView()
		let fungo6__yScale = PizzaAnimationPassthroughView()
		let fungo6 = UIImageView()
		fungo6.image = imgFungo
		fungo6.contentMode = .center
		fungo6.bounds = CGRect(x:0, y:0, width:202.0, height:214.0)
		fungo6__root.layer.position = CGPoint(x:-103.496, y:240.617)
		fungo6__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		fungo6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		fungo6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		funghi.addSubview(fungo6__root)
		fungo6__root.addSubview(fungo6__xScale)
		fungo6__xScale.addSubview(fungo6__yScale)
		fungo6__yScale.addSubview(fungo6)
		funghi.addSubview(fungo6__root)
		viewsByName["Fungo/6__root"] = fungo6__root
		viewsByName["Fungo/6__xScale"] = fungo6__xScale
		viewsByName["Fungo/6__yScale"] = fungo6__yScale
		viewsByName["Fungo/6"] = fungo6

		let fungo9__root = PizzaAnimationPassthroughView()
		let fungo9__xScale = PizzaAnimationPassthroughView()
		let fungo9__yScale = PizzaAnimationPassthroughView()
		let fungo9 = UIImageView()
		fungo9.image = imgFungo
		fungo9.contentMode = .center
		fungo9.bounds = CGRect(x:0, y:0, width:202.0, height:214.0)
		fungo9__root.layer.position = CGPoint(x:544.242, y:185.049)
		fungo9__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		fungo9__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		fungo9__root.transform = CGAffineTransform(rotationAngle: 0.000)
		funghi.addSubview(fungo9__root)
		fungo9__root.addSubview(fungo9__xScale)
		fungo9__xScale.addSubview(fungo9__yScale)
		fungo9__yScale.addSubview(fungo9)
		funghi.addSubview(fungo9__root)
		viewsByName["Fungo/9__root"] = fungo9__root
		viewsByName["Fungo/9__xScale"] = fungo9__xScale
		viewsByName["Fungo/9__yScale"] = fungo9__yScale
		viewsByName["Fungo/9"] = fungo9

		let fungo10__root = PizzaAnimationPassthroughView()
		let fungo10__xScale = PizzaAnimationPassthroughView()
		let fungo10__yScale = PizzaAnimationPassthroughView()
		let fungo10 = UIImageView()
		fungo10.image = imgFungo
		fungo10.contentMode = .center
		fungo10.bounds = CGRect(x:0, y:0, width:202.0, height:214.0)
		fungo10__root.layer.position = CGPoint(x:589.109, y:242.819)
		fungo10__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		fungo10__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		fungo10__root.transform = CGAffineTransform(rotationAngle: 0.000)
		funghi.addSubview(fungo10__root)
		fungo10__root.addSubview(fungo10__xScale)
		fungo10__xScale.addSubview(fungo10__yScale)
		fungo10__yScale.addSubview(fungo10)
		funghi.addSubview(fungo10__root)
		viewsByName["Fungo/10__root"] = fungo10__root
		viewsByName["Fungo/10__xScale"] = fungo10__xScale
		viewsByName["Fungo/10__yScale"] = fungo10__yScale
		viewsByName["Fungo/10"] = fungo10

		let fungo12__root = PizzaAnimationPassthroughView()
		let fungo12__xScale = PizzaAnimationPassthroughView()
		let fungo12__yScale = PizzaAnimationPassthroughView()
		let fungo12 = UIImageView()
		fungo12.image = imgFungo
		fungo12.contentMode = .center
		fungo12.bounds = CGRect(x:0, y:0, width:202.0, height:214.0)
		fungo12__root.layer.position = CGPoint(x:546.434, y:454.131)
		fungo12__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		fungo12__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		fungo12__root.transform = CGAffineTransform(rotationAngle: 0.000)
		funghi.addSubview(fungo12__root)
		fungo12__root.addSubview(fungo12__xScale)
		fungo12__xScale.addSubview(fungo12__yScale)
		fungo12__yScale.addSubview(fungo12)
		funghi.addSubview(fungo12__root)
		viewsByName["Fungo/12__root"] = fungo12__root
		viewsByName["Fungo/12__xScale"] = fungo12__xScale
		viewsByName["Fungo/12__yScale"] = fungo12__yScale
		viewsByName["Fungo/12"] = fungo12

		let fungo13__root = PizzaAnimationPassthroughView()
		let fungo13__xScale = PizzaAnimationPassthroughView()
		let fungo13__yScale = PizzaAnimationPassthroughView()
		let fungo13 = UIImageView()
		fungo13.image = imgFungo
		fungo13.contentMode = .center
		fungo13.bounds = CGRect(x:0, y:0, width:202.0, height:214.0)
		fungo13__root.layer.position = CGPoint(x:547.602, y:547.815)
		fungo13__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		fungo13__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		fungo13__root.transform = CGAffineTransform(rotationAngle: 0.000)
		funghi.addSubview(fungo13__root)
		fungo13__root.addSubview(fungo13__xScale)
		fungo13__xScale.addSubview(fungo13__yScale)
		fungo13__yScale.addSubview(fungo13)
		funghi.addSubview(fungo13__root)
		viewsByName["Fungo/13__root"] = fungo13__root
		viewsByName["Fungo/13__xScale"] = fungo13__xScale
		viewsByName["Fungo/13__yScale"] = fungo13__yScale
		viewsByName["Fungo/13"] = fungo13

		let oliveNere__root = PizzaAnimationPassthroughView()
		let oliveNere__xScale = PizzaAnimationPassthroughView()
		let oliveNere__yScale = PizzaAnimationPassthroughView()
		let oliveNere = UIView()
		oliveNere.bounds = CGRect(x:0, y:0, width:691.7, height:426.1)
		oliveNere__root.layer.position = CGPoint(x:150.431, y:-109.517)
		oliveNere__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		oliveNere__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		oliveNere__root.transform = CGAffineTransform(rotationAngle: 0.000)
		pizza.addSubview(oliveNere__root)
		oliveNere__root.addSubview(oliveNere__xScale)
		oliveNere__xScale.addSubview(oliveNere__yScale)
		oliveNere__yScale.addSubview(oliveNere)
		pizza.addSubview(oliveNere__root)
		viewsByName["OliveNere__root"] = oliveNere__root
		viewsByName["OliveNere__xScale"] = oliveNere__xScale
		viewsByName["OliveNere__yScale"] = oliveNere__yScale
		viewsByName["OliveNere"] = oliveNere

		let olivaNera4__root = PizzaAnimationPassthroughView()
		let olivaNera4__xScale = PizzaAnimationPassthroughView()
		let olivaNera4__yScale = PizzaAnimationPassthroughView()
		let olivaNera4 = UIImageView()
		let imgOlivaNera1 = UIImage(named:"Oliva:Nera:1.png", in: bundle, compatibleWith: nil)
		if imgOlivaNera1 == nil {
			print("** Warning: Could not create image from 'Oliva:Nera:1.png'")
		}
		olivaNera4.image = imgOlivaNera1
		olivaNera4.contentMode = .center
		olivaNera4.bounds = CGRect(x:0, y:0, width:166.0, height:138.0)
		olivaNera4__root.layer.position = CGPoint(x:540.062, y:153.289)
		olivaNera4__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		olivaNera4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		olivaNera4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		oliveNere.addSubview(olivaNera4__root)
		olivaNera4__root.addSubview(olivaNera4__xScale)
		olivaNera4__xScale.addSubview(olivaNera4__yScale)
		olivaNera4__yScale.addSubview(olivaNera4)
		oliveNere.addSubview(olivaNera4__root)
		viewsByName["Oliva/Nera/4__root"] = olivaNera4__root
		viewsByName["Oliva/Nera/4__xScale"] = olivaNera4__xScale
		viewsByName["Oliva/Nera/4__yScale"] = olivaNera4__yScale
		viewsByName["Oliva/Nera/4"] = olivaNera4

		let olivaNera5__root = PizzaAnimationPassthroughView()
		let olivaNera5__xScale = PizzaAnimationPassthroughView()
		let olivaNera5__yScale = PizzaAnimationPassthroughView()
		let olivaNera5 = UIImageView()
		olivaNera5.image = imgOlivaNera1
		olivaNera5.contentMode = .center
		olivaNera5.bounds = CGRect(x:0, y:0, width:166.0, height:138.0)
		olivaNera5__root.layer.position = CGPoint(x:552.457, y:468.512)
		olivaNera5__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		olivaNera5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		olivaNera5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		oliveNere.addSubview(olivaNera5__root)
		olivaNera5__root.addSubview(olivaNera5__xScale)
		olivaNera5__xScale.addSubview(olivaNera5__yScale)
		olivaNera5__yScale.addSubview(olivaNera5)
		oliveNere.addSubview(olivaNera5__root)
		viewsByName["Oliva/Nera/5__root"] = olivaNera5__root
		viewsByName["Oliva/Nera/5__xScale"] = olivaNera5__xScale
		viewsByName["Oliva/Nera/5__yScale"] = olivaNera5__yScale
		viewsByName["Oliva/Nera/5"] = olivaNera5

		let olivaNera10__root = PizzaAnimationPassthroughView()
		let olivaNera10__xScale = PizzaAnimationPassthroughView()
		let olivaNera10__yScale = PizzaAnimationPassthroughView()
		let olivaNera10 = UIImageView()
		let imgOlivaNera2 = UIImage(named:"Oliva:Nera:2.png", in: bundle, compatibleWith: nil)
		if imgOlivaNera2 == nil {
			print("** Warning: Could not create image from 'Oliva:Nera:2.png'")
		}
		olivaNera10.image = imgOlivaNera2
		olivaNera10.contentMode = .center
		olivaNera10.bounds = CGRect(x:0, y:0, width:114.0, height:138.0)
		olivaNera10__root.layer.position = CGPoint(x:-71.715, y:327.664)
		olivaNera10__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		olivaNera10__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		olivaNera10__root.transform = CGAffineTransform(rotationAngle: 0.000)
		oliveNere.addSubview(olivaNera10__root)
		olivaNera10__root.addSubview(olivaNera10__xScale)
		olivaNera10__xScale.addSubview(olivaNera10__yScale)
		olivaNera10__yScale.addSubview(olivaNera10)
		oliveNere.addSubview(olivaNera10__root)
		viewsByName["Oliva/Nera/10__root"] = olivaNera10__root
		viewsByName["Oliva/Nera/10__xScale"] = olivaNera10__xScale
		viewsByName["Oliva/Nera/10__yScale"] = olivaNera10__yScale
		viewsByName["Oliva/Nera/10"] = olivaNera10

		let olivaNera6__root = PizzaAnimationPassthroughView()
		let olivaNera6__xScale = PizzaAnimationPassthroughView()
		let olivaNera6__yScale = PizzaAnimationPassthroughView()
		let olivaNera6 = UIImageView()
		olivaNera6.image = imgOlivaNera2
		olivaNera6.contentMode = .center
		olivaNera6.bounds = CGRect(x:0, y:0, width:114.0, height:138.0)
		olivaNera6__root.layer.position = CGPoint(x:549.414, y:272.082)
		olivaNera6__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		olivaNera6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		olivaNera6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		oliveNere.addSubview(olivaNera6__root)
		olivaNera6__root.addSubview(olivaNera6__xScale)
		olivaNera6__xScale.addSubview(olivaNera6__yScale)
		olivaNera6__yScale.addSubview(olivaNera6)
		oliveNere.addSubview(olivaNera6__root)
		viewsByName["Oliva/Nera/6__root"] = olivaNera6__root
		viewsByName["Oliva/Nera/6__xScale"] = olivaNera6__xScale
		viewsByName["Oliva/Nera/6__yScale"] = olivaNera6__yScale
		viewsByName["Oliva/Nera/6"] = olivaNera6

		let olivaNera3__root = PizzaAnimationPassthroughView()
		let olivaNera3__xScale = PizzaAnimationPassthroughView()
		let olivaNera3__yScale = PizzaAnimationPassthroughView()
		let olivaNera3 = UIImageView()
		let imgOlivaNera3 = UIImage(named:"Oliva:Nera:3.png", in: bundle, compatibleWith: nil)
		if imgOlivaNera3 == nil {
			print("** Warning: Could not create image from 'Oliva:Nera:3.png'")
		}
		olivaNera3.image = imgOlivaNera3
		olivaNera3.contentMode = .center
		olivaNera3.bounds = CGRect(x:0, y:0, width:124.0, height:140.0)
		olivaNera3__root.layer.position = CGPoint(x:-41.945, y:205.484)
		olivaNera3__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		olivaNera3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		olivaNera3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		oliveNere.addSubview(olivaNera3__root)
		olivaNera3__root.addSubview(olivaNera3__xScale)
		olivaNera3__xScale.addSubview(olivaNera3__yScale)
		olivaNera3__yScale.addSubview(olivaNera3)
		oliveNere.addSubview(olivaNera3__root)
		viewsByName["Oliva/Nera/3__root"] = olivaNera3__root
		viewsByName["Oliva/Nera/3__xScale"] = olivaNera3__xScale
		viewsByName["Oliva/Nera/3__yScale"] = olivaNera3__yScale
		viewsByName["Oliva/Nera/3"] = olivaNera3

		let olivaNera8__root = PizzaAnimationPassthroughView()
		let olivaNera8__xScale = PizzaAnimationPassthroughView()
		let olivaNera8__yScale = PizzaAnimationPassthroughView()
		let olivaNera8 = UIImageView()
		olivaNera8.image = imgOlivaNera3
		olivaNera8.contentMode = .center
		olivaNera8.bounds = CGRect(x:0, y:0, width:124.0, height:140.0)
		olivaNera8__root.layer.position = CGPoint(x:-40.219, y:529.480)
		olivaNera8__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		olivaNera8__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		olivaNera8__root.transform = CGAffineTransform(rotationAngle: 0.000)
		oliveNere.addSubview(olivaNera8__root)
		olivaNera8__root.addSubview(olivaNera8__xScale)
		olivaNera8__xScale.addSubview(olivaNera8__yScale)
		olivaNera8__yScale.addSubview(olivaNera8)
		oliveNere.addSubview(olivaNera8__root)
		viewsByName["Oliva/Nera/8__root"] = olivaNera8__root
		viewsByName["Oliva/Nera/8__xScale"] = olivaNera8__xScale
		viewsByName["Oliva/Nera/8__yScale"] = olivaNera8__yScale
		viewsByName["Oliva/Nera/8"] = olivaNera8

		let melanzane__root = PizzaAnimationPassthroughView()
		let melanzane__xScale = PizzaAnimationPassthroughView()
		let melanzane__yScale = PizzaAnimationPassthroughView()
		let melanzane = UIView()
		melanzane.bounds = CGRect(x:0, y:0, width:687.6, height:433.4)
		melanzane__root.layer.position = CGPoint(x:148.405, y:-105.876)
		melanzane__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		melanzane__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		melanzane__root.transform = CGAffineTransform(rotationAngle: 0.000)
		pizza.addSubview(melanzane__root)
		melanzane__root.addSubview(melanzane__xScale)
		melanzane__xScale.addSubview(melanzane__yScale)
		melanzane__yScale.addSubview(melanzane)
		pizza.addSubview(melanzane__root)
		viewsByName["Melanzane__root"] = melanzane__root
		viewsByName["Melanzane__xScale"] = melanzane__xScale
		viewsByName["Melanzane__yScale"] = melanzane__yScale
		viewsByName["Melanzane"] = melanzane

		let melanzana1__root = PizzaAnimationPassthroughView()
		let melanzana1__xScale = PizzaAnimationPassthroughView()
		let melanzana1__yScale = PizzaAnimationPassthroughView()
		let melanzana1 = UIImageView()
		let imgMelanzana = UIImage(named:"Melanzana.png", in: bundle, compatibleWith: nil)
		if imgMelanzana == nil {
			print("** Warning: Could not create image from 'Melanzana.png'")
		}
		melanzana1.image = imgMelanzana
		melanzana1.contentMode = .center
		melanzana1.bounds = CGRect(x:0, y:0, width:172.0, height:222.0)
		melanzana1__root.layer.position = CGPoint(x:-46.285, y:208.461)
		melanzana1__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		melanzana1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		melanzana1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		melanzane.addSubview(melanzana1__root)
		melanzana1__root.addSubview(melanzana1__xScale)
		melanzana1__xScale.addSubview(melanzana1__yScale)
		melanzana1__yScale.addSubview(melanzana1)
		melanzane.addSubview(melanzana1__root)
		viewsByName["Melanzana/1__root"] = melanzana1__root
		viewsByName["Melanzana/1__xScale"] = melanzana1__xScale
		viewsByName["Melanzana/1__yScale"] = melanzana1__yScale
		viewsByName["Melanzana/1"] = melanzana1

		let melanzana2__root = PizzaAnimationPassthroughView()
		let melanzana2__xScale = PizzaAnimationPassthroughView()
		let melanzana2__yScale = PizzaAnimationPassthroughView()
		let melanzana2 = UIImageView()
		melanzana2.image = imgMelanzana
		melanzana2.contentMode = .center
		melanzana2.bounds = CGRect(x:0, y:0, width:172.0, height:222.0)
		melanzana2__root.layer.position = CGPoint(x:-39.328, y:276.027)
		melanzana2__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		melanzana2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		melanzana2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		melanzane.addSubview(melanzana2__root)
		melanzana2__root.addSubview(melanzana2__xScale)
		melanzana2__xScale.addSubview(melanzana2__yScale)
		melanzana2__yScale.addSubview(melanzana2)
		melanzane.addSubview(melanzana2__root)
		viewsByName["Melanzana/2__root"] = melanzana2__root
		viewsByName["Melanzana/2__xScale"] = melanzana2__xScale
		viewsByName["Melanzana/2__yScale"] = melanzana2__yScale
		viewsByName["Melanzana/2"] = melanzana2

		let melanzana4__root = PizzaAnimationPassthroughView()
		let melanzana4__xScale = PizzaAnimationPassthroughView()
		let melanzana4__yScale = PizzaAnimationPassthroughView()
		let melanzana4 = UIImageView()
		melanzana4.image = imgMelanzana
		melanzana4.contentMode = .center
		melanzana4.bounds = CGRect(x:0, y:0, width:172.0, height:222.0)
		melanzana4__root.layer.position = CGPoint(x:-51.359, y:522.062)
		melanzana4__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		melanzana4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		melanzana4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		melanzane.addSubview(melanzana4__root)
		melanzana4__root.addSubview(melanzana4__xScale)
		melanzana4__xScale.addSubview(melanzana4__yScale)
		melanzana4__yScale.addSubview(melanzana4)
		melanzane.addSubview(melanzana4__root)
		viewsByName["Melanzana/4__root"] = melanzana4__root
		viewsByName["Melanzana/4__xScale"] = melanzana4__xScale
		viewsByName["Melanzana/4__yScale"] = melanzana4__yScale
		viewsByName["Melanzana/4"] = melanzana4

		let melanzana5__root = PizzaAnimationPassthroughView()
		let melanzana5__xScale = PizzaAnimationPassthroughView()
		let melanzana5__yScale = PizzaAnimationPassthroughView()
		let melanzana5 = UIImageView()
		melanzana5.image = imgMelanzana
		melanzana5.contentMode = .center
		melanzana5.bounds = CGRect(x:0, y:0, width:172.0, height:222.0)
		melanzana5__root.layer.position = CGPoint(x:543.613, y:160.160)
		melanzana5__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		melanzana5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		melanzana5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		melanzane.addSubview(melanzana5__root)
		melanzana5__root.addSubview(melanzana5__xScale)
		melanzana5__xScale.addSubview(melanzana5__yScale)
		melanzana5__yScale.addSubview(melanzana5)
		melanzane.addSubview(melanzana5__root)
		viewsByName["Melanzana/5__root"] = melanzana5__root
		viewsByName["Melanzana/5__xScale"] = melanzana5__xScale
		viewsByName["Melanzana/5__yScale"] = melanzana5__yScale
		viewsByName["Melanzana/5"] = melanzana5

		let melanzana6__root = PizzaAnimationPassthroughView()
		let melanzana6__xScale = PizzaAnimationPassthroughView()
		let melanzana6__yScale = PizzaAnimationPassthroughView()
		let melanzana6 = UIImageView()
		melanzana6.image = imgMelanzana
		melanzana6.contentMode = .center
		melanzana6.bounds = CGRect(x:0, y:0, width:172.0, height:222.0)
		melanzana6__root.layer.position = CGPoint(x:543.613, y:272.992)
		melanzana6__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		melanzana6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		melanzana6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		melanzane.addSubview(melanzana6__root)
		melanzana6__root.addSubview(melanzana6__xScale)
		melanzana6__xScale.addSubview(melanzana6__yScale)
		melanzana6__yScale.addSubview(melanzana6)
		melanzane.addSubview(melanzana6__root)
		viewsByName["Melanzana/6__root"] = melanzana6__root
		viewsByName["Melanzana/6__xScale"] = melanzana6__xScale
		viewsByName["Melanzana/6__yScale"] = melanzana6__yScale
		viewsByName["Melanzana/6"] = melanzana6

		let melanzana9__root = PizzaAnimationPassthroughView()
		let melanzana9__xScale = PizzaAnimationPassthroughView()
		let melanzana9__yScale = PizzaAnimationPassthroughView()
		let melanzana9 = UIImageView()
		melanzana9.image = imgMelanzana
		melanzana9.contentMode = .center
		melanzana9.layer.anchorPoint = CGPoint(x:0.702, y:0.687)
		melanzana9.bounds = CGRect(x:0, y:0, width:172.0, height:222.0)
		melanzana9__root.layer.position = CGPoint(x:560.051, y:557.480)
		melanzana9__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		melanzana9__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		melanzana9__root.transform = CGAffineTransform(rotationAngle: 0.000)
		melanzane.addSubview(melanzana9__root)
		melanzana9__root.addSubview(melanzana9__xScale)
		melanzana9__xScale.addSubview(melanzana9__yScale)
		melanzana9__yScale.addSubview(melanzana9)
		melanzane.addSubview(melanzana9__root)
		viewsByName["Melanzana/9__root"] = melanzana9__root
		viewsByName["Melanzana/9__xScale"] = melanzana9__xScale
		viewsByName["Melanzana/9__yScale"] = melanzana9__yScale
		viewsByName["Melanzana/9"] = melanzana9

		let zucchine__root = PizzaAnimationPassthroughView()
		let zucchine__xScale = PizzaAnimationPassthroughView()
		let zucchine__yScale = PizzaAnimationPassthroughView()
		let zucchine = UIView()
		zucchine.bounds = CGRect(x:0, y:0, width:696.9, height:406.6)
		zucchine__root.layer.position = CGPoint(x:152.983, y:-106.519)
		zucchine__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		zucchine__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		zucchine__root.transform = CGAffineTransform(rotationAngle: 0.000)
		pizza.addSubview(zucchine__root)
		zucchine__root.addSubview(zucchine__xScale)
		zucchine__xScale.addSubview(zucchine__yScale)
		zucchine__yScale.addSubview(zucchine)
		pizza.addSubview(zucchine__root)
		viewsByName["Zucchine__root"] = zucchine__root
		viewsByName["Zucchine__xScale"] = zucchine__xScale
		viewsByName["Zucchine__yScale"] = zucchine__yScale
		viewsByName["Zucchine"] = zucchine

		let zucchina1__root = PizzaAnimationPassthroughView()
		let zucchina1__xScale = PizzaAnimationPassthroughView()
		let zucchina1__yScale = PizzaAnimationPassthroughView()
		let zucchina1 = UIImageView()
		let imgZucchina = UIImage(named:"Zucchina.png", in: bundle, compatibleWith: nil)
		if imgZucchina == nil {
			print("** Warning: Could not create image from 'Zucchina.png'")
		}
		zucchina1.image = imgZucchina
		zucchina1.contentMode = .center
		zucchina1.layer.anchorPoint = CGPoint(x:-0.233, y:0.438)
		zucchina1.bounds = CGRect(x:0, y:0, width:124.0, height:128.0)
		zucchina1__root.layer.position = CGPoint(x:-61.223, y:183.199)
		zucchina1__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		zucchina1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		zucchina1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		zucchine.addSubview(zucchina1__root)
		zucchina1__root.addSubview(zucchina1__xScale)
		zucchina1__xScale.addSubview(zucchina1__yScale)
		zucchina1__yScale.addSubview(zucchina1)
		zucchine.addSubview(zucchina1__root)
		viewsByName["Zucchina/1__root"] = zucchina1__root
		viewsByName["Zucchina/1__xScale"] = zucchina1__xScale
		viewsByName["Zucchina/1__yScale"] = zucchina1__yScale
		viewsByName["Zucchina/1"] = zucchina1

		let zucchina2__root = PizzaAnimationPassthroughView()
		let zucchina2__xScale = PizzaAnimationPassthroughView()
		let zucchina2__yScale = PizzaAnimationPassthroughView()
		let zucchina2 = UIImageView()
		zucchina2.image = imgZucchina
		zucchina2.contentMode = .center
		zucchina2.layer.anchorPoint = CGPoint(x:-0.233, y:0.438)
		zucchina2.bounds = CGRect(x:0, y:0, width:124.0, height:128.0)
		zucchina2__root.layer.position = CGPoint(x:-78.410, y:232.156)
		zucchina2__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		zucchina2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		zucchina2__root.transform = CGAffineTransform(rotationAngle: 6.271)
		zucchine.addSubview(zucchina2__root)
		zucchina2__root.addSubview(zucchina2__xScale)
		zucchina2__xScale.addSubview(zucchina2__yScale)
		zucchina2__yScale.addSubview(zucchina2)
		zucchine.addSubview(zucchina2__root)
		viewsByName["Zucchina/2__root"] = zucchina2__root
		viewsByName["Zucchina/2__xScale"] = zucchina2__xScale
		viewsByName["Zucchina/2__yScale"] = zucchina2__yScale
		viewsByName["Zucchina/2"] = zucchina2

		let zucchina3__root = PizzaAnimationPassthroughView()
		let zucchina3__xScale = PizzaAnimationPassthroughView()
		let zucchina3__yScale = PizzaAnimationPassthroughView()
		let zucchina3 = UIImageView()
		zucchina3.image = imgZucchina
		zucchina3.contentMode = .center
		zucchina3.layer.anchorPoint = CGPoint(x:-0.233, y:0.438)
		zucchina3.bounds = CGRect(x:0, y:0, width:124.0, height:128.0)
		zucchina3__root.layer.position = CGPoint(x:-48.711, y:280.391)
		zucchina3__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		zucchina3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		zucchina3__root.transform = CGAffineTransform(rotationAngle: 6.271)
		zucchine.addSubview(zucchina3__root)
		zucchina3__root.addSubview(zucchina3__xScale)
		zucchina3__xScale.addSubview(zucchina3__yScale)
		zucchina3__yScale.addSubview(zucchina3)
		zucchine.addSubview(zucchina3__root)
		viewsByName["Zucchina/3__root"] = zucchina3__root
		viewsByName["Zucchina/3__xScale"] = zucchina3__xScale
		viewsByName["Zucchina/3__yScale"] = zucchina3__yScale
		viewsByName["Zucchina/3"] = zucchina3

		let zucchina6__root = PizzaAnimationPassthroughView()
		let zucchina6__xScale = PizzaAnimationPassthroughView()
		let zucchina6__yScale = PizzaAnimationPassthroughView()
		let zucchina6 = UIImageView()
		zucchina6.image = imgZucchina
		zucchina6.contentMode = .center
		zucchina6.layer.anchorPoint = CGPoint(x:-0.233, y:0.438)
		zucchina6.bounds = CGRect(x:0, y:0, width:124.0, height:128.0)
		zucchina6__root.layer.position = CGPoint(x:-96.570, y:408.860)
		zucchina6__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		zucchina6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		zucchina6__root.transform = CGAffineTransform(rotationAngle: 6.271)
		zucchine.addSubview(zucchina6__root)
		zucchina6__root.addSubview(zucchina6__xScale)
		zucchina6__xScale.addSubview(zucchina6__yScale)
		zucchina6__yScale.addSubview(zucchina6)
		zucchine.addSubview(zucchina6__root)
		viewsByName["Zucchina/6__root"] = zucchina6__root
		viewsByName["Zucchina/6__xScale"] = zucchina6__xScale
		viewsByName["Zucchina/6__yScale"] = zucchina6__yScale
		viewsByName["Zucchina/6"] = zucchina6

		let zucchina9__root = PizzaAnimationPassthroughView()
		let zucchina9__xScale = PizzaAnimationPassthroughView()
		let zucchina9__yScale = PizzaAnimationPassthroughView()
		let zucchina9 = UIImageView()
		zucchina9.image = imgZucchina
		zucchina9.contentMode = .center
		zucchina9.layer.anchorPoint = CGPoint(x:-0.233, y:0.438)
		zucchina9.bounds = CGRect(x:0, y:0, width:124.0, height:128.0)
		zucchina9__root.layer.position = CGPoint(x:542.117, y:154.275)
		zucchina9__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		zucchina9__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		zucchina9__root.transform = CGAffineTransform(rotationAngle: 6.271)
		zucchine.addSubview(zucchina9__root)
		zucchina9__root.addSubview(zucchina9__xScale)
		zucchina9__xScale.addSubview(zucchina9__yScale)
		zucchina9__yScale.addSubview(zucchina9)
		zucchine.addSubview(zucchina9__root)
		viewsByName["Zucchina/9__root"] = zucchina9__root
		viewsByName["Zucchina/9__xScale"] = zucchina9__xScale
		viewsByName["Zucchina/9__yScale"] = zucchina9__yScale
		viewsByName["Zucchina/9"] = zucchina9

		let zucchina10__root = PizzaAnimationPassthroughView()
		let zucchina10__xScale = PizzaAnimationPassthroughView()
		let zucchina10__yScale = PizzaAnimationPassthroughView()
		let zucchina10 = UIImageView()
		zucchina10.image = imgZucchina
		zucchina10.contentMode = .center
		zucchina10.layer.anchorPoint = CGPoint(x:-0.233, y:0.438)
		zucchina10.bounds = CGRect(x:0, y:0, width:124.0, height:128.0)
		zucchina10__root.layer.position = CGPoint(x:518.539, y:218.427)
		zucchina10__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		zucchina10__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		zucchina10__root.transform = CGAffineTransform(rotationAngle: 6.271)
		zucchine.addSubview(zucchina10__root)
		zucchina10__root.addSubview(zucchina10__xScale)
		zucchina10__xScale.addSubview(zucchina10__yScale)
		zucchina10__yScale.addSubview(zucchina10)
		zucchine.addSubview(zucchina10__root)
		viewsByName["Zucchina/10__root"] = zucchina10__root
		viewsByName["Zucchina/10__xScale"] = zucchina10__xScale
		viewsByName["Zucchina/10__yScale"] = zucchina10__yScale
		viewsByName["Zucchina/10"] = zucchina10

		let zucchina11__root = PizzaAnimationPassthroughView()
		let zucchina11__xScale = PizzaAnimationPassthroughView()
		let zucchina11__yScale = PizzaAnimationPassthroughView()
		let zucchina11 = UIImageView()
		zucchina11.image = imgZucchina
		zucchina11.contentMode = .center
		zucchina11.layer.anchorPoint = CGPoint(x:-0.233, y:0.438)
		zucchina11.bounds = CGRect(x:0, y:0, width:124.0, height:128.0)
		zucchina11__root.layer.position = CGPoint(x:562.355, y:299.579)
		zucchina11__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		zucchina11__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		zucchina11__root.transform = CGAffineTransform(rotationAngle: 6.271)
		zucchine.addSubview(zucchina11__root)
		zucchina11__root.addSubview(zucchina11__xScale)
		zucchina11__xScale.addSubview(zucchina11__yScale)
		zucchina11__yScale.addSubview(zucchina11)
		zucchine.addSubview(zucchina11__root)
		viewsByName["Zucchina/11__root"] = zucchina11__root
		viewsByName["Zucchina/11__xScale"] = zucchina11__xScale
		viewsByName["Zucchina/11__yScale"] = zucchina11__yScale
		viewsByName["Zucchina/11"] = zucchina11

		let zucchina15__root = PizzaAnimationPassthroughView()
		let zucchina15__xScale = PizzaAnimationPassthroughView()
		let zucchina15__yScale = PizzaAnimationPassthroughView()
		let zucchina15 = UIImageView()
		zucchina15.image = imgZucchina
		zucchina15.contentMode = .center
		zucchina15.layer.anchorPoint = CGPoint(x:-0.233, y:0.438)
		zucchina15.bounds = CGRect(x:0, y:0, width:124.0, height:128.0)
		zucchina15__root.layer.position = CGPoint(x:564.395, y:534.978)
		zucchina15__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		zucchina15__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		zucchina15__root.transform = CGAffineTransform(rotationAngle: 6.271)
		zucchine.addSubview(zucchina15__root)
		zucchina15__root.addSubview(zucchina15__xScale)
		zucchina15__xScale.addSubview(zucchina15__yScale)
		zucchina15__yScale.addSubview(zucchina15)
		zucchine.addSubview(zucchina15__root)
		viewsByName["Zucchina/15__root"] = zucchina15__root
		viewsByName["Zucchina/15__xScale"] = zucchina15__xScale
		viewsByName["Zucchina/15__yScale"] = zucchina15__yScale
		viewsByName["Zucchina/15"] = zucchina15

		let peperoni__root = PizzaAnimationPassthroughView()
		let peperoni__xScale = PizzaAnimationPassthroughView()
		let peperoni__yScale = PizzaAnimationPassthroughView()
		let peperoni = UIView()
		peperoni.bounds = CGRect(x:0, y:0, width:726.5, height:421.0)
		peperoni__root.layer.position = CGPoint(x:167.828, y:-100.742)
		peperoni__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		peperoni__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		peperoni__root.transform = CGAffineTransform(rotationAngle: 0.000)
		pizza.addSubview(peperoni__root)
		peperoni__root.addSubview(peperoni__xScale)
		peperoni__xScale.addSubview(peperoni__yScale)
		peperoni__yScale.addSubview(peperoni)
		pizza.addSubview(peperoni__root)
		viewsByName["Peperoni__root"] = peperoni__root
		viewsByName["Peperoni__xScale"] = peperoni__xScale
		viewsByName["Peperoni__yScale"] = peperoni__yScale
		viewsByName["Peperoni"] = peperoni

		let peperone1__root = PizzaAnimationPassthroughView()
		let peperone1__xScale = PizzaAnimationPassthroughView()
		let peperone1__yScale = PizzaAnimationPassthroughView()
		let peperone1 = UIImageView()
		let imgPeperone = UIImage(named:"Peperone.png", in: bundle, compatibleWith: nil)
		if imgPeperone == nil {
			print("** Warning: Could not create image from 'Peperone.png'")
		}
		peperone1.image = imgPeperone
		peperone1.contentMode = .center
		peperone1.bounds = CGRect(x:0, y:0, width:150.0, height:222.0)
		peperone1__root.layer.position = CGPoint(x:-45.414, y:204.781)
		peperone1__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		peperone1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		peperone1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		peperoni.addSubview(peperone1__root)
		peperone1__root.addSubview(peperone1__xScale)
		peperone1__xScale.addSubview(peperone1__yScale)
		peperone1__yScale.addSubview(peperone1)
		peperoni.addSubview(peperone1__root)
		viewsByName["Peperone/1__root"] = peperone1__root
		viewsByName["Peperone/1__xScale"] = peperone1__xScale
		viewsByName["Peperone/1__yScale"] = peperone1__yScale
		viewsByName["Peperone/1"] = peperone1

		let peperone2__root = PizzaAnimationPassthroughView()
		let peperone2__xScale = PizzaAnimationPassthroughView()
		let peperone2__yScale = PizzaAnimationPassthroughView()
		let peperone2 = UIImageView()
		peperone2.image = imgPeperone
		peperone2.contentMode = .center
		peperone2.bounds = CGRect(x:0, y:0, width:150.0, height:222.0)
		peperone2__root.layer.position = CGPoint(x:-36.742, y:268.820)
		peperone2__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		peperone2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		peperone2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		peperoni.addSubview(peperone2__root)
		peperone2__root.addSubview(peperone2__xScale)
		peperone2__xScale.addSubview(peperone2__yScale)
		peperone2__yScale.addSubview(peperone2)
		peperoni.addSubview(peperone2__root)
		viewsByName["Peperone/2__root"] = peperone2__root
		viewsByName["Peperone/2__xScale"] = peperone2__xScale
		viewsByName["Peperone/2__yScale"] = peperone2__yScale
		viewsByName["Peperone/2"] = peperone2

		let peperone4__root = PizzaAnimationPassthroughView()
		let peperone4__xScale = PizzaAnimationPassthroughView()
		let peperone4__yScale = PizzaAnimationPassthroughView()
		let peperone4 = UIImageView()
		peperone4.image = imgPeperone
		peperone4.contentMode = .center
		peperone4.bounds = CGRect(x:0, y:0, width:150.0, height:222.0)
		peperone4__root.layer.position = CGPoint(x:-42.594, y:384.000)
		peperone4__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		peperone4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		peperone4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		peperoni.addSubview(peperone4__root)
		peperone4__root.addSubview(peperone4__xScale)
		peperone4__xScale.addSubview(peperone4__yScale)
		peperone4__yScale.addSubview(peperone4)
		peperoni.addSubview(peperone4__root)
		viewsByName["Peperone/4__root"] = peperone4__root
		viewsByName["Peperone/4__xScale"] = peperone4__xScale
		viewsByName["Peperone/4__yScale"] = peperone4__yScale
		viewsByName["Peperone/4"] = peperone4

		let peperone5__root = PizzaAnimationPassthroughView()
		let peperone5__xScale = PizzaAnimationPassthroughView()
		let peperone5__yScale = PizzaAnimationPassthroughView()
		let peperone5 = UIImageView()
		peperone5.image = imgPeperone
		peperone5.contentMode = .center
		peperone5.bounds = CGRect(x:0, y:0, width:150.0, height:222.0)
		peperone5__root.layer.position = CGPoint(x:-95.207, y:436.328)
		peperone5__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		peperone5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		peperone5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		peperoni.addSubview(peperone5__root)
		peperone5__root.addSubview(peperone5__xScale)
		peperone5__xScale.addSubview(peperone5__yScale)
		peperone5__yScale.addSubview(peperone5)
		peperoni.addSubview(peperone5__root)
		viewsByName["Peperone/5__root"] = peperone5__root
		viewsByName["Peperone/5__xScale"] = peperone5__xScale
		viewsByName["Peperone/5__yScale"] = peperone5__yScale
		viewsByName["Peperone/5"] = peperone5

		let peperone7__root = PizzaAnimationPassthroughView()
		let peperone7__xScale = PizzaAnimationPassthroughView()
		let peperone7__yScale = PizzaAnimationPassthroughView()
		let peperone7 = UIImageView()
		peperone7.image = imgPeperone
		peperone7.contentMode = .center
		peperone7.bounds = CGRect(x:0, y:0, width:150.0, height:222.0)
		peperone7__root.layer.position = CGPoint(x:555.336, y:157.223)
		peperone7__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		peperone7__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		peperone7__root.transform = CGAffineTransform(rotationAngle: 0.000)
		peperoni.addSubview(peperone7__root)
		peperone7__root.addSubview(peperone7__xScale)
		peperone7__xScale.addSubview(peperone7__yScale)
		peperone7__yScale.addSubview(peperone7)
		peperoni.addSubview(peperone7__root)
		viewsByName["Peperone/7__root"] = peperone7__root
		viewsByName["Peperone/7__xScale"] = peperone7__xScale
		viewsByName["Peperone/7__yScale"] = peperone7__yScale
		viewsByName["Peperone/7"] = peperone7

		let peperone8__root = PizzaAnimationPassthroughView()
		let peperone8__xScale = PizzaAnimationPassthroughView()
		let peperone8__yScale = PizzaAnimationPassthroughView()
		let peperone8 = UIImageView()
		peperone8.image = imgPeperone
		peperone8.contentMode = .center
		peperone8.bounds = CGRect(x:0, y:0, width:150.0, height:222.0)
		peperone8__root.layer.position = CGPoint(x:545.867, y:255.426)
		peperone8__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		peperone8__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		peperone8__root.transform = CGAffineTransform(rotationAngle: 0.000)
		peperoni.addSubview(peperone8__root)
		peperone8__root.addSubview(peperone8__xScale)
		peperone8__xScale.addSubview(peperone8__yScale)
		peperone8__yScale.addSubview(peperone8)
		peperoni.addSubview(peperone8__root)
		viewsByName["Peperone/8__root"] = peperone8__root
		viewsByName["Peperone/8__xScale"] = peperone8__xScale
		viewsByName["Peperone/8__yScale"] = peperone8__yScale
		viewsByName["Peperone/8"] = peperone8

		let peperone9__root = PizzaAnimationPassthroughView()
		let peperone9__xScale = PizzaAnimationPassthroughView()
		let peperone9__yScale = PizzaAnimationPassthroughView()
		let peperone9 = UIImageView()
		peperone9.image = imgPeperone
		peperone9.contentMode = .center
		peperone9.bounds = CGRect(x:0, y:0, width:150.0, height:222.0)
		peperone9__root.layer.position = CGPoint(x:548.062, y:406.200)
		peperone9__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		peperone9__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		peperone9__root.transform = CGAffineTransform(rotationAngle: 0.000)
		peperoni.addSubview(peperone9__root)
		peperone9__root.addSubview(peperone9__xScale)
		peperone9__xScale.addSubview(peperone9__yScale)
		peperone9__yScale.addSubview(peperone9)
		peperoni.addSubview(peperone9__root)
		viewsByName["Peperone/9__root"] = peperone9__root
		viewsByName["Peperone/9__xScale"] = peperone9__xScale
		viewsByName["Peperone/9__yScale"] = peperone9__yScale
		viewsByName["Peperone/9"] = peperone9

		let peperone12__root = PizzaAnimationPassthroughView()
		let peperone12__xScale = PizzaAnimationPassthroughView()
		let peperone12__yScale = PizzaAnimationPassthroughView()
		let peperone12 = UIImageView()
		peperone12.image = imgPeperone
		peperone12.contentMode = .center
		peperone12.bounds = CGRect(x:0, y:0, width:150.0, height:222.0)
		peperone12__root.layer.position = CGPoint(x:558.691, y:533.798)
		peperone12__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		peperone12__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		peperone12__root.transform = CGAffineTransform(rotationAngle: 0.000)
		peperoni.addSubview(peperone12__root)
		peperone12__root.addSubview(peperone12__xScale)
		peperone12__xScale.addSubview(peperone12__yScale)
		peperone12__yScale.addSubview(peperone12)
		peperoni.addSubview(peperone12__root)
		viewsByName["Peperone/12__root"] = peperone12__root
		viewsByName["Peperone/12__xScale"] = peperone12__xScale
		viewsByName["Peperone/12__yScale"] = peperone12__yScale
		viewsByName["Peperone/12"] = peperone12

		let tonno__root = PizzaAnimationPassthroughView()
		let tonno__xScale = PizzaAnimationPassthroughView()
		let tonno__yScale = PizzaAnimationPassthroughView()
		let tonno = UIView()
		tonno.bounds = CGRect(x:0, y:0, width:724.6, height:424.2)
		tonno__root.layer.position = CGPoint(x:166.877, y:-110.412)
		tonno__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		tonno__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		tonno__root.transform = CGAffineTransform(rotationAngle: 0.000)
		pizza.addSubview(tonno__root)
		tonno__root.addSubview(tonno__xScale)
		tonno__xScale.addSubview(tonno__yScale)
		tonno__yScale.addSubview(tonno)
		pizza.addSubview(tonno__root)
		viewsByName["Tonno__root"] = tonno__root
		viewsByName["Tonno__xScale"] = tonno__xScale
		viewsByName["Tonno__yScale"] = tonno__yScale
		viewsByName["Tonno"] = tonno

		let tonno1__root = PizzaAnimationPassthroughView()
		let tonno1__xScale = PizzaAnimationPassthroughView()
		let tonno1__yScale = PizzaAnimationPassthroughView()
		let tonno1 = UIImageView()
		let imgTonno1 = UIImage(named:"Tonno:1.png", in: bundle, compatibleWith: nil)
		if imgTonno1 == nil {
			print("** Warning: Could not create image from 'Tonno:1.png'")
		}
		tonno1.image = imgTonno1
		tonno1.contentMode = .center
		tonno1.bounds = CGRect(x:0, y:0, width:150.0, height:182.0)
		tonno1__root.layer.position = CGPoint(x:-87.520, y:307.543)
		tonno1__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		tonno1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		tonno1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		tonno.addSubview(tonno1__root)
		tonno1__root.addSubview(tonno1__xScale)
		tonno1__xScale.addSubview(tonno1__yScale)
		tonno1__yScale.addSubview(tonno1)
		tonno.addSubview(tonno1__root)
		viewsByName["Tonno/1__root"] = tonno1__root
		viewsByName["Tonno/1__xScale"] = tonno1__xScale
		viewsByName["Tonno/1__yScale"] = tonno1__yScale
		viewsByName["Tonno/1"] = tonno1

		let tonno4__root = PizzaAnimationPassthroughView()
		let tonno4__xScale = PizzaAnimationPassthroughView()
		let tonno4__yScale = PizzaAnimationPassthroughView()
		let tonno4 = UIImageView()
		let imgTonno4 = UIImage(named:"Tonno:4.png", in: bundle, compatibleWith: nil)
		if imgTonno4 == nil {
			print("** Warning: Could not create image from 'Tonno:4.png'")
		}
		tonno4.image = imgTonno4
		tonno4.contentMode = .center
		tonno4.bounds = CGRect(x:0, y:0, width:122.0, height:192.0)
		tonno4__root.layer.position = CGPoint(x:-45.559, y:178.848)
		tonno4__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		tonno4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		tonno4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		tonno.addSubview(tonno4__root)
		tonno4__root.addSubview(tonno4__xScale)
		tonno4__xScale.addSubview(tonno4__yScale)
		tonno4__yScale.addSubview(tonno4)
		tonno.addSubview(tonno4__root)
		viewsByName["Tonno/4__root"] = tonno4__root
		viewsByName["Tonno/4__xScale"] = tonno4__xScale
		viewsByName["Tonno/4__yScale"] = tonno4__yScale
		viewsByName["Tonno/4"] = tonno4

		let tonno5__root = PizzaAnimationPassthroughView()
		let tonno5__xScale = PizzaAnimationPassthroughView()
		let tonno5__yScale = PizzaAnimationPassthroughView()
		let tonno5 = UIImageView()
		tonno5.image = imgTonno1
		tonno5.contentMode = .center
		tonno5.bounds = CGRect(x:0, y:0, width:150.0, height:182.0)
		tonno5__root.layer.position = CGPoint(x:542.637, y:268.500)
		tonno5__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		tonno5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		tonno5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		tonno.addSubview(tonno5__root)
		tonno5__root.addSubview(tonno5__xScale)
		tonno5__xScale.addSubview(tonno5__yScale)
		tonno5__yScale.addSubview(tonno5)
		tonno.addSubview(tonno5__root)
		viewsByName["Tonno/5__root"] = tonno5__root
		viewsByName["Tonno/5__xScale"] = tonno5__xScale
		viewsByName["Tonno/5__yScale"] = tonno5__yScale
		viewsByName["Tonno/5"] = tonno5

		let tonno6__root = PizzaAnimationPassthroughView()
		let tonno6__xScale = PizzaAnimationPassthroughView()
		let tonno6__yScale = PizzaAnimationPassthroughView()
		let tonno6 = UIImageView()
		tonno6.image = imgTonno1
		tonno6.contentMode = .center
		tonno6.bounds = CGRect(x:0, y:0, width:150.0, height:182.0)
		tonno6__root.layer.position = CGPoint(x:543.262, y:465.969)
		tonno6__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		tonno6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		tonno6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		tonno.addSubview(tonno6__root)
		tonno6__root.addSubview(tonno6__xScale)
		tonno6__xScale.addSubview(tonno6__yScale)
		tonno6__yScale.addSubview(tonno6)
		tonno.addSubview(tonno6__root)
		viewsByName["Tonno/6__root"] = tonno6__root
		viewsByName["Tonno/6__xScale"] = tonno6__xScale
		viewsByName["Tonno/6__yScale"] = tonno6__yScale
		viewsByName["Tonno/6"] = tonno6

		let tonno9__root = PizzaAnimationPassthroughView()
		let tonno9__xScale = PizzaAnimationPassthroughView()
		let tonno9__yScale = PizzaAnimationPassthroughView()
		let tonno9 = UIImageView()
		let imgTonno2 = UIImage(named:"Tonno:2.png", in: bundle, compatibleWith: nil)
		if imgTonno2 == nil {
			print("** Warning: Could not create image from 'Tonno:2.png'")
		}
		tonno9.image = imgTonno2
		tonno9.contentMode = .center
		tonno9.bounds = CGRect(x:0, y:0, width:154.0, height:184.0)
		tonno9__root.layer.position = CGPoint(x:556.109, y:546.355)
		tonno9__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		tonno9__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		tonno9__root.transform = CGAffineTransform(rotationAngle: 0.000)
		tonno.addSubview(tonno9__root)
		tonno9__root.addSubview(tonno9__xScale)
		tonno9__xScale.addSubview(tonno9__yScale)
		tonno9__yScale.addSubview(tonno9)
		tonno.addSubview(tonno9__root)
		viewsByName["Tonno/9__root"] = tonno9__root
		viewsByName["Tonno/9__xScale"] = tonno9__xScale
		viewsByName["Tonno/9__yScale"] = tonno9__yScale
		viewsByName["Tonno/9"] = tonno9

		let tonno12__root = PizzaAnimationPassthroughView()
		let tonno12__xScale = PizzaAnimationPassthroughView()
		let tonno12__yScale = PizzaAnimationPassthroughView()
		let tonno12 = UIImageView()
		let imgTonno3 = UIImage(named:"Tonno:3.png", in: bundle, compatibleWith: nil)
		if imgTonno3 == nil {
			print("** Warning: Could not create image from 'Tonno:3.png'")
		}
		tonno12.image = imgTonno3
		tonno12.contentMode = .center
		tonno12.bounds = CGRect(x:0, y:0, width:152.0, height:196.0)
		tonno12__root.layer.position = CGPoint(x:545.695, y:160.191)
		tonno12__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		tonno12__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		tonno12__root.transform = CGAffineTransform(rotationAngle: 0.000)
		tonno.addSubview(tonno12__root)
		tonno12__root.addSubview(tonno12__xScale)
		tonno12__xScale.addSubview(tonno12__yScale)
		tonno12__yScale.addSubview(tonno12)
		tonno.addSubview(tonno12__root)
		viewsByName["Tonno/12__root"] = tonno12__root
		viewsByName["Tonno/12__xScale"] = tonno12__xScale
		viewsByName["Tonno/12__yScale"] = tonno12__yScale
		viewsByName["Tonno/12"] = tonno12

		let tonno15__root = PizzaAnimationPassthroughView()
		let tonno15__xScale = PizzaAnimationPassthroughView()
		let tonno15__yScale = PizzaAnimationPassthroughView()
		let tonno15 = UIImageView()
		tonno15.image = imgTonno4
		tonno15.contentMode = .center
		tonno15.bounds = CGRect(x:0, y:0, width:122.0, height:192.0)
		tonno15__root.layer.position = CGPoint(x:-28.344, y:343.211)
		tonno15__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		tonno15__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		tonno15__root.transform = CGAffineTransform(rotationAngle: 0.000)
		tonno.addSubview(tonno15__root)
		tonno15__root.addSubview(tonno15__xScale)
		tonno15__xScale.addSubview(tonno15__yScale)
		tonno15__yScale.addSubview(tonno15)
		tonno.addSubview(tonno15__root)
		viewsByName["Tonno/15__root"] = tonno15__root
		viewsByName["Tonno/15__xScale"] = tonno15__xScale
		viewsByName["Tonno/15__yScale"] = tonno15__yScale
		viewsByName["Tonno/15"] = tonno15

		let tonno18__root = PizzaAnimationPassthroughView()
		let tonno18__xScale = PizzaAnimationPassthroughView()
		let tonno18__yScale = PizzaAnimationPassthroughView()
		let tonno18 = UIImageView()
		tonno18.image = imgTonno4
		tonno18.contentMode = .center
		tonno18.bounds = CGRect(x:0, y:0, width:122.0, height:192.0)
		tonno18__root.layer.position = CGPoint(x:-29.418, y:522.336)
		tonno18__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		tonno18__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		tonno18__root.transform = CGAffineTransform(rotationAngle: 0.000)
		tonno.addSubview(tonno18__root)
		tonno18__root.addSubview(tonno18__xScale)
		tonno18__xScale.addSubview(tonno18__yScale)
		tonno18__yScale.addSubview(tonno18)
		tonno.addSubview(tonno18__root)
		viewsByName["Tonno/18__root"] = tonno18__root
		viewsByName["Tonno/18__xScale"] = tonno18__xScale
		viewsByName["Tonno/18__yScale"] = tonno18__yScale
		viewsByName["Tonno/18"] = tonno18

		let cipolla__root = PizzaAnimationPassthroughView()
		let cipolla__xScale = PizzaAnimationPassthroughView()
		let cipolla__yScale = PizzaAnimationPassthroughView()
		let cipolla = UIView()
		cipolla.bounds = CGRect(x:0, y:0, width:709.7, height:400.7)
		cipolla__root.layer.position = CGPoint(x:145.931, y:-122.232)
		cipolla__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		cipolla__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		cipolla__root.transform = CGAffineTransform(rotationAngle: 0.000)
		pizza.addSubview(cipolla__root)
		cipolla__root.addSubview(cipolla__xScale)
		cipolla__xScale.addSubview(cipolla__yScale)
		cipolla__yScale.addSubview(cipolla)
		pizza.addSubview(cipolla__root)
		viewsByName["Cipolla__root"] = cipolla__root
		viewsByName["Cipolla__xScale"] = cipolla__xScale
		viewsByName["Cipolla__yScale"] = cipolla__yScale
		viewsByName["Cipolla"] = cipolla

		let cipolla1__root = PizzaAnimationPassthroughView()
		let cipolla1__xScale = PizzaAnimationPassthroughView()
		let cipolla1__yScale = PizzaAnimationPassthroughView()
		let cipolla1 = UIImageView()
		let imgCipolla1 = UIImage(named:"Cipolla:1.png", in: bundle, compatibleWith: nil)
		if imgCipolla1 == nil {
			print("** Warning: Could not create image from 'Cipolla:1.png'")
		}
		cipolla1.image = imgCipolla1
		cipolla1.contentMode = .center
		cipolla1.bounds = CGRect(x:0, y:0, width:112.0, height:188.0)
		cipolla1__root.layer.position = CGPoint(x:-72.629, y:316.000)
		cipolla1__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		cipolla1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		cipolla1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		cipolla.addSubview(cipolla1__root)
		cipolla1__root.addSubview(cipolla1__xScale)
		cipolla1__xScale.addSubview(cipolla1__yScale)
		cipolla1__yScale.addSubview(cipolla1)
		cipolla.addSubview(cipolla1__root)
		viewsByName["Cipolla/1__root"] = cipolla1__root
		viewsByName["Cipolla/1__xScale"] = cipolla1__xScale
		viewsByName["Cipolla/1__yScale"] = cipolla1__yScale
		viewsByName["Cipolla/1"] = cipolla1

		let cipolla3__root = PizzaAnimationPassthroughView()
		let cipolla3__xScale = PizzaAnimationPassthroughView()
		let cipolla3__yScale = PizzaAnimationPassthroughView()
		let cipolla3 = UIImageView()
		let imgCipolla3 = UIImage(named:"Cipolla:3.png", in: bundle, compatibleWith: nil)
		if imgCipolla3 == nil {
			print("** Warning: Could not create image from 'Cipolla:3.png'")
		}
		cipolla3.image = imgCipolla3
		cipolla3.contentMode = .center
		cipolla3.bounds = CGRect(x:0, y:0, width:162.0, height:184.0)
		cipolla3__root.layer.position = CGPoint(x:-41.137, y:205.324)
		cipolla3__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		cipolla3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		cipolla3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		cipolla.addSubview(cipolla3__root)
		cipolla3__root.addSubview(cipolla3__xScale)
		cipolla3__xScale.addSubview(cipolla3__yScale)
		cipolla3__yScale.addSubview(cipolla3)
		cipolla.addSubview(cipolla3__root)
		viewsByName["Cipolla/3__root"] = cipolla3__root
		viewsByName["Cipolla/3__xScale"] = cipolla3__xScale
		viewsByName["Cipolla/3__yScale"] = cipolla3__yScale
		viewsByName["Cipolla/3"] = cipolla3

		let cipolla5__root = PizzaAnimationPassthroughView()
		let cipolla5__xScale = PizzaAnimationPassthroughView()
		let cipolla5__yScale = PizzaAnimationPassthroughView()
		let cipolla5 = UIImageView()
		cipolla5.image = imgCipolla1
		cipolla5.contentMode = .center
		cipolla5.bounds = CGRect(x:0, y:0, width:112.0, height:188.0)
		cipolla5__root.layer.position = CGPoint(x:570.719, y:539.336)
		cipolla5__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		cipolla5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		cipolla5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		cipolla.addSubview(cipolla5__root)
		cipolla5__root.addSubview(cipolla5__xScale)
		cipolla5__xScale.addSubview(cipolla5__yScale)
		cipolla5__yScale.addSubview(cipolla5)
		cipolla.addSubview(cipolla5__root)
		viewsByName["Cipolla/5__root"] = cipolla5__root
		viewsByName["Cipolla/5__xScale"] = cipolla5__xScale
		viewsByName["Cipolla/5__yScale"] = cipolla5__yScale
		viewsByName["Cipolla/5"] = cipolla5

		let cipolla7__root = PizzaAnimationPassthroughView()
		let cipolla7__xScale = PizzaAnimationPassthroughView()
		let cipolla7__yScale = PizzaAnimationPassthroughView()
		let cipolla7 = UIImageView()
		let imgCipolla2 = UIImage(named:"Cipolla:2.png", in: bundle, compatibleWith: nil)
		if imgCipolla2 == nil {
			print("** Warning: Could not create image from 'Cipolla:2.png'")
		}
		cipolla7.image = imgCipolla2
		cipolla7.contentMode = .center
		cipolla7.bounds = CGRect(x:0, y:0, width:118.0, height:266.0)
		cipolla7__root.layer.position = CGPoint(x:-73.809, y:429.895)
		cipolla7__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		cipolla7__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		cipolla7__root.transform = CGAffineTransform(rotationAngle: 0.000)
		cipolla.addSubview(cipolla7__root)
		cipolla7__root.addSubview(cipolla7__xScale)
		cipolla7__xScale.addSubview(cipolla7__yScale)
		cipolla7__yScale.addSubview(cipolla7)
		cipolla.addSubview(cipolla7__root)
		viewsByName["Cipolla/7__root"] = cipolla7__root
		viewsByName["Cipolla/7__xScale"] = cipolla7__xScale
		viewsByName["Cipolla/7__yScale"] = cipolla7__yScale
		viewsByName["Cipolla/7"] = cipolla7

		let cipolla8__root = PizzaAnimationPassthroughView()
		let cipolla8__xScale = PizzaAnimationPassthroughView()
		let cipolla8__yScale = PizzaAnimationPassthroughView()
		let cipolla8 = UIImageView()
		cipolla8.image = imgCipolla2
		cipolla8.contentMode = .center
		cipolla8.bounds = CGRect(x:0, y:0, width:118.0, height:266.0)
		cipolla8__root.layer.position = CGPoint(x:552.102, y:250.965)
		cipolla8__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		cipolla8__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		cipolla8__root.transform = CGAffineTransform(rotationAngle: 0.000)
		cipolla.addSubview(cipolla8__root)
		cipolla8__root.addSubview(cipolla8__xScale)
		cipolla8__xScale.addSubview(cipolla8__yScale)
		cipolla8__yScale.addSubview(cipolla8)
		cipolla.addSubview(cipolla8__root)
		viewsByName["Cipolla/8__root"] = cipolla8__root
		viewsByName["Cipolla/8__xScale"] = cipolla8__xScale
		viewsByName["Cipolla/8__yScale"] = cipolla8__yScale
		viewsByName["Cipolla/8"] = cipolla8

		let cipolla12__root = PizzaAnimationPassthroughView()
		let cipolla12__xScale = PizzaAnimationPassthroughView()
		let cipolla12__yScale = PizzaAnimationPassthroughView()
		let cipolla12 = UIImageView()
		cipolla12.image = imgCipolla3
		cipolla12.contentMode = .center
		cipolla12.bounds = CGRect(x:0, y:0, width:162.0, height:184.0)
		cipolla12__root.layer.position = CGPoint(x:552.676, y:384.000)
		cipolla12__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		cipolla12__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		cipolla12__root.transform = CGAffineTransform(rotationAngle: 0.000)
		cipolla.addSubview(cipolla12__root)
		cipolla12__root.addSubview(cipolla12__xScale)
		cipolla12__xScale.addSubview(cipolla12__yScale)
		cipolla12__yScale.addSubview(cipolla12)
		cipolla.addSubview(cipolla12__root)
		viewsByName["Cipolla/12__root"] = cipolla12__root
		viewsByName["Cipolla/12__xScale"] = cipolla12__xScale
		viewsByName["Cipolla/12__yScale"] = cipolla12__yScale
		viewsByName["Cipolla/12"] = cipolla12

		let emmenthal__root = PizzaAnimationPassthroughView()
		let emmenthal__xScale = PizzaAnimationPassthroughView()
		let emmenthal__yScale = PizzaAnimationPassthroughView()
		let emmenthal = UIView()
		emmenthal.bounds = CGRect(x:0, y:0, width:793.8, height:448.2)
		emmenthal__root.layer.position = CGPoint(x:78.253, y:20.286)
		emmenthal__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		emmenthal__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		emmenthal__root.transform = CGAffineTransform(rotationAngle: 0.003)
		pizza.addSubview(emmenthal__root)
		emmenthal__root.addSubview(emmenthal__xScale)
		emmenthal__xScale.addSubview(emmenthal__yScale)
		emmenthal__yScale.addSubview(emmenthal)
		pizza.addSubview(emmenthal__root)
		viewsByName["Emmenthal__root"] = emmenthal__root
		viewsByName["Emmenthal__xScale"] = emmenthal__xScale
		viewsByName["Emmenthal__yScale"] = emmenthal__yScale
		viewsByName["Emmenthal"] = emmenthal

		let emmenthal2__root = PizzaAnimationPassthroughView()
		let emmenthal2__xScale = PizzaAnimationPassthroughView()
		let emmenthal2__yScale = PizzaAnimationPassthroughView()
		let emmenthal2 = UIImageView()
		let imgEmmenthal2 = UIImage(named:"Emmenthal:2.png", in: bundle, compatibleWith: nil)
		if imgEmmenthal2 == nil {
			print("** Warning: Could not create image from 'Emmenthal:2.png'")
		}
		emmenthal2.image = imgEmmenthal2
		emmenthal2.contentMode = .center
		emmenthal2.bounds = CGRect(x:0, y:0, width:448.0, height:296.0)
		emmenthal2__root.layer.position = CGPoint(x:736.473, y:130.723)
		emmenthal2__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		emmenthal2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		emmenthal2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		emmenthal.addSubview(emmenthal2__root)
		emmenthal2__root.addSubview(emmenthal2__xScale)
		emmenthal2__xScale.addSubview(emmenthal2__yScale)
		emmenthal2__yScale.addSubview(emmenthal2)
		emmenthal.addSubview(emmenthal2__root)
		viewsByName["Emmenthal/2__root"] = emmenthal2__root
		viewsByName["Emmenthal/2__xScale"] = emmenthal2__xScale
		viewsByName["Emmenthal/2__yScale"] = emmenthal2__yScale
		viewsByName["Emmenthal/2"] = emmenthal2

		let emmenthal5__root = PizzaAnimationPassthroughView()
		let emmenthal5__xScale = PizzaAnimationPassthroughView()
		let emmenthal5__yScale = PizzaAnimationPassthroughView()
		let emmenthal5 = UIImageView()
		let imgEmmenthal5 = UIImage(named:"Emmenthal:5.png", in: bundle, compatibleWith: nil)
		if imgEmmenthal5 == nil {
			print("** Warning: Could not create image from 'Emmenthal:5.png'")
		}
		emmenthal5.image = imgEmmenthal5
		emmenthal5.contentMode = .center
		emmenthal5.bounds = CGRect(x:0, y:0, width:256.0, height:356.0)
		emmenthal5__root.layer.position = CGPoint(x:26.789, y:337.317)
		emmenthal5__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		emmenthal5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		emmenthal5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		emmenthal.addSubview(emmenthal5__root)
		emmenthal5__root.addSubview(emmenthal5__xScale)
		emmenthal5__xScale.addSubview(emmenthal5__yScale)
		emmenthal5__yScale.addSubview(emmenthal5)
		emmenthal.addSubview(emmenthal5__root)
		viewsByName["Emmenthal/5__root"] = emmenthal5__root
		viewsByName["Emmenthal/5__xScale"] = emmenthal5__xScale
		viewsByName["Emmenthal/5__yScale"] = emmenthal5__yScale
		viewsByName["Emmenthal/5"] = emmenthal5

		let emmenthal10__root = PizzaAnimationPassthroughView()
		let emmenthal10__xScale = PizzaAnimationPassthroughView()
		let emmenthal10__yScale = PizzaAnimationPassthroughView()
		let emmenthal10 = UIImageView()
		emmenthal10.image = imgEmmenthal5
		emmenthal10.contentMode = .center
		emmenthal10.bounds = CGRect(x:0, y:0, width:256.0, height:356.0)
		emmenthal10__root.layer.position = CGPoint(x:755.262, y:412.614)
		emmenthal10__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		emmenthal10__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		emmenthal10__root.transform = CGAffineTransform(rotationAngle: 0.000)
		emmenthal.addSubview(emmenthal10__root)
		emmenthal10__root.addSubview(emmenthal10__xScale)
		emmenthal10__xScale.addSubview(emmenthal10__yScale)
		emmenthal10__yScale.addSubview(emmenthal10)
		emmenthal.addSubview(emmenthal10__root)
		viewsByName["Emmenthal/10__root"] = emmenthal10__root
		viewsByName["Emmenthal/10__xScale"] = emmenthal10__xScale
		viewsByName["Emmenthal/10__yScale"] = emmenthal10__yScale
		viewsByName["Emmenthal/10"] = emmenthal10

		let emmenthal6__root = PizzaAnimationPassthroughView()
		let emmenthal6__xScale = PizzaAnimationPassthroughView()
		let emmenthal6__yScale = PizzaAnimationPassthroughView()
		let emmenthal6 = UIImageView()
		let imgEmmenthal6 = UIImage(named:"Emmenthal:6.png", in: bundle, compatibleWith: nil)
		if imgEmmenthal6 == nil {
			print("** Warning: Could not create image from 'Emmenthal:6.png'")
		}
		emmenthal6.image = imgEmmenthal6
		emmenthal6.contentMode = .center
		emmenthal6.bounds = CGRect(x:0, y:0, width:312.0, height:218.0)
		emmenthal6__root.layer.position = CGPoint(x:91.132, y:285.969)
		emmenthal6__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		emmenthal6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		emmenthal6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		emmenthal.addSubview(emmenthal6__root)
		emmenthal6__root.addSubview(emmenthal6__xScale)
		emmenthal6__xScale.addSubview(emmenthal6__yScale)
		emmenthal6__yScale.addSubview(emmenthal6)
		emmenthal.addSubview(emmenthal6__root)
		viewsByName["Emmenthal/6__root"] = emmenthal6__root
		viewsByName["Emmenthal/6__xScale"] = emmenthal6__xScale
		viewsByName["Emmenthal/6__yScale"] = emmenthal6__yScale
		viewsByName["Emmenthal/6"] = emmenthal6

		let emmenthal8__root = PizzaAnimationPassthroughView()
		let emmenthal8__xScale = PizzaAnimationPassthroughView()
		let emmenthal8__yScale = PizzaAnimationPassthroughView()
		let emmenthal8 = UIImageView()
		let imgEmmenthal8 = UIImage(named:"Emmenthal:8.png", in: bundle, compatibleWith: nil)
		if imgEmmenthal8 == nil {
			print("** Warning: Could not create image from 'Emmenthal:8.png'")
		}
		emmenthal8.image = imgEmmenthal8
		emmenthal8.contentMode = .center
		emmenthal8.bounds = CGRect(x:0, y:0, width:278.0, height:240.0)
		emmenthal8__root.layer.position = CGPoint(x:80.621, y:160.770)
		emmenthal8__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		emmenthal8__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		emmenthal8__root.transform = CGAffineTransform(rotationAngle: 0.000)
		emmenthal.addSubview(emmenthal8__root)
		emmenthal8__root.addSubview(emmenthal8__xScale)
		emmenthal8__xScale.addSubview(emmenthal8__yScale)
		emmenthal8__yScale.addSubview(emmenthal8)
		emmenthal.addSubview(emmenthal8__root)
		viewsByName["Emmenthal/8__root"] = emmenthal8__root
		viewsByName["Emmenthal/8__xScale"] = emmenthal8__xScale
		viewsByName["Emmenthal/8__yScale"] = emmenthal8__yScale
		viewsByName["Emmenthal/8"] = emmenthal8

		let emmenthal12__root = PizzaAnimationPassthroughView()
		let emmenthal12__xScale = PizzaAnimationPassthroughView()
		let emmenthal12__yScale = PizzaAnimationPassthroughView()
		let emmenthal12 = UIImageView()
		let imgEmmenthal9 = UIImage(named:"Emmenthal:9.png", in: bundle, compatibleWith: nil)
		if imgEmmenthal9 == nil {
			print("** Warning: Could not create image from 'Emmenthal:9.png'")
		}
		emmenthal12.image = imgEmmenthal9
		emmenthal12.contentMode = .center
		emmenthal12.bounds = CGRect(x:0, y:0, width:294.0, height:248.0)
		emmenthal12__root.layer.position = CGPoint(x:764.363, y:277.282)
		emmenthal12__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		emmenthal12__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		emmenthal12__root.transform = CGAffineTransform(rotationAngle: 0.000)
		emmenthal.addSubview(emmenthal12__root)
		emmenthal12__root.addSubview(emmenthal12__xScale)
		emmenthal12__xScale.addSubview(emmenthal12__yScale)
		emmenthal12__yScale.addSubview(emmenthal12)
		emmenthal.addSubview(emmenthal12__root)
		viewsByName["Emmenthal/12__root"] = emmenthal12__root
		viewsByName["Emmenthal/12__xScale"] = emmenthal12__xScale
		viewsByName["Emmenthal/12__yScale"] = emmenthal12__yScale
		viewsByName["Emmenthal/12"] = emmenthal12

		let gorgonzola__root = PizzaAnimationPassthroughView()
		let gorgonzola__xScale = PizzaAnimationPassthroughView()
		let gorgonzola__yScale = PizzaAnimationPassthroughView()
		let gorgonzola = UIView()
		gorgonzola.bounds = CGRect(x:0, y:0, width:798.1, height:448.3)
		gorgonzola__root.layer.position = CGPoint(x:68.874, y:18.335)
		gorgonzola__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		gorgonzola__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		gorgonzola__root.transform = CGAffineTransform(rotationAngle: 0.003)
		pizza.addSubview(gorgonzola__root)
		gorgonzola__root.addSubview(gorgonzola__xScale)
		gorgonzola__xScale.addSubview(gorgonzola__yScale)
		gorgonzola__yScale.addSubview(gorgonzola)
		pizza.addSubview(gorgonzola__root)
		viewsByName["Gorgonzola__root"] = gorgonzola__root
		viewsByName["Gorgonzola__xScale"] = gorgonzola__xScale
		viewsByName["Gorgonzola__yScale"] = gorgonzola__yScale
		viewsByName["Gorgonzola"] = gorgonzola

		let gorgonzola1__root = PizzaAnimationPassthroughView()
		let gorgonzola1__xScale = PizzaAnimationPassthroughView()
		let gorgonzola1__yScale = PizzaAnimationPassthroughView()
		let gorgonzola1 = UIImageView()
		let imgGorgonzola1 = UIImage(named:"Gorgonzola:1.png", in: bundle, compatibleWith: nil)
		if imgGorgonzola1 == nil {
			print("** Warning: Could not create image from 'Gorgonzola:1.png'")
		}
		gorgonzola1.image = imgGorgonzola1
		gorgonzola1.contentMode = .center
		gorgonzola1.bounds = CGRect(x:0, y:0, width:256.0, height:356.0)
		gorgonzola1__root.layer.position = CGPoint(x:97.302, y:338.485)
		gorgonzola1__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		gorgonzola1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		gorgonzola1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		gorgonzola.addSubview(gorgonzola1__root)
		gorgonzola1__root.addSubview(gorgonzola1__xScale)
		gorgonzola1__xScale.addSubview(gorgonzola1__yScale)
		gorgonzola1__yScale.addSubview(gorgonzola1)
		gorgonzola.addSubview(gorgonzola1__root)
		viewsByName["Gorgonzola/1__root"] = gorgonzola1__root
		viewsByName["Gorgonzola/1__xScale"] = gorgonzola1__xScale
		viewsByName["Gorgonzola/1__yScale"] = gorgonzola1__yScale
		viewsByName["Gorgonzola/1"] = gorgonzola1

		let gorgonzola7__root = PizzaAnimationPassthroughView()
		let gorgonzola7__xScale = PizzaAnimationPassthroughView()
		let gorgonzola7__yScale = PizzaAnimationPassthroughView()
		let gorgonzola7 = UIImageView()
		let imgGorgonzola2 = UIImage(named:"Gorgonzola:2.png", in: bundle, compatibleWith: nil)
		if imgGorgonzola2 == nil {
			print("** Warning: Could not create image from 'Gorgonzola:2.png'")
		}
		gorgonzola7.image = imgGorgonzola2
		gorgonzola7.contentMode = .center
		gorgonzola7.bounds = CGRect(x:0, y:0, width:312.0, height:220.0)
		gorgonzola7__root.layer.position = CGPoint(x:766.923, y:196.708)
		gorgonzola7__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		gorgonzola7__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		gorgonzola7__root.transform = CGAffineTransform(rotationAngle: 0.000)
		gorgonzola.addSubview(gorgonzola7__root)
		gorgonzola7__root.addSubview(gorgonzola7__xScale)
		gorgonzola7__xScale.addSubview(gorgonzola7__yScale)
		gorgonzola7__yScale.addSubview(gorgonzola7)
		gorgonzola.addSubview(gorgonzola7__root)
		viewsByName["Gorgonzola/7__root"] = gorgonzola7__root
		viewsByName["Gorgonzola/7__xScale"] = gorgonzola7__xScale
		viewsByName["Gorgonzola/7__yScale"] = gorgonzola7__yScale
		viewsByName["Gorgonzola/7"] = gorgonzola7

		let gorgonzola8__root = PizzaAnimationPassthroughView()
		let gorgonzola8__xScale = PizzaAnimationPassthroughView()
		let gorgonzola8__yScale = PizzaAnimationPassthroughView()
		let gorgonzola8 = UIImageView()
		let imgGorgonzola3 = UIImage(named:"Gorgonzola:3.png", in: bundle, compatibleWith: nil)
		if imgGorgonzola3 == nil {
			print("** Warning: Could not create image from 'Gorgonzola:3.png'")
		}
		gorgonzola8.image = imgGorgonzola3
		gorgonzola8.contentMode = .center
		gorgonzola8.bounds = CGRect(x:0, y:0, width:294.0, height:240.0)
		gorgonzola8__root.layer.position = CGPoint(x:692.788, y:116.763)
		gorgonzola8__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		gorgonzola8__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		gorgonzola8__root.transform = CGAffineTransform(rotationAngle: 0.000)
		gorgonzola.addSubview(gorgonzola8__root)
		gorgonzola8__root.addSubview(gorgonzola8__xScale)
		gorgonzola8__xScale.addSubview(gorgonzola8__yScale)
		gorgonzola8__yScale.addSubview(gorgonzola8)
		gorgonzola.addSubview(gorgonzola8__root)
		viewsByName["Gorgonzola/8__root"] = gorgonzola8__root
		viewsByName["Gorgonzola/8__xScale"] = gorgonzola8__xScale
		viewsByName["Gorgonzola/8__yScale"] = gorgonzola8__yScale
		viewsByName["Gorgonzola/8"] = gorgonzola8

		let gorgonzola4__root = PizzaAnimationPassthroughView()
		let gorgonzola4__xScale = PizzaAnimationPassthroughView()
		let gorgonzola4__yScale = PizzaAnimationPassthroughView()
		let gorgonzola4 = UIImageView()
		let imgGorgonzola4 = UIImage(named:"Gorgonzola:4.png", in: bundle, compatibleWith: nil)
		if imgGorgonzola4 == nil {
			print("** Warning: Could not create image from 'Gorgonzola:4.png'")
		}
		gorgonzola4.image = imgGorgonzola4
		gorgonzola4.contentMode = .center
		gorgonzola4.bounds = CGRect(x:0, y:0, width:390.0, height:332.0)
		gorgonzola4__root.layer.position = CGPoint(x:64.805, y:155.860)
		gorgonzola4__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		gorgonzola4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		gorgonzola4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		gorgonzola.addSubview(gorgonzola4__root)
		gorgonzola4__root.addSubview(gorgonzola4__xScale)
		gorgonzola4__xScale.addSubview(gorgonzola4__yScale)
		gorgonzola4__yScale.addSubview(gorgonzola4)
		gorgonzola.addSubview(gorgonzola4__root)
		viewsByName["Gorgonzola/4__root"] = gorgonzola4__root
		viewsByName["Gorgonzola/4__xScale"] = gorgonzola4__xScale
		viewsByName["Gorgonzola/4__yScale"] = gorgonzola4__yScale
		viewsByName["Gorgonzola/4"] = gorgonzola4

		let gorgonzola5__root = PizzaAnimationPassthroughView()
		let gorgonzola5__xScale = PizzaAnimationPassthroughView()
		let gorgonzola5__yScale = PizzaAnimationPassthroughView()
		let gorgonzola5 = UIImageView()
		let imgGorgonzola5 = UIImage(named:"Gorgonzola:5.png", in: bundle, compatibleWith: nil)
		if imgGorgonzola5 == nil {
			print("** Warning: Could not create image from 'Gorgonzola:5.png'")
		}
		gorgonzola5.image = imgGorgonzola5
		gorgonzola5.contentMode = .center
		gorgonzola5.bounds = CGRect(x:0, y:0, width:320.0, height:294.0)
		gorgonzola5__root.layer.position = CGPoint(x:101.895, y:81.618)
		gorgonzola5__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		gorgonzola5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		gorgonzola5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		gorgonzola.addSubview(gorgonzola5__root)
		gorgonzola5__root.addSubview(gorgonzola5__xScale)
		gorgonzola5__xScale.addSubview(gorgonzola5__yScale)
		gorgonzola5__yScale.addSubview(gorgonzola5)
		gorgonzola.addSubview(gorgonzola5__root)
		viewsByName["Gorgonzola/5__root"] = gorgonzola5__root
		viewsByName["Gorgonzola/5__xScale"] = gorgonzola5__xScale
		viewsByName["Gorgonzola/5__yScale"] = gorgonzola5__yScale
		viewsByName["Gorgonzola/5"] = gorgonzola5

		let gorgonzola12__root = PizzaAnimationPassthroughView()
		let gorgonzola12__xScale = PizzaAnimationPassthroughView()
		let gorgonzola12__yScale = PizzaAnimationPassthroughView()
		let gorgonzola12 = UIImageView()
		gorgonzola12.image = imgGorgonzola5
		gorgonzola12.contentMode = .center
		gorgonzola12.bounds = CGRect(x:0, y:0, width:320.0, height:294.0)
		gorgonzola12__root.layer.position = CGPoint(x:752.751, y:341.352)
		gorgonzola12__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		gorgonzola12__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		gorgonzola12__root.transform = CGAffineTransform(rotationAngle: 0.000)
		gorgonzola.addSubview(gorgonzola12__root)
		gorgonzola12__root.addSubview(gorgonzola12__xScale)
		gorgonzola12__xScale.addSubview(gorgonzola12__yScale)
		gorgonzola12__yScale.addSubview(gorgonzola12)
		gorgonzola.addSubview(gorgonzola12__root)
		viewsByName["Gorgonzola/12__root"] = gorgonzola12__root
		viewsByName["Gorgonzola/12__xScale"] = gorgonzola12__xScale
		viewsByName["Gorgonzola/12__yScale"] = gorgonzola12__yScale
		viewsByName["Gorgonzola/12"] = gorgonzola12

		let prosciuttoCrudo__root = PizzaAnimationPassthroughView()
		let prosciuttoCrudo__xScale = PizzaAnimationPassthroughView()
		let prosciuttoCrudo__yScale = PizzaAnimationPassthroughView()
		let prosciuttoCrudo = UIView()
		prosciuttoCrudo.bounds = CGRect(x:0, y:0, width:857.0, height:514.4)
		prosciuttoCrudo__root.layer.position = CGPoint(x:72.529, y:81.410)
		prosciuttoCrudo__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		prosciuttoCrudo__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		prosciuttoCrudo__root.transform = CGAffineTransform(rotationAngle: 0.003)
		pizza.addSubview(prosciuttoCrudo__root)
		prosciuttoCrudo__root.addSubview(prosciuttoCrudo__xScale)
		prosciuttoCrudo__xScale.addSubview(prosciuttoCrudo__yScale)
		prosciuttoCrudo__yScale.addSubview(prosciuttoCrudo)
		pizza.addSubview(prosciuttoCrudo__root)
		viewsByName["ProsciuttoCrudo__root"] = prosciuttoCrudo__root
		viewsByName["ProsciuttoCrudo__xScale"] = prosciuttoCrudo__xScale
		viewsByName["ProsciuttoCrudo__yScale"] = prosciuttoCrudo__yScale
		viewsByName["ProsciuttoCrudo"] = prosciuttoCrudo

		let prosciuttoCrudo4__root = PizzaAnimationPassthroughView()
		let prosciuttoCrudo4__xScale = PizzaAnimationPassthroughView()
		let prosciuttoCrudo4__yScale = PizzaAnimationPassthroughView()
		let prosciuttoCrudo4 = UIImageView()
		let imgProsciuttoCrudo1 = UIImage(named:"Prosciutto:Crudo:1.png", in: bundle, compatibleWith: nil)
		if imgProsciuttoCrudo1 == nil {
			print("** Warning: Could not create image from 'Prosciutto:Crudo:1.png'")
		}
		prosciuttoCrudo4.image = imgProsciuttoCrudo1
		prosciuttoCrudo4.contentMode = .center
		prosciuttoCrudo4.bounds = CGRect(x:0, y:0, width:488.0, height:318.0)
		prosciuttoCrudo4__root.layer.position = CGPoint(x:760.323, y:31.800)
		prosciuttoCrudo4__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		prosciuttoCrudo4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		prosciuttoCrudo4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		prosciuttoCrudo.addSubview(prosciuttoCrudo4__root)
		prosciuttoCrudo4__root.addSubview(prosciuttoCrudo4__xScale)
		prosciuttoCrudo4__xScale.addSubview(prosciuttoCrudo4__yScale)
		prosciuttoCrudo4__yScale.addSubview(prosciuttoCrudo4)
		prosciuttoCrudo.addSubview(prosciuttoCrudo4__root)
		viewsByName["Prosciutto/Crudo/4__root"] = prosciuttoCrudo4__root
		viewsByName["Prosciutto/Crudo/4__xScale"] = prosciuttoCrudo4__xScale
		viewsByName["Prosciutto/Crudo/4__yScale"] = prosciuttoCrudo4__yScale
		viewsByName["Prosciutto/Crudo/4"] = prosciuttoCrudo4

		let prosciuttoCrudo5__root = PizzaAnimationPassthroughView()
		let prosciuttoCrudo5__xScale = PizzaAnimationPassthroughView()
		let prosciuttoCrudo5__yScale = PizzaAnimationPassthroughView()
		let prosciuttoCrudo5 = UIImageView()
		prosciuttoCrudo5.image = imgProsciuttoCrudo1
		prosciuttoCrudo5.contentMode = .center
		prosciuttoCrudo5.bounds = CGRect(x:0, y:0, width:488.0, height:318.0)
		prosciuttoCrudo5__root.layer.position = CGPoint(x:48.800, y:446.191)
		prosciuttoCrudo5__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		prosciuttoCrudo5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		prosciuttoCrudo5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		prosciuttoCrudo.addSubview(prosciuttoCrudo5__root)
		prosciuttoCrudo5__root.addSubview(prosciuttoCrudo5__xScale)
		prosciuttoCrudo5__xScale.addSubview(prosciuttoCrudo5__yScale)
		prosciuttoCrudo5__yScale.addSubview(prosciuttoCrudo5)
		prosciuttoCrudo.addSubview(prosciuttoCrudo5__root)
		viewsByName["Prosciutto/Crudo/5__root"] = prosciuttoCrudo5__root
		viewsByName["Prosciutto/Crudo/5__xScale"] = prosciuttoCrudo5__xScale
		viewsByName["Prosciutto/Crudo/5__yScale"] = prosciuttoCrudo5__yScale
		viewsByName["Prosciutto/Crudo/5"] = prosciuttoCrudo5

		let prosciuttoCrudo2__root = PizzaAnimationPassthroughView()
		let prosciuttoCrudo2__xScale = PizzaAnimationPassthroughView()
		let prosciuttoCrudo2__yScale = PizzaAnimationPassthroughView()
		let prosciuttoCrudo2 = UIImageView()
		let imgProsciuttoCrudo2 = UIImage(named:"Prosciutto:Crudo:2.png", in: bundle, compatibleWith: nil)
		if imgProsciuttoCrudo2 == nil {
			print("** Warning: Could not create image from 'Prosciutto:Crudo:2.png'")
		}
		prosciuttoCrudo2.image = imgProsciuttoCrudo2
		prosciuttoCrudo2.contentMode = .center
		prosciuttoCrudo2.bounds = CGRect(x:0, y:0, width:482.0, height:310.0)
		prosciuttoCrudo2__root.layer.position = CGPoint(x:81.152, y:205.136)
		prosciuttoCrudo2__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		prosciuttoCrudo2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		prosciuttoCrudo2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		prosciuttoCrudo.addSubview(prosciuttoCrudo2__root)
		prosciuttoCrudo2__root.addSubview(prosciuttoCrudo2__xScale)
		prosciuttoCrudo2__xScale.addSubview(prosciuttoCrudo2__yScale)
		prosciuttoCrudo2__yScale.addSubview(prosciuttoCrudo2)
		prosciuttoCrudo.addSubview(prosciuttoCrudo2__root)
		viewsByName["Prosciutto/Crudo/2__root"] = prosciuttoCrudo2__root
		viewsByName["Prosciutto/Crudo/2__xScale"] = prosciuttoCrudo2__xScale
		viewsByName["Prosciutto/Crudo/2__yScale"] = prosciuttoCrudo2__yScale
		viewsByName["Prosciutto/Crudo/2"] = prosciuttoCrudo2

		let prosciuttoCrudo3__root = PizzaAnimationPassthroughView()
		let prosciuttoCrudo3__xScale = PizzaAnimationPassthroughView()
		let prosciuttoCrudo3__yScale = PizzaAnimationPassthroughView()
		let prosciuttoCrudo3 = UIImageView()
		let imgProsciuttoCrudo3 = UIImage(named:"Prosciutto:Crudo:3.png", in: bundle, compatibleWith: nil)
		if imgProsciuttoCrudo3 == nil {
			print("** Warning: Could not create image from 'Prosciutto:Crudo:3.png'")
		}
		prosciuttoCrudo3.image = imgProsciuttoCrudo3
		prosciuttoCrudo3.contentMode = .center
		prosciuttoCrudo3.bounds = CGRect(x:0, y:0, width:480.0, height:330.0)
		prosciuttoCrudo3__root.layer.position = CGPoint(x:84.847, y:51.230)
		prosciuttoCrudo3__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		prosciuttoCrudo3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		prosciuttoCrudo3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		prosciuttoCrudo.addSubview(prosciuttoCrudo3__root)
		prosciuttoCrudo3__root.addSubview(prosciuttoCrudo3__xScale)
		prosciuttoCrudo3__xScale.addSubview(prosciuttoCrudo3__yScale)
		prosciuttoCrudo3__yScale.addSubview(prosciuttoCrudo3)
		prosciuttoCrudo.addSubview(prosciuttoCrudo3__root)
		viewsByName["Prosciutto/Crudo/3__root"] = prosciuttoCrudo3__root
		viewsByName["Prosciutto/Crudo/3__xScale"] = prosciuttoCrudo3__xScale
		viewsByName["Prosciutto/Crudo/3__yScale"] = prosciuttoCrudo3__yScale
		viewsByName["Prosciutto/Crudo/3"] = prosciuttoCrudo3

		let prosciuttoCrudo7__root = PizzaAnimationPassthroughView()
		let prosciuttoCrudo7__xScale = PizzaAnimationPassthroughView()
		let prosciuttoCrudo7__yScale = PizzaAnimationPassthroughView()
		let prosciuttoCrudo7 = UIImageView()
		prosciuttoCrudo7.image = imgProsciuttoCrudo3
		prosciuttoCrudo7.contentMode = .center
		prosciuttoCrudo7.bounds = CGRect(x:0, y:0, width:480.0, height:330.0)
		prosciuttoCrudo7__root.layer.position = CGPoint(x:782.886, y:481.425)
		prosciuttoCrudo7__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		prosciuttoCrudo7__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		prosciuttoCrudo7__root.transform = CGAffineTransform(rotationAngle: 0.000)
		prosciuttoCrudo.addSubview(prosciuttoCrudo7__root)
		prosciuttoCrudo7__root.addSubview(prosciuttoCrudo7__xScale)
		prosciuttoCrudo7__xScale.addSubview(prosciuttoCrudo7__yScale)
		prosciuttoCrudo7__yScale.addSubview(prosciuttoCrudo7)
		prosciuttoCrudo.addSubview(prosciuttoCrudo7__root)
		viewsByName["Prosciutto/Crudo/7__root"] = prosciuttoCrudo7__root
		viewsByName["Prosciutto/Crudo/7__xScale"] = prosciuttoCrudo7__xScale
		viewsByName["Prosciutto/Crudo/7__yScale"] = prosciuttoCrudo7__yScale
		viewsByName["Prosciutto/Crudo/7"] = prosciuttoCrudo7

		let prosciuttoCrudo9__root = PizzaAnimationPassthroughView()
		let prosciuttoCrudo9__xScale = PizzaAnimationPassthroughView()
		let prosciuttoCrudo9__yScale = PizzaAnimationPassthroughView()
		let prosciuttoCrudo9 = UIImageView()
		prosciuttoCrudo9.image = imgProsciuttoCrudo3
		prosciuttoCrudo9.contentMode = .center
		prosciuttoCrudo9.bounds = CGRect(x:0, y:0, width:480.0, height:330.0)
		prosciuttoCrudo9__root.layer.position = CGPoint(x:808.987, y:112.823)
		prosciuttoCrudo9__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		prosciuttoCrudo9__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		prosciuttoCrudo9__root.transform = CGAffineTransform(rotationAngle: 0.000)
		prosciuttoCrudo.addSubview(prosciuttoCrudo9__root)
		prosciuttoCrudo9__root.addSubview(prosciuttoCrudo9__xScale)
		prosciuttoCrudo9__xScale.addSubview(prosciuttoCrudo9__yScale)
		prosciuttoCrudo9__yScale.addSubview(prosciuttoCrudo9)
		prosciuttoCrudo.addSubview(prosciuttoCrudo9__root)
		viewsByName["Prosciutto/Crudo/9__root"] = prosciuttoCrudo9__root
		viewsByName["Prosciutto/Crudo/9__xScale"] = prosciuttoCrudo9__xScale
		viewsByName["Prosciutto/Crudo/9__yScale"] = prosciuttoCrudo9__yScale
		viewsByName["Prosciutto/Crudo/9"] = prosciuttoCrudo9

		let grana__root = PizzaAnimationPassthroughView()
		let grana__xScale = PizzaAnimationPassthroughView()
		let grana__yScale = PizzaAnimationPassthroughView()
		let grana = UIView()
		grana.bounds = CGRect(x:0, y:0, width:746.4, height:367.6)
		grana__root.layer.position = CGPoint(x:75.461, y:27.927)
		grana__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		grana__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		grana__root.transform = CGAffineTransform(rotationAngle: 0.003)
		pizza.addSubview(grana__root)
		grana__root.addSubview(grana__xScale)
		grana__xScale.addSubview(grana__yScale)
		grana__yScale.addSubview(grana)
		pizza.addSubview(grana__root)
		viewsByName["Grana__root"] = grana__root
		viewsByName["Grana__xScale"] = grana__xScale
		viewsByName["Grana__yScale"] = grana__yScale
		viewsByName["Grana"] = grana

		let grana1__root = PizzaAnimationPassthroughView()
		let grana1__xScale = PizzaAnimationPassthroughView()
		let grana1__yScale = PizzaAnimationPassthroughView()
		let grana1 = UIImageView()
		let imgGrana1 = UIImage(named:"Grana:1.png", in: bundle, compatibleWith: nil)
		if imgGrana1 == nil {
			print("** Warning: Could not create image from 'Grana:1.png'")
		}
		grana1.image = imgGrana1
		grana1.contentMode = .center
		grana1.bounds = CGRect(x:0, y:0, width:182.0, height:128.0)
		grana1__root.layer.position = CGPoint(x:18.200, y:113.397)
		grana1__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		grana1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		grana1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		grana.addSubview(grana1__root)
		grana1__root.addSubview(grana1__xScale)
		grana1__xScale.addSubview(grana1__yScale)
		grana1__yScale.addSubview(grana1)
		grana.addSubview(grana1__root)
		viewsByName["Grana/1__root"] = grana1__root
		viewsByName["Grana/1__xScale"] = grana1__xScale
		viewsByName["Grana/1__yScale"] = grana1__yScale
		viewsByName["Grana/1"] = grana1

		let grana3__root = PizzaAnimationPassthroughView()
		let grana3__xScale = PizzaAnimationPassthroughView()
		let grana3__yScale = PizzaAnimationPassthroughView()
		let grana3 = UIImageView()
		let imgGrana3 = UIImage(named:"Grana:3.png", in: bundle, compatibleWith: nil)
		if imgGrana3 == nil {
			print("** Warning: Could not create image from 'Grana:3.png'")
		}
		grana3.image = imgGrana3
		grana3.contentMode = .center
		grana3.bounds = CGRect(x:0, y:0, width:154.0, height:176.0)
		grana3__root.layer.position = CGPoint(x:38.630, y:17.600)
		grana3__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		grana3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		grana3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		grana.addSubview(grana3__root)
		grana3__root.addSubview(grana3__xScale)
		grana3__xScale.addSubview(grana3__yScale)
		grana3__yScale.addSubview(grana3)
		grana.addSubview(grana3__root)
		viewsByName["Grana/3__root"] = grana3__root
		viewsByName["Grana/3__xScale"] = grana3__xScale
		viewsByName["Grana/3__yScale"] = grana3__yScale
		viewsByName["Grana/3"] = grana3

		let grana4__root = PizzaAnimationPassthroughView()
		let grana4__xScale = PizzaAnimationPassthroughView()
		let grana4__yScale = PizzaAnimationPassthroughView()
		let grana4 = UIImageView()
		grana4.image = imgGrana1
		grana4.contentMode = .center
		grana4.bounds = CGRect(x:0, y:0, width:182.0, height:128.0)
		grana4__root.layer.position = CGPoint(x:728.161, y:134.788)
		grana4__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		grana4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		grana4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		grana.addSubview(grana4__root)
		grana4__root.addSubview(grana4__xScale)
		grana4__xScale.addSubview(grana4__yScale)
		grana4__yScale.addSubview(grana4)
		grana.addSubview(grana4__root)
		viewsByName["Grana/4__root"] = grana4__root
		viewsByName["Grana/4__xScale"] = grana4__xScale
		viewsByName["Grana/4__yScale"] = grana4__yScale
		viewsByName["Grana/4"] = grana4

		let grana5__root = PizzaAnimationPassthroughView()
		let grana5__xScale = PizzaAnimationPassthroughView()
		let grana5__yScale = PizzaAnimationPassthroughView()
		let grana5 = UIImageView()
		grana5.image = imgGrana1
		grana5.contentMode = .center
		grana5.bounds = CGRect(x:0, y:0, width:182.0, height:128.0)
		grana5__root.layer.position = CGPoint(x:60.028, y:228.994)
		grana5__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		grana5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		grana5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		grana.addSubview(grana5__root)
		grana5__root.addSubview(grana5__xScale)
		grana5__xScale.addSubview(grana5__yScale)
		grana5__yScale.addSubview(grana5)
		grana.addSubview(grana5__root)
		viewsByName["Grana/5__root"] = grana5__root
		viewsByName["Grana/5__xScale"] = grana5__xScale
		viewsByName["Grana/5__yScale"] = grana5__yScale
		viewsByName["Grana/5"] = grana5

		let grana7__root = PizzaAnimationPassthroughView()
		let grana7__xScale = PizzaAnimationPassthroughView()
		let grana7__yScale = PizzaAnimationPassthroughView()
		let grana7 = UIImageView()
		grana7.image = imgGrana1
		grana7.contentMode = .center
		grana7.bounds = CGRect(x:0, y:0, width:182.0, height:128.0)
		grana7__root.layer.position = CGPoint(x:674.223, y:32.150)
		grana7__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		grana7__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		grana7__root.transform = CGAffineTransform(rotationAngle: 0.000)
		grana.addSubview(grana7__root)
		grana7__root.addSubview(grana7__xScale)
		grana7__xScale.addSubview(grana7__yScale)
		grana7__yScale.addSubview(grana7)
		grana.addSubview(grana7__root)
		viewsByName["Grana/7__root"] = grana7__root
		viewsByName["Grana/7__xScale"] = grana7__xScale
		viewsByName["Grana/7__yScale"] = grana7__yScale
		viewsByName["Grana/7"] = grana7

		let grana11__root = PizzaAnimationPassthroughView()
		let grana11__xScale = PizzaAnimationPassthroughView()
		let grana11__yScale = PizzaAnimationPassthroughView()
		let grana11 = UIImageView()
		let imgGrana2 = UIImage(named:"Grana:2.png", in: bundle, compatibleWith: nil)
		if imgGrana2 == nil {
			print("** Warning: Could not create image from 'Grana:2.png'")
		}
		grana11.image = imgGrana2
		grana11.contentMode = .center
		grana11.bounds = CGRect(x:0, y:0, width:122.0, height:232.0)
		grana11__root.layer.position = CGPoint(x:52.544, y:344.361)
		grana11__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		grana11__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		grana11__root.transform = CGAffineTransform(rotationAngle: 0.000)
		grana.addSubview(grana11__root)
		grana11__root.addSubview(grana11__xScale)
		grana11__xScale.addSubview(grana11__yScale)
		grana11__yScale.addSubview(grana11)
		grana.addSubview(grana11__root)
		viewsByName["Grana/11__root"] = grana11__root
		viewsByName["Grana/11__xScale"] = grana11__xScale
		viewsByName["Grana/11__yScale"] = grana11__yScale
		viewsByName["Grana/11"] = grana11

		let grana13__root = PizzaAnimationPassthroughView()
		let grana13__xScale = PizzaAnimationPassthroughView()
		let grana13__yScale = PizzaAnimationPassthroughView()
		let grana13 = UIImageView()
		grana13.image = imgGrana3
		grana13.contentMode = .center
		grana13.bounds = CGRect(x:0, y:0, width:154.0, height:176.0)
		grana13__root.layer.position = CGPoint(x:657.364, y:177.514)
		grana13__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		grana13__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		grana13__root.transform = CGAffineTransform(rotationAngle: 0.000)
		grana.addSubview(grana13__root)
		grana13__root.addSubview(grana13__xScale)
		grana13__xScale.addSubview(grana13__yScale)
		grana13__yScale.addSubview(grana13)
		grana.addSubview(grana13__root)
		viewsByName["Grana/13__root"] = grana13__root
		viewsByName["Grana/13__xScale"] = grana13__xScale
		viewsByName["Grana/13__yScale"] = grana13__yScale
		viewsByName["Grana/13"] = grana13

		let grana15__root = PizzaAnimationPassthroughView()
		let grana15__xScale = PizzaAnimationPassthroughView()
		let grana15__yScale = PizzaAnimationPassthroughView()
		let grana15 = UIImageView()
		grana15.image = imgGrana3
		grana15.contentMode = .center
		grana15.bounds = CGRect(x:0, y:0, width:154.0, height:176.0)
		grana15__root.layer.position = CGPoint(x:719.153, y:302.522)
		grana15__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		grana15__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		grana15__root.transform = CGAffineTransform(rotationAngle: 0.000)
		grana.addSubview(grana15__root)
		grana15__root.addSubview(grana15__xScale)
		grana15__xScale.addSubview(grana15__yScale)
		grana15__yScale.addSubview(grana15)
		grana.addSubview(grana15__root)
		viewsByName["Grana/15__root"] = grana15__root
		viewsByName["Grana/15__xScale"] = grana15__xScale
		viewsByName["Grana/15__yScale"] = grana15__yScale
		viewsByName["Grana/15"] = grana15

		let rucola__root = PizzaAnimationPassthroughView()
		let rucola__xScale = PizzaAnimationPassthroughView()
		let rucola__yScale = PizzaAnimationPassthroughView()
		let rucola = UIView()
		rucola.bounds = CGRect(x:0, y:0, width:816.0, height:585.0)
		rucola__root.layer.position = CGPoint(x:66.036, y:56.177)
		rucola__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		rucola__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		rucola__root.transform = CGAffineTransform(rotationAngle: 0.003)
		pizza.addSubview(rucola__root)
		rucola__root.addSubview(rucola__xScale)
		rucola__xScale.addSubview(rucola__yScale)
		rucola__yScale.addSubview(rucola)
		pizza.addSubview(rucola__root)
		viewsByName["Rucola__root"] = rucola__root
		viewsByName["Rucola__xScale"] = rucola__xScale
		viewsByName["Rucola__yScale"] = rucola__yScale
		viewsByName["Rucola"] = rucola

		let rucola1__root = PizzaAnimationPassthroughView()
		let rucola1__xScale = PizzaAnimationPassthroughView()
		let rucola1__yScale = PizzaAnimationPassthroughView()
		let rucola1 = UIImageView()
		let imgRucola = UIImage(named:"Rucola.png", in: bundle, compatibleWith: nil)
		if imgRucola == nil {
			print("** Warning: Could not create image from 'Rucola.png'")
		}
		rucola1.image = imgRucola
		rucola1.contentMode = .center
		rucola1.bounds = CGRect(x:0, y:0, width:108.0, height:334.0)
		rucola1__root.layer.position = CGPoint(x:72.089, y:39.352)
		rucola1__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		rucola1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		rucola1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		rucola.addSubview(rucola1__root)
		rucola1__root.addSubview(rucola1__xScale)
		rucola1__xScale.addSubview(rucola1__yScale)
		rucola1__yScale.addSubview(rucola1)
		rucola.addSubview(rucola1__root)
		viewsByName["Rucola/1__root"] = rucola1__root
		viewsByName["Rucola/1__xScale"] = rucola1__xScale
		viewsByName["Rucola/1__yScale"] = rucola1__yScale
		viewsByName["Rucola/1"] = rucola1

		let rucola5__root = PizzaAnimationPassthroughView()
		let rucola5__xScale = PizzaAnimationPassthroughView()
		let rucola5__yScale = PizzaAnimationPassthroughView()
		let rucola5 = UIImageView()
		rucola5.image = imgRucola
		rucola5.contentMode = .center
		rucola5.bounds = CGRect(x:0, y:0, width:108.0, height:334.0)
		rucola5__root.layer.position = CGPoint(x:44.870, y:235.297)
		rucola5__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		rucola5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		rucola5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		rucola.addSubview(rucola5__root)
		rucola5__root.addSubview(rucola5__xScale)
		rucola5__xScale.addSubview(rucola5__yScale)
		rucola5__yScale.addSubview(rucola5)
		rucola.addSubview(rucola5__root)
		viewsByName["Rucola/5__root"] = rucola5__root
		viewsByName["Rucola/5__xScale"] = rucola5__xScale
		viewsByName["Rucola/5__yScale"] = rucola5__yScale
		viewsByName["Rucola/5"] = rucola5

		let rucola6__root = PizzaAnimationPassthroughView()
		let rucola6__xScale = PizzaAnimationPassthroughView()
		let rucola6__yScale = PizzaAnimationPassthroughView()
		let rucola6 = UIImageView()
		rucola6.image = imgRucola
		rucola6.contentMode = .center
		rucola6.bounds = CGRect(x:0, y:0, width:108.0, height:334.0)
		rucola6__root.layer.position = CGPoint(x:108.839, y:263.233)
		rucola6__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		rucola6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		rucola6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		rucola.addSubview(rucola6__root)
		rucola6__root.addSubview(rucola6__xScale)
		rucola6__xScale.addSubview(rucola6__yScale)
		rucola6__yScale.addSubview(rucola6)
		rucola.addSubview(rucola6__root)
		viewsByName["Rucola/6__root"] = rucola6__root
		viewsByName["Rucola/6__xScale"] = rucola6__xScale
		viewsByName["Rucola/6__yScale"] = rucola6__yScale
		viewsByName["Rucola/6"] = rucola6

		let rucola9__root = PizzaAnimationPassthroughView()
		let rucola9__xScale = PizzaAnimationPassthroughView()
		let rucola9__yScale = PizzaAnimationPassthroughView()
		let rucola9 = UIImageView()
		rucola9.image = imgRucola
		rucola9.contentMode = .center
		rucola9.bounds = CGRect(x:0, y:0, width:108.0, height:334.0)
		rucola9__root.layer.position = CGPoint(x:113.573, y:366.361)
		rucola9__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		rucola9__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		rucola9__root.transform = CGAffineTransform(rotationAngle: 0.000)
		rucola.addSubview(rucola9__root)
		rucola9__root.addSubview(rucola9__xScale)
		rucola9__xScale.addSubview(rucola9__yScale)
		rucola9__yScale.addSubview(rucola9)
		rucola.addSubview(rucola9__root)
		viewsByName["Rucola/9__root"] = rucola9__root
		viewsByName["Rucola/9__xScale"] = rucola9__xScale
		viewsByName["Rucola/9__yScale"] = rucola9__yScale
		viewsByName["Rucola/9"] = rucola9

		let rucola11__root = PizzaAnimationPassthroughView()
		let rucola11__xScale = PizzaAnimationPassthroughView()
		let rucola11__yScale = PizzaAnimationPassthroughView()
		let rucola11 = UIImageView()
		rucola11.image = imgRucola
		rucola11.contentMode = .center
		rucola11.layer.anchorPoint = CGPoint(x:-0.919, y:1.491)
		rucola11.bounds = CGRect(x:0, y:0, width:108.0, height:334.0)
		rucola11__root.layer.position = CGPoint(x:62.175, y:509.023)
		rucola11__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		rucola11__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		rucola11__root.transform = CGAffineTransform(rotationAngle: 0.000)
		rucola.addSubview(rucola11__root)
		rucola11__root.addSubview(rucola11__xScale)
		rucola11__xScale.addSubview(rucola11__yScale)
		rucola11__yScale.addSubview(rucola11)
		rucola.addSubview(rucola11__root)
		viewsByName["Rucola/11__root"] = rucola11__root
		viewsByName["Rucola/11__xScale"] = rucola11__xScale
		viewsByName["Rucola/11__yScale"] = rucola11__yScale
		viewsByName["Rucola/11"] = rucola11

		let rucola12__root = PizzaAnimationPassthroughView()
		let rucola12__xScale = PizzaAnimationPassthroughView()
		let rucola12__yScale = PizzaAnimationPassthroughView()
		let rucola12 = UIImageView()
		rucola12.image = imgRucola
		rucola12.contentMode = .center
		rucola12.layer.anchorPoint = CGPoint(x:-0.919, y:1.491)
		rucola12.bounds = CGRect(x:0, y:0, width:108.0, height:334.0)
		rucola12__root.layer.position = CGPoint(x:25.761, y:590.789)
		rucola12__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		rucola12__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		rucola12__root.transform = CGAffineTransform(rotationAngle: 0.000)
		rucola.addSubview(rucola12__root)
		rucola12__root.addSubview(rucola12__xScale)
		rucola12__xScale.addSubview(rucola12__yScale)
		rucola12__yScale.addSubview(rucola12)
		rucola.addSubview(rucola12__root)
		viewsByName["Rucola/12__root"] = rucola12__root
		viewsByName["Rucola/12__xScale"] = rucola12__xScale
		viewsByName["Rucola/12__yScale"] = rucola12__yScale
		viewsByName["Rucola/12"] = rucola12

		let rucola13__root = PizzaAnimationPassthroughView()
		let rucola13__xScale = PizzaAnimationPassthroughView()
		let rucola13__yScale = PizzaAnimationPassthroughView()
		let rucola13 = UIImageView()
		rucola13.image = imgRucola
		rucola13.contentMode = .center
		rucola13.layer.anchorPoint = CGPoint(x:-0.919, y:1.491)
		rucola13.bounds = CGRect(x:0, y:0, width:108.0, height:334.0)
		rucola13__root.layer.position = CGPoint(x:682.277, y:99.586)
		rucola13__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		rucola13__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		rucola13__root.transform = CGAffineTransform(rotationAngle: 0.000)
		rucola.addSubview(rucola13__root)
		rucola13__root.addSubview(rucola13__xScale)
		rucola13__xScale.addSubview(rucola13__yScale)
		rucola13__yScale.addSubview(rucola13)
		rucola.addSubview(rucola13__root)
		viewsByName["Rucola/13__root"] = rucola13__root
		viewsByName["Rucola/13__xScale"] = rucola13__xScale
		viewsByName["Rucola/13__yScale"] = rucola13__yScale
		viewsByName["Rucola/13"] = rucola13

		let rucola15__root = PizzaAnimationPassthroughView()
		let rucola15__xScale = PizzaAnimationPassthroughView()
		let rucola15__yScale = PizzaAnimationPassthroughView()
		let rucola15 = UIImageView()
		rucola15.image = imgRucola
		rucola15.contentMode = .center
		rucola15.layer.anchorPoint = CGPoint(x:-0.919, y:1.491)
		rucola15.bounds = CGRect(x:0, y:0, width:108.0, height:334.0)
		rucola15__root.layer.position = CGPoint(x:660.769, y:209.953)
		rucola15__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		rucola15__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		rucola15__root.transform = CGAffineTransform(rotationAngle: 0.000)
		rucola.addSubview(rucola15__root)
		rucola15__root.addSubview(rucola15__xScale)
		rucola15__xScale.addSubview(rucola15__yScale)
		rucola15__yScale.addSubview(rucola15)
		rucola.addSubview(rucola15__root)
		viewsByName["Rucola/15__root"] = rucola15__root
		viewsByName["Rucola/15__xScale"] = rucola15__xScale
		viewsByName["Rucola/15__yScale"] = rucola15__yScale
		viewsByName["Rucola/15"] = rucola15

		let rucola19__root = PizzaAnimationPassthroughView()
		let rucola19__xScale = PizzaAnimationPassthroughView()
		let rucola19__yScale = PizzaAnimationPassthroughView()
		let rucola19 = UIImageView()
		rucola19.image = imgRucola
		rucola19.contentMode = .center
		rucola19.layer.anchorPoint = CGPoint(x:-0.919, y:1.491)
		rucola19.bounds = CGRect(x:0, y:0, width:108.0, height:334.0)
		rucola19__root.layer.position = CGPoint(x:672.573, y:424.897)
		rucola19__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		rucola19__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		rucola19__root.transform = CGAffineTransform(rotationAngle: 0.000)
		rucola.addSubview(rucola19__root)
		rucola19__root.addSubview(rucola19__xScale)
		rucola19__xScale.addSubview(rucola19__yScale)
		rucola19__yScale.addSubview(rucola19)
		rucola.addSubview(rucola19__root)
		viewsByName["Rucola/19__root"] = rucola19__root
		viewsByName["Rucola/19__xScale"] = rucola19__xScale
		viewsByName["Rucola/19__yScale"] = rucola19__yScale
		viewsByName["Rucola/19"] = rucola19

		let rucola20__root = PizzaAnimationPassthroughView()
		let rucola20__xScale = PizzaAnimationPassthroughView()
		let rucola20__yScale = PizzaAnimationPassthroughView()
		let rucola20 = UIImageView()
		rucola20.image = imgRucola
		rucola20.contentMode = .center
		rucola20.layer.anchorPoint = CGPoint(x:-0.919, y:1.491)
		rucola20.bounds = CGRect(x:0, y:0, width:108.0, height:334.0)
		rucola20__root.layer.position = CGPoint(x:743.933, y:448.788)
		rucola20__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		rucola20__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		rucola20__root.transform = CGAffineTransform(rotationAngle: 0.000)
		rucola.addSubview(rucola20__root)
		rucola20__root.addSubview(rucola20__xScale)
		rucola20__xScale.addSubview(rucola20__yScale)
		rucola20__yScale.addSubview(rucola20)
		rucola.addSubview(rucola20__root)
		viewsByName["Rucola/20__root"] = rucola20__root
		viewsByName["Rucola/20__xScale"] = rucola20__xScale
		viewsByName["Rucola/20__yScale"] = rucola20__yScale
		viewsByName["Rucola/20"] = rucola20

		let rucola23__root = PizzaAnimationPassthroughView()
		let rucola23__xScale = PizzaAnimationPassthroughView()
		let rucola23__yScale = PizzaAnimationPassthroughView()
		let rucola23 = UIImageView()
		rucola23.image = imgRucola
		rucola23.contentMode = .center
		rucola23.layer.anchorPoint = CGPoint(x:-0.919, y:1.491)
		rucola23.bounds = CGRect(x:0, y:0, width:108.0, height:334.0)
		rucola23__root.layer.position = CGPoint(x:741.823, y:544.092)
		rucola23__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		rucola23__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		rucola23__root.transform = CGAffineTransform(rotationAngle: 0.000)
		rucola.addSubview(rucola23__root)
		rucola23__root.addSubview(rucola23__xScale)
		rucola23__xScale.addSubview(rucola23__yScale)
		rucola23__yScale.addSubview(rucola23)
		rucola.addSubview(rucola23__root)
		viewsByName["Rucola/23__root"] = rucola23__root
		viewsByName["Rucola/23__xScale"] = rucola23__xScale
		viewsByName["Rucola/23__yScale"] = rucola23__yScale
		viewsByName["Rucola/23"] = rucola23

		let rucola22__root = PizzaAnimationPassthroughView()
		let rucola22__xScale = PizzaAnimationPassthroughView()
		let rucola22__yScale = PizzaAnimationPassthroughView()
		let rucola22 = UIImageView()
		rucola22.image = imgRucola
		rucola22.contentMode = .center
		rucola22.layer.anchorPoint = CGPoint(x:-0.919, y:1.491)
		rucola22.bounds = CGRect(x:0, y:0, width:108.0, height:334.0)
		rucola22__root.layer.position = CGPoint(x:774.503, y:252.522)
		rucola22__xScale.transform = CGAffineTransform(scaleX: 0.20, y: 1.00)
		rucola22__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.20)
		rucola22__root.transform = CGAffineTransform(rotationAngle: 0.000)
		rucola.addSubview(rucola22__root)
		rucola22__root.addSubview(rucola22__xScale)
		rucola22__xScale.addSubview(rucola22__yScale)
		rucola22__yScale.addSubview(rucola22)
		rucola.addSubview(rucola22__root)
		viewsByName["Rucola/22__root"] = rucola22__root
		viewsByName["Rucola/22__xScale"] = rucola22__xScale
		viewsByName["Rucola/22__yScale"] = rucola22__yScale
		viewsByName["Rucola/22"] = rucola22
        
        let parmigiano__root = PizzaAnimationPassthroughView()
        let parmigiano__xScale = PizzaAnimationPassthroughView()
        let parmigiano__yScale = PizzaAnimationPassthroughView()
        let parmigiano = UIImageView()
        let imgParmigiano = UIImage(named:"Parmigiano.png", in: bundle, compatibleWith: nil)
        if imgParmigiano == nil {
            print("** Warning: Could not create image from 'Parmigiano.png'")
        }
        parmigiano.image = imgParmigiano
        parmigiano.contentMode = .center
        parmigiano.bounds = CGRect(x:0, y:0, width:454.0, height:486.0)
        parmigiano__root.layer.position = CGPoint(x:60.000, y:60.300)
        parmigiano__root.alpha = 0.00
        parmigiano__xScale.transform = CGAffineTransform(scaleX: 0.25, y: 1.00)
        parmigiano__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.25)
        parmigiano__root.transform = CGAffineTransform(rotationAngle: 0.000)
        pizza.addSubview(parmigiano__root)
        parmigiano__root.addSubview(parmigiano__xScale)
        parmigiano__xScale.addSubview(parmigiano__yScale)
        parmigiano__yScale.addSubview(parmigiano)
        pizza.addSubview(parmigiano__root)
        viewsByName["Parmigiano__root"] = parmigiano__root
        viewsByName["Parmigiano__xScale"] = parmigiano__xScale
        viewsByName["Parmigiano__yScale"] = parmigiano__yScale
        viewsByName["Parmigiano"] = parmigiano

		self.viewsByName = viewsByName
	}

	// - MARK: Anchovies

	public func addAnchoviesAnimation() {
		addAnchoviesAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addAnchoviesAnimation(completion: ((Bool) -> Void)?) {
		addAnchoviesAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addAnchoviesAnimation(removedOnCompletion: Bool) {
		addAnchoviesAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addAnchoviesAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addAnchoviesAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addAnchoviesAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Anchovies")
			self.animationCompletions[layer.animation(forKey: "Anchovies")!] = complete
		}

		let acciuga1RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		acciuga1RotationAnimation.duration = 1.500
		acciuga1RotationAnimation.values = [0.000, 1.222] as [Float]
		acciuga1RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		acciuga1RotationAnimation.timingFunctions = [linearTiming]
		acciuga1RotationAnimation.beginTime = beginTime
		acciuga1RotationAnimation.fillMode = fillMode
		acciuga1RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Acciuga/1__root"]?.layer.add(acciuga1RotationAnimation, forKey:"Anchovies_Rotation")

		let acciuga1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		acciuga1TranslationXAnimation.duration = 1.500
		acciuga1TranslationXAnimation.values = [0.000, 240.000] as [Float]
		acciuga1TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		acciuga1TranslationXAnimation.timingFunctions = [anticOverTiming]
		acciuga1TranslationXAnimation.beginTime = beginTime
		acciuga1TranslationXAnimation.fillMode = fillMode
		acciuga1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Acciuga/1__root"]?.layer.add(acciuga1TranslationXAnimation, forKey:"Anchovies_TranslationX")

		let acciuga1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		acciuga1TranslationYAnimation.duration = 1.500
		acciuga1TranslationYAnimation.values = [0.000, 110.000] as [Float]
		acciuga1TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		acciuga1TranslationYAnimation.timingFunctions = [linearTiming]
		acciuga1TranslationYAnimation.beginTime = beginTime
		acciuga1TranslationYAnimation.fillMode = fillMode
		acciuga1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Acciuga/1__root"]?.layer.add(acciuga1TranslationYAnimation, forKey:"Anchovies_TranslationY")

		let acciuga4RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		acciuga4RotationAnimation.duration = 1.500
		acciuga4RotationAnimation.values = [0.000, -0.349] as [Float]
		acciuga4RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		acciuga4RotationAnimation.timingFunctions = [linearTiming]
		acciuga4RotationAnimation.beginTime = beginTime
		acciuga4RotationAnimation.fillMode = fillMode
		acciuga4RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Acciuga/4__root"]?.layer.add(acciuga4RotationAnimation, forKey:"Anchovies_Rotation")

		let acciuga4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		acciuga4TranslationXAnimation.duration = 1.500
		acciuga4TranslationXAnimation.values = [0.000, 240.000] as [Float]
		acciuga4TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		acciuga4TranslationXAnimation.timingFunctions = [anticOverTiming]
		acciuga4TranslationXAnimation.beginTime = beginTime
		acciuga4TranslationXAnimation.fillMode = fillMode
		acciuga4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Acciuga/4__root"]?.layer.add(acciuga4TranslationXAnimation, forKey:"Anchovies_TranslationX")

		let acciuga4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		acciuga4TranslationYAnimation.duration = 1.500
		acciuga4TranslationYAnimation.values = [0.000, -90.000] as [Float]
		acciuga4TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		acciuga4TranslationYAnimation.timingFunctions = [linearTiming]
		acciuga4TranslationYAnimation.beginTime = beginTime
		acciuga4TranslationYAnimation.fillMode = fillMode
		acciuga4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Acciuga/4__root"]?.layer.add(acciuga4TranslationYAnimation, forKey:"Anchovies_TranslationY")

		let acciuga6RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		acciuga6RotationAnimation.duration = 1.500
		acciuga6RotationAnimation.values = [0.000, -0.524] as [Float]
		acciuga6RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		acciuga6RotationAnimation.timingFunctions = [linearTiming]
		acciuga6RotationAnimation.beginTime = beginTime
		acciuga6RotationAnimation.fillMode = fillMode
		acciuga6RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Acciuga/6__root"]?.layer.add(acciuga6RotationAnimation, forKey:"Anchovies_Rotation")

		let acciuga6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		acciuga6TranslationXAnimation.duration = 1.500
		acciuga6TranslationXAnimation.values = [0.000, -190.000] as [Float]
		acciuga6TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		acciuga6TranslationXAnimation.timingFunctions = [anticOverTiming]
		acciuga6TranslationXAnimation.beginTime = beginTime
		acciuga6TranslationXAnimation.fillMode = fillMode
		acciuga6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Acciuga/6__root"]?.layer.add(acciuga6TranslationXAnimation, forKey:"Anchovies_TranslationX")

		let acciuga6TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		acciuga6TranslationYAnimation.duration = 1.500
		acciuga6TranslationYAnimation.values = [0.000, 60.000] as [Float]
		acciuga6TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		acciuga6TranslationYAnimation.timingFunctions = [linearTiming]
		acciuga6TranslationYAnimation.beginTime = beginTime
		acciuga6TranslationYAnimation.fillMode = fillMode
		acciuga6TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Acciuga/6__root"]?.layer.add(acciuga6TranslationYAnimation, forKey:"Anchovies_TranslationY")

		let acciuga7TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		acciuga7TranslationXAnimation.duration = 1.500
		acciuga7TranslationXAnimation.values = [0.000, -220.000] as [Float]
		acciuga7TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		acciuga7TranslationXAnimation.timingFunctions = [anticOverTiming]
		acciuga7TranslationXAnimation.beginTime = beginTime
		acciuga7TranslationXAnimation.fillMode = fillMode
		acciuga7TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Acciuga/7__root"]?.layer.add(acciuga7TranslationXAnimation, forKey:"Anchovies_TranslationX")

		let acciuga7TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		acciuga7TranslationYAnimation.duration = 1.500
		acciuga7TranslationYAnimation.values = [0.000, 70.000] as [Float]
		acciuga7TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		acciuga7TranslationYAnimation.timingFunctions = [linearTiming]
		acciuga7TranslationYAnimation.beginTime = beginTime
		acciuga7TranslationYAnimation.fillMode = fillMode
		acciuga7TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Acciuga/7__root"]?.layer.add(acciuga7TranslationYAnimation, forKey:"Anchovies_TranslationY")

		let acciuga9RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		acciuga9RotationAnimation.duration = 1.500
		acciuga9RotationAnimation.values = [0.000, 0.698] as [Float]
		acciuga9RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		acciuga9RotationAnimation.timingFunctions = [linearTiming]
		acciuga9RotationAnimation.beginTime = beginTime
		acciuga9RotationAnimation.fillMode = fillMode
		acciuga9RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Acciuga/9__root"]?.layer.add(acciuga9RotationAnimation, forKey:"Anchovies_Rotation")

		let acciuga9TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		acciuga9TranslationXAnimation.duration = 1.500
		acciuga9TranslationXAnimation.values = [0.000, -240.000] as [Float]
		acciuga9TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		acciuga9TranslationXAnimation.timingFunctions = [anticOverTiming]
		acciuga9TranslationXAnimation.beginTime = beginTime
		acciuga9TranslationXAnimation.fillMode = fillMode
		acciuga9TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Acciuga/9__root"]?.layer.add(acciuga9TranslationXAnimation, forKey:"Anchovies_TranslationX")

		let acciuga9TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		acciuga9TranslationYAnimation.duration = 1.500
		acciuga9TranslationYAnimation.values = [0.000, -150.000] as [Float]
		acciuga9TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		acciuga9TranslationYAnimation.timingFunctions = [linearTiming]
		acciuga9TranslationYAnimation.beginTime = beginTime
		acciuga9TranslationYAnimation.fillMode = fillMode
		acciuga9TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Acciuga/9__root"]?.layer.add(acciuga9TranslationYAnimation, forKey:"Anchovies_TranslationY")

		let acciuga2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		acciuga2RotationAnimation.duration = 1.500
		acciuga2RotationAnimation.values = [0.000, -1.396] as [Float]
		acciuga2RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		acciuga2RotationAnimation.timingFunctions = [linearTiming]
		acciuga2RotationAnimation.beginTime = beginTime
		acciuga2RotationAnimation.fillMode = fillMode
		acciuga2RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Acciuga/2__root"]?.layer.add(acciuga2RotationAnimation, forKey:"Anchovies_Rotation")

		let acciuga2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		acciuga2TranslationXAnimation.duration = 1.500
		acciuga2TranslationXAnimation.values = [0.000, 260.000] as [Float]
		acciuga2TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		acciuga2TranslationXAnimation.timingFunctions = [anticOverTiming]
		acciuga2TranslationXAnimation.beginTime = beginTime
		acciuga2TranslationXAnimation.fillMode = fillMode
		acciuga2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Acciuga/2__root"]?.layer.add(acciuga2TranslationXAnimation, forKey:"Anchovies_TranslationX")

		let acciuga2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		acciuga2TranslationYAnimation.duration = 1.500
		acciuga2TranslationYAnimation.values = [0.000, 80.000] as [Float]
		acciuga2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		acciuga2TranslationYAnimation.timingFunctions = [linearTiming]
		acciuga2TranslationYAnimation.beginTime = beginTime
		acciuga2TranslationYAnimation.fillMode = fillMode
		acciuga2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Acciuga/2__root"]?.layer.add(acciuga2TranslationYAnimation, forKey:"Anchovies_TranslationY")
	}

	public func removeAnchoviesAnimation() {
		self.layer.removeAnimation(forKey: "Anchovies")
		self.viewsByName["Acciuga/1__root"]?.layer.removeAnimation(forKey: "Anchovies_Rotation")
		self.viewsByName["Acciuga/1__root"]?.layer.removeAnimation(forKey: "Anchovies_TranslationX")
		self.viewsByName["Acciuga/1__root"]?.layer.removeAnimation(forKey: "Anchovies_TranslationY")
		self.viewsByName["Acciuga/4__root"]?.layer.removeAnimation(forKey: "Anchovies_Rotation")
		self.viewsByName["Acciuga/4__root"]?.layer.removeAnimation(forKey: "Anchovies_TranslationX")
		self.viewsByName["Acciuga/4__root"]?.layer.removeAnimation(forKey: "Anchovies_TranslationY")
		self.viewsByName["Acciuga/6__root"]?.layer.removeAnimation(forKey: "Anchovies_Rotation")
		self.viewsByName["Acciuga/6__root"]?.layer.removeAnimation(forKey: "Anchovies_TranslationX")
		self.viewsByName["Acciuga/6__root"]?.layer.removeAnimation(forKey: "Anchovies_TranslationY")
		self.viewsByName["Acciuga/7__root"]?.layer.removeAnimation(forKey: "Anchovies_TranslationX")
		self.viewsByName["Acciuga/7__root"]?.layer.removeAnimation(forKey: "Anchovies_TranslationY")
		self.viewsByName["Acciuga/9__root"]?.layer.removeAnimation(forKey: "Anchovies_Rotation")
		self.viewsByName["Acciuga/9__root"]?.layer.removeAnimation(forKey: "Anchovies_TranslationX")
		self.viewsByName["Acciuga/9__root"]?.layer.removeAnimation(forKey: "Anchovies_TranslationY")
		self.viewsByName["Acciuga/2__root"]?.layer.removeAnimation(forKey: "Anchovies_Rotation")
		self.viewsByName["Acciuga/2__root"]?.layer.removeAnimation(forKey: "Anchovies_TranslationX")
		self.viewsByName["Acciuga/2__root"]?.layer.removeAnimation(forKey: "Anchovies_TranslationY")
	}

	// - MARK: Artichokes

	public func addArtichokesAnimation() {
		addArtichokesAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addArtichokesAnimation(completion: ((Bool) -> Void)?) {
		addArtichokesAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addArtichokesAnimation(removedOnCompletion: Bool) {
		addArtichokesAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addArtichokesAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addArtichokesAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addArtichokesAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Artichokes")
			self.animationCompletions[layer.animation(forKey: "Artichokes")!] = complete
		}

		let carciofino2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		carciofino2RotationAnimation.duration = 1.500
		carciofino2RotationAnimation.values = [0.000, -4.198] as [Float]
		carciofino2RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino2RotationAnimation.timingFunctions = [linearTiming]
		carciofino2RotationAnimation.beginTime = beginTime
		carciofino2RotationAnimation.fillMode = fillMode
		carciofino2RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/2__root"]?.layer.add(carciofino2RotationAnimation, forKey:"Artichokes_Rotation")

		let carciofino2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		carciofino2TranslationXAnimation.duration = 1.500
		carciofino2TranslationXAnimation.values = [0.000, 194.154] as [Float]
		carciofino2TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino2TranslationXAnimation.timingFunctions = [anticOverTiming]
		carciofino2TranslationXAnimation.beginTime = beginTime
		carciofino2TranslationXAnimation.fillMode = fillMode
		carciofino2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/2__root"]?.layer.add(carciofino2TranslationXAnimation, forKey:"Artichokes_TranslationX")

		let carciofino2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		carciofino2TranslationYAnimation.duration = 1.500
		carciofino2TranslationYAnimation.values = [0.000, 111.136] as [Float]
		carciofino2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino2TranslationYAnimation.timingFunctions = [linearTiming]
		carciofino2TranslationYAnimation.beginTime = beginTime
		carciofino2TranslationYAnimation.fillMode = fillMode
		carciofino2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/2__root"]?.layer.add(carciofino2TranslationYAnimation, forKey:"Artichokes_TranslationY")

		let carciofino8TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		carciofino8TranslationXAnimation.duration = 1.500
		carciofino8TranslationXAnimation.values = [0.000, -334.807] as [Float]
		carciofino8TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino8TranslationXAnimation.timingFunctions = [anticOverTiming]
		carciofino8TranslationXAnimation.beginTime = beginTime
		carciofino8TranslationXAnimation.fillMode = fillMode
		carciofino8TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/8__root"]?.layer.add(carciofino8TranslationXAnimation, forKey:"Artichokes_TranslationX")

		let carciofino8TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		carciofino8TranslationYAnimation.duration = 1.500
		carciofino8TranslationYAnimation.values = [0.000, 6.252] as [Float]
		carciofino8TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino8TranslationYAnimation.timingFunctions = [linearTiming]
		carciofino8TranslationYAnimation.beginTime = beginTime
		carciofino8TranslationYAnimation.fillMode = fillMode
		carciofino8TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/8__root"]?.layer.add(carciofino8TranslationYAnimation, forKey:"Artichokes_TranslationY")

		let carciofino9RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		carciofino9RotationAnimation.duration = 1.500
		carciofino9RotationAnimation.values = [0.000, 0.873] as [Float]
		carciofino9RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino9RotationAnimation.timingFunctions = [linearTiming]
		carciofino9RotationAnimation.beginTime = beginTime
		carciofino9RotationAnimation.fillMode = fillMode
		carciofino9RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/9__root"]?.layer.add(carciofino9RotationAnimation, forKey:"Artichokes_Rotation")

		let carciofino9TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		carciofino9TranslationXAnimation.duration = 1.500
		carciofino9TranslationXAnimation.values = [0.000, -250.160] as [Float]
		carciofino9TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino9TranslationXAnimation.timingFunctions = [anticOverTiming]
		carciofino9TranslationXAnimation.beginTime = beginTime
		carciofino9TranslationXAnimation.fillMode = fillMode
		carciofino9TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/9__root"]?.layer.add(carciofino9TranslationXAnimation, forKey:"Artichokes_TranslationX")

		let carciofino9TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		carciofino9TranslationYAnimation.duration = 1.500
		carciofino9TranslationYAnimation.values = [0.000, -83.733] as [Float]
		carciofino9TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino9TranslationYAnimation.timingFunctions = [linearTiming]
		carciofino9TranslationYAnimation.beginTime = beginTime
		carciofino9TranslationYAnimation.fillMode = fillMode
		carciofino9TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/9__root"]?.layer.add(carciofino9TranslationYAnimation, forKey:"Artichokes_TranslationY")

		let carciofino1RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		carciofino1RotationAnimation.duration = 1.500
		carciofino1RotationAnimation.values = [0.000, 0.750, 0.750] as [Float]
		carciofino1RotationAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		carciofino1RotationAnimation.timingFunctions = [linearTiming, linearTiming]
		carciofino1RotationAnimation.beginTime = beginTime
		carciofino1RotationAnimation.fillMode = fillMode
		carciofino1RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/1__root"]?.layer.add(carciofino1RotationAnimation, forKey:"Artichokes_Rotation")

		let carciofino1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		carciofino1TranslationXAnimation.duration = 1.500
		carciofino1TranslationXAnimation.values = [0.000, 199.302, 200.000] as [Float]
		carciofino1TranslationXAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		carciofino1TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		carciofino1TranslationXAnimation.beginTime = beginTime
		carciofino1TranslationXAnimation.fillMode = fillMode
		carciofino1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/1__root"]?.layer.add(carciofino1TranslationXAnimation, forKey:"Artichokes_TranslationX")

		let carciofino1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		carciofino1TranslationYAnimation.duration = 1.500
		carciofino1TranslationYAnimation.values = [0.000, 119.998, 120.000] as [Float]
		carciofino1TranslationYAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		carciofino1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		carciofino1TranslationYAnimation.beginTime = beginTime
		carciofino1TranslationYAnimation.fillMode = fillMode
		carciofino1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/1__root"]?.layer.add(carciofino1TranslationYAnimation, forKey:"Artichokes_TranslationY")

		let carciofino4RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		carciofino4RotationAnimation.duration = 1.500
		carciofino4RotationAnimation.values = [0.000, -0.524, -0.524] as [Float]
		carciofino4RotationAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		carciofino4RotationAnimation.timingFunctions = [linearTiming, linearTiming]
		carciofino4RotationAnimation.beginTime = beginTime
		carciofino4RotationAnimation.fillMode = fillMode
		carciofino4RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/4__root"]?.layer.add(carciofino4RotationAnimation, forKey:"Artichokes_Rotation")

		let carciofino4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		carciofino4TranslationXAnimation.duration = 1.500
		carciofino4TranslationXAnimation.values = [0.000, 200.000, 200.000] as [Float]
		carciofino4TranslationXAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		carciofino4TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		carciofino4TranslationXAnimation.beginTime = beginTime
		carciofino4TranslationXAnimation.fillMode = fillMode
		carciofino4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/4__root"]?.layer.add(carciofino4TranslationXAnimation, forKey:"Artichokes_TranslationX")

		let carciofino4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		carciofino4TranslationYAnimation.duration = 1.500
		carciofino4TranslationYAnimation.values = [0.000, -60.000, -60.000] as [Float]
		carciofino4TranslationYAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		carciofino4TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		carciofino4TranslationYAnimation.beginTime = beginTime
		carciofino4TranslationYAnimation.fillMode = fillMode
		carciofino4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/4__root"]?.layer.add(carciofino4TranslationYAnimation, forKey:"Artichokes_TranslationY")

		let carciofino5RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		carciofino5RotationAnimation.duration = 1.500
		carciofino5RotationAnimation.values = [0.000, -0.529] as [Float]
		carciofino5RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino5RotationAnimation.timingFunctions = [linearTiming]
		carciofino5RotationAnimation.beginTime = beginTime
		carciofino5RotationAnimation.fillMode = fillMode
		carciofino5RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/5__root"]?.layer.add(carciofino5RotationAnimation, forKey:"Artichokes_Rotation")

		let carciofino5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		carciofino5TranslationXAnimation.duration = 1.500
		carciofino5TranslationXAnimation.values = [0.000, -290.328] as [Float]
		carciofino5TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino5TranslationXAnimation.timingFunctions = [anticOverTiming]
		carciofino5TranslationXAnimation.beginTime = beginTime
		carciofino5TranslationXAnimation.fillMode = fillMode
		carciofino5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/5__root"]?.layer.add(carciofino5TranslationXAnimation, forKey:"Artichokes_TranslationX")

		let carciofino5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		carciofino5TranslationYAnimation.duration = 1.500
		carciofino5TranslationYAnimation.values = [0.000, 147.596] as [Float]
		carciofino5TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino5TranslationYAnimation.timingFunctions = [linearTiming]
		carciofino5TranslationYAnimation.beginTime = beginTime
		carciofino5TranslationYAnimation.fillMode = fillMode
		carciofino5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/5__root"]?.layer.add(carciofino5TranslationYAnimation, forKey:"Artichokes_TranslationY")
	}

	public func removeArtichokesAnimation() {
		self.layer.removeAnimation(forKey: "Artichokes")
		self.viewsByName["Carciofino/2__root"]?.layer.removeAnimation(forKey: "Artichokes_Rotation")
		self.viewsByName["Carciofino/2__root"]?.layer.removeAnimation(forKey: "Artichokes_TranslationX")
		self.viewsByName["Carciofino/2__root"]?.layer.removeAnimation(forKey: "Artichokes_TranslationY")
		self.viewsByName["Carciofino/8__root"]?.layer.removeAnimation(forKey: "Artichokes_TranslationX")
		self.viewsByName["Carciofino/8__root"]?.layer.removeAnimation(forKey: "Artichokes_TranslationY")
		self.viewsByName["Carciofino/9__root"]?.layer.removeAnimation(forKey: "Artichokes_Rotation")
		self.viewsByName["Carciofino/9__root"]?.layer.removeAnimation(forKey: "Artichokes_TranslationX")
		self.viewsByName["Carciofino/9__root"]?.layer.removeAnimation(forKey: "Artichokes_TranslationY")
		self.viewsByName["Carciofino/1__root"]?.layer.removeAnimation(forKey: "Artichokes_Rotation")
		self.viewsByName["Carciofino/1__root"]?.layer.removeAnimation(forKey: "Artichokes_TranslationX")
		self.viewsByName["Carciofino/1__root"]?.layer.removeAnimation(forKey: "Artichokes_TranslationY")
		self.viewsByName["Carciofino/4__root"]?.layer.removeAnimation(forKey: "Artichokes_Rotation")
		self.viewsByName["Carciofino/4__root"]?.layer.removeAnimation(forKey: "Artichokes_TranslationX")
		self.viewsByName["Carciofino/4__root"]?.layer.removeAnimation(forKey: "Artichokes_TranslationY")
		self.viewsByName["Carciofino/5__root"]?.layer.removeAnimation(forKey: "Artichokes_Rotation")
		self.viewsByName["Carciofino/5__root"]?.layer.removeAnimation(forKey: "Artichokes_TranslationX")
		self.viewsByName["Carciofino/5__root"]?.layer.removeAnimation(forKey: "Artichokes_TranslationY")
	}

	// - MARK: Artichokes/OneQuarter

	public func addArtichokesOneQuarterAnimation() {
		addArtichokesOneQuarterAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addArtichokesOneQuarterAnimation(completion: ((Bool) -> Void)?) {
		addArtichokesOneQuarterAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addArtichokesOneQuarterAnimation(removedOnCompletion: Bool) {
		addArtichokesOneQuarterAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addArtichokesOneQuarterAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addArtichokesOneQuarterAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addArtichokesOneQuarterAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "ArtichokesOneQuarter")
			self.animationCompletions[layer.animation(forKey: "ArtichokesOneQuarter")!] = complete
		}

		let carciofino2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		carciofino2RotationAnimation.duration = 1.500
		carciofino2RotationAnimation.values = [0.000, -4.198] as [Float]
		carciofino2RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino2RotationAnimation.timingFunctions = [linearTiming]
		carciofino2RotationAnimation.beginTime = beginTime
		carciofino2RotationAnimation.fillMode = fillMode
		carciofino2RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/2__root"]?.layer.add(carciofino2RotationAnimation, forKey:"Artichokes/OneQuarter_Rotation")

		let carciofino2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		carciofino2TranslationXAnimation.duration = 1.500
		carciofino2TranslationXAnimation.values = [0.000, 200.000] as [Float]
		carciofino2TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino2TranslationXAnimation.timingFunctions = [anticOverTiming]
		carciofino2TranslationXAnimation.beginTime = beginTime
		carciofino2TranslationXAnimation.fillMode = fillMode
		carciofino2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/2__root"]?.layer.add(carciofino2TranslationXAnimation, forKey:"Artichokes/OneQuarter_TranslationX")

		let carciofino2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		carciofino2TranslationYAnimation.duration = 1.500
		carciofino2TranslationYAnimation.values = [0.000, 100.000] as [Float]
		carciofino2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino2TranslationYAnimation.timingFunctions = [linearTiming]
		carciofino2TranslationYAnimation.beginTime = beginTime
		carciofino2TranslationYAnimation.fillMode = fillMode
		carciofino2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/2__root"]?.layer.add(carciofino2TranslationYAnimation, forKey:"Artichokes/OneQuarter_TranslationY")

		let carciofino8TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		carciofino8TranslationXAnimation.duration = 1.500
		carciofino8TranslationXAnimation.values = [0.000, -380.000] as [Float]
		carciofino8TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino8TranslationXAnimation.timingFunctions = [anticOverTiming]
		carciofino8TranslationXAnimation.beginTime = beginTime
		carciofino8TranslationXAnimation.fillMode = fillMode
		carciofino8TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/8__root"]?.layer.add(carciofino8TranslationXAnimation, forKey:"Artichokes/OneQuarter_TranslationX")

		let carciofino8TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		carciofino8TranslationYAnimation.duration = 1.500
		carciofino8TranslationYAnimation.values = [0.000, -30.000] as [Float]
		carciofino8TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino8TranslationYAnimation.timingFunctions = [linearTiming]
		carciofino8TranslationYAnimation.beginTime = beginTime
		carciofino8TranslationYAnimation.fillMode = fillMode
		carciofino8TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/8__root"]?.layer.add(carciofino8TranslationYAnimation, forKey:"Artichokes/OneQuarter_TranslationY")

		let carciofino9RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		carciofino9RotationAnimation.duration = 1.500
		carciofino9RotationAnimation.values = [0.000, 0.873] as [Float]
		carciofino9RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino9RotationAnimation.timingFunctions = [linearTiming]
		carciofino9RotationAnimation.beginTime = beginTime
		carciofino9RotationAnimation.fillMode = fillMode
		carciofino9RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/9__root"]?.layer.add(carciofino9RotationAnimation, forKey:"Artichokes/OneQuarter_Rotation")

		let carciofino9TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		carciofino9TranslationXAnimation.duration = 1.500
		carciofino9TranslationXAnimation.values = [0.000, -350.000] as [Float]
		carciofino9TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino9TranslationXAnimation.timingFunctions = [anticOverTiming]
		carciofino9TranslationXAnimation.beginTime = beginTime
		carciofino9TranslationXAnimation.fillMode = fillMode
		carciofino9TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/9__root"]?.layer.add(carciofino9TranslationXAnimation, forKey:"Artichokes/OneQuarter_TranslationX")

		let carciofino9TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		carciofino9TranslationYAnimation.duration = 1.500
		carciofino9TranslationYAnimation.values = [0.000, -130.000] as [Float]
		carciofino9TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino9TranslationYAnimation.timingFunctions = [linearTiming]
		carciofino9TranslationYAnimation.beginTime = beginTime
		carciofino9TranslationYAnimation.fillMode = fillMode
		carciofino9TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/9__root"]?.layer.add(carciofino9TranslationYAnimation, forKey:"Artichokes/OneQuarter_TranslationY")

		let carciofino1RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		carciofino1RotationAnimation.duration = 1.500
		carciofino1RotationAnimation.values = [0.000, 0.750, 0.750] as [Float]
		carciofino1RotationAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		carciofino1RotationAnimation.timingFunctions = [linearTiming, linearTiming]
		carciofino1RotationAnimation.beginTime = beginTime
		carciofino1RotationAnimation.fillMode = fillMode
		carciofino1RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/1__root"]?.layer.add(carciofino1RotationAnimation, forKey:"Artichokes/OneQuarter_Rotation")

		let carciofino1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		carciofino1TranslationXAnimation.duration = 1.500
		carciofino1TranslationXAnimation.values = [0.000, 200.000, 200.000] as [Float]
		carciofino1TranslationXAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		carciofino1TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		carciofino1TranslationXAnimation.beginTime = beginTime
		carciofino1TranslationXAnimation.fillMode = fillMode
		carciofino1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/1__root"]?.layer.add(carciofino1TranslationXAnimation, forKey:"Artichokes/OneQuarter_TranslationX")

		let carciofino1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		carciofino1TranslationYAnimation.duration = 1.500
		carciofino1TranslationYAnimation.values = [0.000, 120.000, 120.000] as [Float]
		carciofino1TranslationYAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		carciofino1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		carciofino1TranslationYAnimation.beginTime = beginTime
		carciofino1TranslationYAnimation.fillMode = fillMode
		carciofino1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/1__root"]?.layer.add(carciofino1TranslationYAnimation, forKey:"Artichokes/OneQuarter_TranslationY")

		let carciofino4RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		carciofino4RotationAnimation.duration = 1.500
		carciofino4RotationAnimation.values = [0.000, -0.524, -0.524] as [Float]
		carciofino4RotationAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		carciofino4RotationAnimation.timingFunctions = [linearTiming, linearTiming]
		carciofino4RotationAnimation.beginTime = beginTime
		carciofino4RotationAnimation.fillMode = fillMode
		carciofino4RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/4__root"]?.layer.add(carciofino4RotationAnimation, forKey:"Artichokes/OneQuarter_Rotation")

		let carciofino4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		carciofino4TranslationXAnimation.duration = 1.500
		carciofino4TranslationXAnimation.values = [0.000, 200.000, 200.000] as [Float]
		carciofino4TranslationXAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		carciofino4TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		carciofino4TranslationXAnimation.beginTime = beginTime
		carciofino4TranslationXAnimation.fillMode = fillMode
		carciofino4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/4__root"]?.layer.add(carciofino4TranslationXAnimation, forKey:"Artichokes/OneQuarter_TranslationX")

		let carciofino4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		carciofino4TranslationYAnimation.duration = 1.500
		carciofino4TranslationYAnimation.values = [0.000, -60.000, -60.000] as [Float]
		carciofino4TranslationYAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		carciofino4TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		carciofino4TranslationYAnimation.beginTime = beginTime
		carciofino4TranslationYAnimation.fillMode = fillMode
		carciofino4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/4__root"]?.layer.add(carciofino4TranslationYAnimation, forKey:"Artichokes/OneQuarter_TranslationY")

		let carciofino5RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		carciofino5RotationAnimation.duration = 1.500
		carciofino5RotationAnimation.values = [0.000, -0.529] as [Float]
		carciofino5RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino5RotationAnimation.timingFunctions = [linearTiming]
		carciofino5RotationAnimation.beginTime = beginTime
		carciofino5RotationAnimation.fillMode = fillMode
		carciofino5RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/5__root"]?.layer.add(carciofino5RotationAnimation, forKey:"Artichokes/OneQuarter_Rotation")

		let carciofino5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		carciofino5TranslationXAnimation.duration = 1.500
		carciofino5TranslationXAnimation.values = [0.000, -360.000] as [Float]
		carciofino5TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino5TranslationXAnimation.timingFunctions = [anticOverTiming]
		carciofino5TranslationXAnimation.beginTime = beginTime
		carciofino5TranslationXAnimation.fillMode = fillMode
		carciofino5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/5__root"]?.layer.add(carciofino5TranslationXAnimation, forKey:"Artichokes/OneQuarter_TranslationX")

		let carciofino5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		carciofino5TranslationYAnimation.duration = 1.500
		carciofino5TranslationYAnimation.values = [0.000, 170.000] as [Float]
		carciofino5TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		carciofino5TranslationYAnimation.timingFunctions = [linearTiming]
		carciofino5TranslationYAnimation.beginTime = beginTime
		carciofino5TranslationYAnimation.fillMode = fillMode
		carciofino5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Carciofino/5__root"]?.layer.add(carciofino5TranslationYAnimation, forKey:"Artichokes/OneQuarter_TranslationY")
	}

	public func removeArtichokesOneQuarterAnimation() {
		self.layer.removeAnimation(forKey: "ArtichokesOneQuarter")
		self.viewsByName["Carciofino/2__root"]?.layer.removeAnimation(forKey: "Artichokes/OneQuarter_Rotation")
		self.viewsByName["Carciofino/2__root"]?.layer.removeAnimation(forKey: "Artichokes/OneQuarter_TranslationX")
		self.viewsByName["Carciofino/2__root"]?.layer.removeAnimation(forKey: "Artichokes/OneQuarter_TranslationY")
		self.viewsByName["Carciofino/8__root"]?.layer.removeAnimation(forKey: "Artichokes/OneQuarter_TranslationX")
		self.viewsByName["Carciofino/8__root"]?.layer.removeAnimation(forKey: "Artichokes/OneQuarter_TranslationY")
		self.viewsByName["Carciofino/9__root"]?.layer.removeAnimation(forKey: "Artichokes/OneQuarter_Rotation")
		self.viewsByName["Carciofino/9__root"]?.layer.removeAnimation(forKey: "Artichokes/OneQuarter_TranslationX")
		self.viewsByName["Carciofino/9__root"]?.layer.removeAnimation(forKey: "Artichokes/OneQuarter_TranslationY")
		self.viewsByName["Carciofino/1__root"]?.layer.removeAnimation(forKey: "Artichokes/OneQuarter_Rotation")
		self.viewsByName["Carciofino/1__root"]?.layer.removeAnimation(forKey: "Artichokes/OneQuarter_TranslationX")
		self.viewsByName["Carciofino/1__root"]?.layer.removeAnimation(forKey: "Artichokes/OneQuarter_TranslationY")
		self.viewsByName["Carciofino/4__root"]?.layer.removeAnimation(forKey: "Artichokes/OneQuarter_Rotation")
		self.viewsByName["Carciofino/4__root"]?.layer.removeAnimation(forKey: "Artichokes/OneQuarter_TranslationX")
		self.viewsByName["Carciofino/4__root"]?.layer.removeAnimation(forKey: "Artichokes/OneQuarter_TranslationY")
		self.viewsByName["Carciofino/5__root"]?.layer.removeAnimation(forKey: "Artichokes/OneQuarter_Rotation")
		self.viewsByName["Carciofino/5__root"]?.layer.removeAnimation(forKey: "Artichokes/OneQuarter_TranslationX")
		self.viewsByName["Carciofino/5__root"]?.layer.removeAnimation(forKey: "Artichokes/OneQuarter_TranslationY")
	}

	// - MARK: Arugula

	public func addArugulaAnimation() {
		addArugulaAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addArugulaAnimation(completion: ((Bool) -> Void)?) {
		addArugulaAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addArugulaAnimation(removedOnCompletion: Bool) {
		addArugulaAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addArugulaAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addArugulaAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addArugulaAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Arugula")
			self.animationCompletions[layer.animation(forKey: "Arugula")!] = complete
		}

		let rucola1RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		rucola1RotationAnimation.duration = 1.500
		rucola1RotationAnimation.values = [0.000, 0.879] as [Float]
		rucola1RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola1RotationAnimation.timingFunctions = [linearTiming]
		rucola1RotationAnimation.beginTime = beginTime
		rucola1RotationAnimation.fillMode = fillMode
		rucola1RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/1__root"]?.layer.add(rucola1RotationAnimation, forKey:"Arugula_Rotation")

		let rucola1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		rucola1TranslationXAnimation.duration = 1.500
		rucola1TranslationXAnimation.values = [0.000, 275.104] as [Float]
		rucola1TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola1TranslationXAnimation.timingFunctions = [anticOverTiming]
		rucola1TranslationXAnimation.beginTime = beginTime
		rucola1TranslationXAnimation.fillMode = fillMode
		rucola1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/1__root"]?.layer.add(rucola1TranslationXAnimation, forKey:"Arugula_TranslationX")

		let rucola1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		rucola1TranslationYAnimation.duration = 1.500
		rucola1TranslationYAnimation.values = [0.000, 145.193] as [Float]
		rucola1TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola1TranslationYAnimation.timingFunctions = [linearTiming]
		rucola1TranslationYAnimation.beginTime = beginTime
		rucola1TranslationYAnimation.fillMode = fillMode
		rucola1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/1__root"]?.layer.add(rucola1TranslationYAnimation, forKey:"Arugula_TranslationY")

		let rucola23RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		rucola23RotationAnimation.duration = 1.500
		rucola23RotationAnimation.values = [0.000, 0.125] as [Float]
		rucola23RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola23RotationAnimation.timingFunctions = [linearTiming]
		rucola23RotationAnimation.beginTime = beginTime
		rucola23RotationAnimation.fillMode = fillMode
		rucola23RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/23__root"]?.layer.add(rucola23RotationAnimation, forKey:"Arugula_Rotation")

		let rucola23TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		rucola23TranslationXAnimation.duration = 1.500
		rucola23TranslationXAnimation.values = [0.000, -261.896] as [Float]
		rucola23TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola23TranslationXAnimation.timingFunctions = [anticOverTiming]
		rucola23TranslationXAnimation.beginTime = beginTime
		rucola23TranslationXAnimation.fillMode = fillMode
		rucola23TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/23__root"]?.layer.add(rucola23TranslationXAnimation, forKey:"Arugula_TranslationX")

		let rucola23TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		rucola23TranslationYAnimation.duration = 1.500
		rucola23TranslationYAnimation.values = [0.000, -101.870] as [Float]
		rucola23TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola23TranslationYAnimation.timingFunctions = [linearTiming]
		rucola23TranslationYAnimation.beginTime = beginTime
		rucola23TranslationYAnimation.fillMode = fillMode
		rucola23TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/23__root"]?.layer.add(rucola23TranslationYAnimation, forKey:"Arugula_TranslationY")

		let rucola19TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		rucola19TranslationXAnimation.duration = 1.500
		rucola19TranslationXAnimation.values = [0.000, -277.078] as [Float]
		rucola19TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola19TranslationXAnimation.timingFunctions = [anticOverTiming]
		rucola19TranslationXAnimation.beginTime = beginTime
		rucola19TranslationXAnimation.fillMode = fillMode
		rucola19TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/19__root"]?.layer.add(rucola19TranslationXAnimation, forKey:"Arugula_TranslationX")

		let rucola19TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		rucola19TranslationYAnimation.duration = 1.500
		rucola19TranslationYAnimation.values = [0.000, 28.026] as [Float]
		rucola19TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola19TranslationYAnimation.timingFunctions = [linearTiming]
		rucola19TranslationYAnimation.beginTime = beginTime
		rucola19TranslationYAnimation.fillMode = fillMode
		rucola19TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/19__root"]?.layer.add(rucola19TranslationYAnimation, forKey:"Arugula_TranslationY")

		let rucola13RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		rucola13RotationAnimation.duration = 1.500
		rucola13RotationAnimation.values = [0.000, 0.187] as [Float]
		rucola13RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola13RotationAnimation.timingFunctions = [linearTiming]
		rucola13RotationAnimation.beginTime = beginTime
		rucola13RotationAnimation.fillMode = fillMode
		rucola13RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/13__root"]?.layer.add(rucola13RotationAnimation, forKey:"Arugula_Rotation")

		let rucola13TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		rucola13TranslationXAnimation.duration = 1.500
		rucola13TranslationXAnimation.values = [0.000, -302.875] as [Float]
		rucola13TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola13TranslationXAnimation.timingFunctions = [anticOverTiming]
		rucola13TranslationXAnimation.beginTime = beginTime
		rucola13TranslationXAnimation.fillMode = fillMode
		rucola13TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/13__root"]?.layer.add(rucola13TranslationXAnimation, forKey:"Arugula_TranslationX")

		let rucola13TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		rucola13TranslationYAnimation.duration = 1.500
		rucola13TranslationYAnimation.values = [0.000, 154.797] as [Float]
		rucola13TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola13TranslationYAnimation.timingFunctions = [linearTiming]
		rucola13TranslationYAnimation.beginTime = beginTime
		rucola13TranslationYAnimation.fillMode = fillMode
		rucola13TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/13__root"]?.layer.add(rucola13TranslationYAnimation, forKey:"Arugula_TranslationY")

		let rucola12RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		rucola12RotationAnimation.duration = 1.500
		rucola12RotationAnimation.values = [0.000, 2.643, 2.643] as [Float]
		rucola12RotationAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		rucola12RotationAnimation.timingFunctions = [linearTiming, linearTiming]
		rucola12RotationAnimation.beginTime = beginTime
		rucola12RotationAnimation.fillMode = fillMode
		rucola12RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/12__root"]?.layer.add(rucola12RotationAnimation, forKey:"Arugula_Rotation")

		let rucola12TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		rucola12TranslationXAnimation.duration = 1.500
		rucola12TranslationXAnimation.values = [0.000, 337.320, 337.320] as [Float]
		rucola12TranslationXAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		rucola12TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		rucola12TranslationXAnimation.beginTime = beginTime
		rucola12TranslationXAnimation.fillMode = fillMode
		rucola12TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/12__root"]?.layer.add(rucola12TranslationXAnimation, forKey:"Arugula_TranslationX")

		let rucola12TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		rucola12TranslationYAnimation.duration = 1.500
		rucola12TranslationYAnimation.values = [0.000, -265.597, -265.597] as [Float]
		rucola12TranslationYAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		rucola12TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		rucola12TranslationYAnimation.beginTime = beginTime
		rucola12TranslationYAnimation.fillMode = fillMode
		rucola12TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/12__root"]?.layer.add(rucola12TranslationYAnimation, forKey:"Arugula_TranslationY")

		let rucola9RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		rucola9RotationAnimation.duration = 1.500
		rucola9RotationAnimation.values = [0.000, 3.207] as [Float]
		rucola9RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola9RotationAnimation.timingFunctions = [linearTiming]
		rucola9RotationAnimation.beginTime = beginTime
		rucola9RotationAnimation.fillMode = fillMode
		rucola9RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/9__root"]?.layer.add(rucola9RotationAnimation, forKey:"Arugula_Rotation")

		let rucola9TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		rucola9TranslationXAnimation.duration = 1.500
		rucola9TranslationXAnimation.values = [0.000, 234.302] as [Float]
		rucola9TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola9TranslationXAnimation.timingFunctions = [anticOverTiming]
		rucola9TranslationXAnimation.beginTime = beginTime
		rucola9TranslationXAnimation.fillMode = fillMode
		rucola9TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/9__root"]?.layer.add(rucola9TranslationXAnimation, forKey:"Arugula_TranslationX")

		let rucola9TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		rucola9TranslationYAnimation.duration = 1.500
		rucola9TranslationYAnimation.values = [0.000, -44.349] as [Float]
		rucola9TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola9TranslationYAnimation.timingFunctions = [linearTiming]
		rucola9TranslationYAnimation.beginTime = beginTime
		rucola9TranslationYAnimation.fillMode = fillMode
		rucola9TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/9__root"]?.layer.add(rucola9TranslationYAnimation, forKey:"Arugula_TranslationY")

		let rucola20RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		rucola20RotationAnimation.duration = 1.500
		rucola20RotationAnimation.values = [0.000, 0.416] as [Float]
		rucola20RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola20RotationAnimation.timingFunctions = [linearTiming]
		rucola20RotationAnimation.beginTime = beginTime
		rucola20RotationAnimation.fillMode = fillMode
		rucola20RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/20__root"]?.layer.add(rucola20RotationAnimation, forKey:"Arugula_Rotation")

		let rucola20TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		rucola20TranslationXAnimation.duration = 1.500
		rucola20TranslationXAnimation.values = [0.000, -338.297] as [Float]
		rucola20TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola20TranslationXAnimation.timingFunctions = [anticOverTiming]
		rucola20TranslationXAnimation.beginTime = beginTime
		rucola20TranslationXAnimation.fillMode = fillMode
		rucola20TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/20__root"]?.layer.add(rucola20TranslationXAnimation, forKey:"Arugula_TranslationX")

		let rucola20TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		rucola20TranslationYAnimation.duration = 1.500
		rucola20TranslationYAnimation.values = [0.000, -64.089] as [Float]
		rucola20TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola20TranslationYAnimation.timingFunctions = [linearTiming]
		rucola20TranslationYAnimation.beginTime = beginTime
		rucola20TranslationYAnimation.fillMode = fillMode
		rucola20TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/20__root"]?.layer.add(rucola20TranslationYAnimation, forKey:"Arugula_TranslationY")

		let rucola5RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		rucola5RotationAnimation.duration = 1.500
		rucola5RotationAnimation.values = [0.000, -3.674] as [Float]
		rucola5RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola5RotationAnimation.timingFunctions = [linearTiming]
		rucola5RotationAnimation.beginTime = beginTime
		rucola5RotationAnimation.fillMode = fillMode
		rucola5RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/5__root"]?.layer.add(rucola5RotationAnimation, forKey:"Arugula_Rotation")

		let rucola5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		rucola5TranslationXAnimation.duration = 1.500
		rucola5TranslationXAnimation.values = [0.000, 220.776] as [Float]
		rucola5TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola5TranslationXAnimation.timingFunctions = [anticOverTiming]
		rucola5TranslationXAnimation.beginTime = beginTime
		rucola5TranslationXAnimation.fillMode = fillMode
		rucola5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/5__root"]?.layer.add(rucola5TranslationXAnimation, forKey:"Arugula_TranslationX")

		let rucola5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		rucola5TranslationYAnimation.duration = 1.500
		rucola5TranslationYAnimation.values = [0.000, 73.328] as [Float]
		rucola5TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola5TranslationYAnimation.timingFunctions = [linearTiming]
		rucola5TranslationYAnimation.beginTime = beginTime
		rucola5TranslationYAnimation.fillMode = fillMode
		rucola5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/5__root"]?.layer.add(rucola5TranslationYAnimation, forKey:"Arugula_TranslationY")

		let rucola11RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		rucola11RotationAnimation.duration = 1.500
		rucola11RotationAnimation.values = [0.000, -1.525] as [Float]
		rucola11RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola11RotationAnimation.timingFunctions = [linearTiming]
		rucola11RotationAnimation.beginTime = beginTime
		rucola11RotationAnimation.fillMode = fillMode
		rucola11RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/11__root"]?.layer.add(rucola11RotationAnimation, forKey:"Arugula_Rotation")

		let rucola11TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		rucola11TranslationXAnimation.duration = 1.500
		rucola11TranslationXAnimation.values = [0.000, 428.328] as [Float]
		rucola11TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola11TranslationXAnimation.timingFunctions = [anticOverTiming]
		rucola11TranslationXAnimation.beginTime = beginTime
		rucola11TranslationXAnimation.fillMode = fillMode
		rucola11TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/11__root"]?.layer.add(rucola11TranslationXAnimation, forKey:"Arugula_TranslationX")

		let rucola11TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		rucola11TranslationYAnimation.duration = 1.500
		rucola11TranslationYAnimation.values = [0.000, -39.010] as [Float]
		rucola11TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola11TranslationYAnimation.timingFunctions = [linearTiming]
		rucola11TranslationYAnimation.beginTime = beginTime
		rucola11TranslationYAnimation.fillMode = fillMode
		rucola11TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/11__root"]?.layer.add(rucola11TranslationYAnimation, forKey:"Arugula_TranslationY")

		let rucola15RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		rucola15RotationAnimation.duration = 1.500
		rucola15RotationAnimation.values = [0.000, 0.218] as [Float]
		rucola15RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola15RotationAnimation.timingFunctions = [linearTiming]
		rucola15RotationAnimation.beginTime = beginTime
		rucola15RotationAnimation.fillMode = fillMode
		rucola15RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/15__root"]?.layer.add(rucola15RotationAnimation, forKey:"Arugula_Rotation")

		let rucola15TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		rucola15TranslationXAnimation.duration = 1.500
		rucola15TranslationXAnimation.values = [0.000, -199.370] as [Float]
		rucola15TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola15TranslationXAnimation.timingFunctions = [anticOverTiming]
		rucola15TranslationXAnimation.beginTime = beginTime
		rucola15TranslationXAnimation.fillMode = fillMode
		rucola15TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/15__root"]?.layer.add(rucola15TranslationXAnimation, forKey:"Arugula_TranslationX")

		let rucola15TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		rucola15TranslationYAnimation.duration = 1.500
		rucola15TranslationYAnimation.values = [0.000, 80.958] as [Float]
		rucola15TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola15TranslationYAnimation.timingFunctions = [linearTiming]
		rucola15TranslationYAnimation.beginTime = beginTime
		rucola15TranslationYAnimation.fillMode = fillMode
		rucola15TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/15__root"]?.layer.add(rucola15TranslationYAnimation, forKey:"Arugula_TranslationY")

		let rucola6RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		rucola6RotationAnimation.duration = 1.500
		rucola6RotationAnimation.values = [0.000, -0.420] as [Float]
		rucola6RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola6RotationAnimation.timingFunctions = [linearTiming]
		rucola6RotationAnimation.beginTime = beginTime
		rucola6RotationAnimation.fillMode = fillMode
		rucola6RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/6__root"]?.layer.add(rucola6RotationAnimation, forKey:"Arugula_Rotation")

		let rucola6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		rucola6TranslationXAnimation.duration = 1.500
		rucola6TranslationXAnimation.values = [0.000, 230.802] as [Float]
		rucola6TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola6TranslationXAnimation.timingFunctions = [anticOverTiming]
		rucola6TranslationXAnimation.beginTime = beginTime
		rucola6TranslationXAnimation.fillMode = fillMode
		rucola6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/6__root"]?.layer.add(rucola6TranslationXAnimation, forKey:"Arugula_TranslationX")

		let rucola6TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		rucola6TranslationYAnimation.duration = 1.500
		rucola6TranslationYAnimation.values = [0.000, -4.516] as [Float]
		rucola6TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola6TranslationYAnimation.timingFunctions = [linearTiming]
		rucola6TranslationYAnimation.beginTime = beginTime
		rucola6TranslationYAnimation.fillMode = fillMode
		rucola6TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/6__root"]?.layer.add(rucola6TranslationYAnimation, forKey:"Arugula_TranslationY")

		let rucola22RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		rucola22RotationAnimation.duration = 1.500
		rucola22RotationAnimation.values = [0.000, 0.268] as [Float]
		rucola22RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola22RotationAnimation.timingFunctions = [linearTiming]
		rucola22RotationAnimation.beginTime = beginTime
		rucola22RotationAnimation.fillMode = fillMode
		rucola22RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/22__root"]?.layer.add(rucola22RotationAnimation, forKey:"Arugula_Rotation")

		let rucola22TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		rucola22TranslationXAnimation.duration = 1.500
		rucola22TranslationXAnimation.values = [0.000, -363.708] as [Float]
		rucola22TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola22TranslationXAnimation.timingFunctions = [anticOverTiming]
		rucola22TranslationXAnimation.beginTime = beginTime
		rucola22TranslationXAnimation.fillMode = fillMode
		rucola22TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/22__root"]?.layer.add(rucola22TranslationXAnimation, forKey:"Arugula_TranslationX")

		let rucola22TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		rucola22TranslationYAnimation.duration = 1.500
		rucola22TranslationYAnimation.values = [0.000, 48.542] as [Float]
		rucola22TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		rucola22TranslationYAnimation.timingFunctions = [linearTiming]
		rucola22TranslationYAnimation.beginTime = beginTime
		rucola22TranslationYAnimation.fillMode = fillMode
		rucola22TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Rucola/22__root"]?.layer.add(rucola22TranslationYAnimation, forKey:"Arugula_TranslationY")
	}

	public func removeArugulaAnimation() {
		self.layer.removeAnimation(forKey: "Arugula")
		self.viewsByName["Rucola/1__root"]?.layer.removeAnimation(forKey: "Arugula_Rotation")
		self.viewsByName["Rucola/1__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationX")
		self.viewsByName["Rucola/1__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationY")
		self.viewsByName["Rucola/23__root"]?.layer.removeAnimation(forKey: "Arugula_Rotation")
		self.viewsByName["Rucola/23__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationX")
		self.viewsByName["Rucola/23__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationY")
		self.viewsByName["Rucola/19__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationX")
		self.viewsByName["Rucola/19__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationY")
		self.viewsByName["Rucola/13__root"]?.layer.removeAnimation(forKey: "Arugula_Rotation")
		self.viewsByName["Rucola/13__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationX")
		self.viewsByName["Rucola/13__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationY")
		self.viewsByName["Rucola/12__root"]?.layer.removeAnimation(forKey: "Arugula_Rotation")
		self.viewsByName["Rucola/12__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationX")
		self.viewsByName["Rucola/12__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationY")
		self.viewsByName["Rucola/9__root"]?.layer.removeAnimation(forKey: "Arugula_Rotation")
		self.viewsByName["Rucola/9__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationX")
		self.viewsByName["Rucola/9__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationY")
		self.viewsByName["Rucola/20__root"]?.layer.removeAnimation(forKey: "Arugula_Rotation")
		self.viewsByName["Rucola/20__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationX")
		self.viewsByName["Rucola/20__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationY")
		self.viewsByName["Rucola/5__root"]?.layer.removeAnimation(forKey: "Arugula_Rotation")
		self.viewsByName["Rucola/5__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationX")
		self.viewsByName["Rucola/5__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationY")
		self.viewsByName["Rucola/11__root"]?.layer.removeAnimation(forKey: "Arugula_Rotation")
		self.viewsByName["Rucola/11__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationX")
		self.viewsByName["Rucola/11__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationY")
		self.viewsByName["Rucola/15__root"]?.layer.removeAnimation(forKey: "Arugula_Rotation")
		self.viewsByName["Rucola/15__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationX")
		self.viewsByName["Rucola/15__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationY")
		self.viewsByName["Rucola/6__root"]?.layer.removeAnimation(forKey: "Arugula_Rotation")
		self.viewsByName["Rucola/6__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationX")
		self.viewsByName["Rucola/6__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationY")
		self.viewsByName["Rucola/22__root"]?.layer.removeAnimation(forKey: "Arugula_Rotation")
		self.viewsByName["Rucola/22__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationX")
		self.viewsByName["Rucola/22__root"]?.layer.removeAnimation(forKey: "Arugula_TranslationY")
	}

	// - MARK: BakedHam

	public func addBakedHamAnimation() {
		addBakedHamAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addBakedHamAnimation(completion: ((Bool) -> Void)?) {
		addBakedHamAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addBakedHamAnimation(removedOnCompletion: Bool) {
		addBakedHamAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addBakedHamAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addBakedHamAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addBakedHamAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "BakedHam")
			self.animationCompletions[layer.animation(forKey: "BakedHam")!] = complete
		}

		let cotto3RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		cotto3RotationAnimation.duration = 1.500
		cotto3RotationAnimation.values = [0.000, 0.873] as [Float]
		cotto3RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto3RotationAnimation.timingFunctions = [linearTiming]
		cotto3RotationAnimation.beginTime = beginTime
		cotto3RotationAnimation.fillMode = fillMode
		cotto3RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/3__root"]?.layer.add(cotto3RotationAnimation, forKey:"BakedHam_Rotation")

		let cotto3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cotto3TranslationXAnimation.duration = 1.500
		cotto3TranslationXAnimation.values = [0.000, 210.000] as [Float]
		cotto3TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto3TranslationXAnimation.timingFunctions = [anticOverTiming]
		cotto3TranslationXAnimation.beginTime = beginTime
		cotto3TranslationXAnimation.fillMode = fillMode
		cotto3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/3__root"]?.layer.add(cotto3TranslationXAnimation, forKey:"BakedHam_TranslationX")

		let cotto3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cotto3TranslationYAnimation.duration = 1.500
		cotto3TranslationYAnimation.values = [0.000, 180.000] as [Float]
		cotto3TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto3TranslationYAnimation.timingFunctions = [linearTiming]
		cotto3TranslationYAnimation.beginTime = beginTime
		cotto3TranslationYAnimation.fillMode = fillMode
		cotto3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/3__root"]?.layer.add(cotto3TranslationYAnimation, forKey:"BakedHam_TranslationY")

		let cotto6RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		cotto6RotationAnimation.duration = 1.500
		cotto6RotationAnimation.values = [0.000, -0.349] as [Float]
		cotto6RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto6RotationAnimation.timingFunctions = [linearTiming]
		cotto6RotationAnimation.beginTime = beginTime
		cotto6RotationAnimation.fillMode = fillMode
		cotto6RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/6__root"]?.layer.add(cotto6RotationAnimation, forKey:"BakedHam_Rotation")

		let cotto6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cotto6TranslationXAnimation.duration = 1.500
		cotto6TranslationXAnimation.values = [0.000, -320.000] as [Float]
		cotto6TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto6TranslationXAnimation.timingFunctions = [anticOverTiming]
		cotto6TranslationXAnimation.beginTime = beginTime
		cotto6TranslationXAnimation.fillMode = fillMode
		cotto6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/6__root"]?.layer.add(cotto6TranslationXAnimation, forKey:"BakedHam_TranslationX")

		let cotto6TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cotto6TranslationYAnimation.duration = 1.500
		cotto6TranslationYAnimation.values = [0.000, -20.000] as [Float]
		cotto6TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto6TranslationYAnimation.timingFunctions = [linearTiming]
		cotto6TranslationYAnimation.beginTime = beginTime
		cotto6TranslationYAnimation.fillMode = fillMode
		cotto6TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/6__root"]?.layer.add(cotto6TranslationYAnimation, forKey:"BakedHam_TranslationY")

		let cotto8RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		cotto8RotationAnimation.duration = 1.500
		cotto8RotationAnimation.values = [0.000, 0.524] as [Float]
		cotto8RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto8RotationAnimation.timingFunctions = [linearTiming]
		cotto8RotationAnimation.beginTime = beginTime
		cotto8RotationAnimation.fillMode = fillMode
		cotto8RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/8__root"]?.layer.add(cotto8RotationAnimation, forKey:"BakedHam_Rotation")

		let cotto8TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cotto8TranslationXAnimation.duration = 1.500
		cotto8TranslationXAnimation.values = [0.000, -290.000] as [Float]
		cotto8TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto8TranslationXAnimation.timingFunctions = [linearTiming]
		cotto8TranslationXAnimation.beginTime = beginTime
		cotto8TranslationXAnimation.fillMode = fillMode
		cotto8TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/8__root"]?.layer.add(cotto8TranslationXAnimation, forKey:"BakedHam_TranslationX")

		let cotto8TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cotto8TranslationYAnimation.duration = 1.500
		cotto8TranslationYAnimation.values = [0.000, 50.000] as [Float]
		cotto8TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto8TranslationYAnimation.timingFunctions = [linearTiming]
		cotto8TranslationYAnimation.beginTime = beginTime
		cotto8TranslationYAnimation.fillMode = fillMode
		cotto8TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/8__root"]?.layer.add(cotto8TranslationYAnimation, forKey:"BakedHam_TranslationY")

		let cotto4RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		cotto4RotationAnimation.duration = 1.500
		cotto4RotationAnimation.values = [0.000, -0.349] as [Float]
		cotto4RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto4RotationAnimation.timingFunctions = [linearTiming]
		cotto4RotationAnimation.beginTime = beginTime
		cotto4RotationAnimation.fillMode = fillMode
		cotto4RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/4__root"]?.layer.add(cotto4RotationAnimation, forKey:"BakedHam_Rotation")

		let cotto4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cotto4TranslationXAnimation.duration = 1.500
		cotto4TranslationXAnimation.values = [0.000, -350.000] as [Float]
		cotto4TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto4TranslationXAnimation.timingFunctions = [anticOverTiming]
		cotto4TranslationXAnimation.beginTime = beginTime
		cotto4TranslationXAnimation.fillMode = fillMode
		cotto4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/4__root"]?.layer.add(cotto4TranslationXAnimation, forKey:"BakedHam_TranslationX")

		let cotto4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cotto4TranslationYAnimation.duration = 1.500
		cotto4TranslationYAnimation.values = [0.000, -80.000] as [Float]
		cotto4TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto4TranslationYAnimation.timingFunctions = [linearTiming]
		cotto4TranslationYAnimation.beginTime = beginTime
		cotto4TranslationYAnimation.fillMode = fillMode
		cotto4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/4__root"]?.layer.add(cotto4TranslationYAnimation, forKey:"BakedHam_TranslationY")

		let cotto1RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		cotto1RotationAnimation.duration = 1.500
		cotto1RotationAnimation.values = [0.000, -0.873, -0.873] as [Float]
		cotto1RotationAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		cotto1RotationAnimation.timingFunctions = [linearTiming, linearTiming]
		cotto1RotationAnimation.beginTime = beginTime
		cotto1RotationAnimation.fillMode = fillMode
		cotto1RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/1__root"]?.layer.add(cotto1RotationAnimation, forKey:"BakedHam_Rotation")

		let cotto1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cotto1TranslationXAnimation.duration = 1.500
		cotto1TranslationXAnimation.values = [0.000, 300.000, 300.000] as [Float]
		cotto1TranslationXAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		cotto1TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		cotto1TranslationXAnimation.beginTime = beginTime
		cotto1TranslationXAnimation.fillMode = fillMode
		cotto1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/1__root"]?.layer.add(cotto1TranslationXAnimation, forKey:"BakedHam_TranslationX")

		let cotto1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cotto1TranslationYAnimation.duration = 1.500
		cotto1TranslationYAnimation.values = [0.000, -120.000, -120.000] as [Float]
		cotto1TranslationYAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		cotto1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		cotto1TranslationYAnimation.beginTime = beginTime
		cotto1TranslationYAnimation.fillMode = fillMode
		cotto1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/1__root"]?.layer.add(cotto1TranslationYAnimation, forKey:"BakedHam_TranslationY")

		let cotto2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		cotto2RotationAnimation.duration = 1.500
		cotto2RotationAnimation.values = [0.000, -2.094] as [Float]
		cotto2RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto2RotationAnimation.timingFunctions = [linearTiming]
		cotto2RotationAnimation.beginTime = beginTime
		cotto2RotationAnimation.fillMode = fillMode
		cotto2RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/2__root"]?.layer.add(cotto2RotationAnimation, forKey:"BakedHam_Rotation")

		let cotto2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cotto2TranslationXAnimation.duration = 1.500
		cotto2TranslationXAnimation.values = [0.000, 320.000] as [Float]
		cotto2TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto2TranslationXAnimation.timingFunctions = [anticOverTiming]
		cotto2TranslationXAnimation.beginTime = beginTime
		cotto2TranslationXAnimation.fillMode = fillMode
		cotto2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/2__root"]?.layer.add(cotto2TranslationXAnimation, forKey:"BakedHam_TranslationX")

		let cotto2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cotto2TranslationYAnimation.duration = 1.500
		cotto2TranslationYAnimation.values = [0.000, 80.000] as [Float]
		cotto2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto2TranslationYAnimation.timingFunctions = [linearTiming]
		cotto2TranslationYAnimation.beginTime = beginTime
		cotto2TranslationYAnimation.fillMode = fillMode
		cotto2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/2__root"]?.layer.add(cotto2TranslationYAnimation, forKey:"BakedHam_TranslationY")
	}

	public func removeBakedHamAnimation() {
		self.layer.removeAnimation(forKey: "BakedHam")
		self.viewsByName["Cotto/3__root"]?.layer.removeAnimation(forKey: "BakedHam_Rotation")
		self.viewsByName["Cotto/3__root"]?.layer.removeAnimation(forKey: "BakedHam_TranslationX")
		self.viewsByName["Cotto/3__root"]?.layer.removeAnimation(forKey: "BakedHam_TranslationY")
		self.viewsByName["Cotto/6__root"]?.layer.removeAnimation(forKey: "BakedHam_Rotation")
		self.viewsByName["Cotto/6__root"]?.layer.removeAnimation(forKey: "BakedHam_TranslationX")
		self.viewsByName["Cotto/6__root"]?.layer.removeAnimation(forKey: "BakedHam_TranslationY")
		self.viewsByName["Cotto/8__root"]?.layer.removeAnimation(forKey: "BakedHam_Rotation")
		self.viewsByName["Cotto/8__root"]?.layer.removeAnimation(forKey: "BakedHam_TranslationX")
		self.viewsByName["Cotto/8__root"]?.layer.removeAnimation(forKey: "BakedHam_TranslationY")
		self.viewsByName["Cotto/4__root"]?.layer.removeAnimation(forKey: "BakedHam_Rotation")
		self.viewsByName["Cotto/4__root"]?.layer.removeAnimation(forKey: "BakedHam_TranslationX")
		self.viewsByName["Cotto/4__root"]?.layer.removeAnimation(forKey: "BakedHam_TranslationY")
		self.viewsByName["Cotto/1__root"]?.layer.removeAnimation(forKey: "BakedHam_Rotation")
		self.viewsByName["Cotto/1__root"]?.layer.removeAnimation(forKey: "BakedHam_TranslationX")
		self.viewsByName["Cotto/1__root"]?.layer.removeAnimation(forKey: "BakedHam_TranslationY")
		self.viewsByName["Cotto/2__root"]?.layer.removeAnimation(forKey: "BakedHam_Rotation")
		self.viewsByName["Cotto/2__root"]?.layer.removeAnimation(forKey: "BakedHam_TranslationX")
		self.viewsByName["Cotto/2__root"]?.layer.removeAnimation(forKey: "BakedHam_TranslationY")
	}

	// - MARK: BakedHam/OneQuarter

	public func addBakedHamOneQuarterAnimation() {
		addBakedHamOneQuarterAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addBakedHamOneQuarterAnimation(completion: ((Bool) -> Void)?) {
		addBakedHamOneQuarterAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addBakedHamOneQuarterAnimation(removedOnCompletion: Bool) {
		addBakedHamOneQuarterAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addBakedHamOneQuarterAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addBakedHamOneQuarterAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addBakedHamOneQuarterAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "BakedHamOneQuarter")
			self.animationCompletions[layer.animation(forKey: "BakedHamOneQuarter")!] = complete
		}

		let cotto3RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		cotto3RotationAnimation.duration = 1.500
		cotto3RotationAnimation.values = [0.000, 0.873] as [Float]
		cotto3RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto3RotationAnimation.timingFunctions = [linearTiming]
		cotto3RotationAnimation.beginTime = beginTime
		cotto3RotationAnimation.fillMode = fillMode
		cotto3RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/3__root"]?.layer.add(cotto3RotationAnimation, forKey:"BakedHam/OneQuarter_Rotation")

		let cotto3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cotto3TranslationXAnimation.duration = 1.500
		cotto3TranslationXAnimation.values = [0.000, 270.000] as [Float]
		cotto3TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto3TranslationXAnimation.timingFunctions = [anticOverTiming]
		cotto3TranslationXAnimation.beginTime = beginTime
		cotto3TranslationXAnimation.fillMode = fillMode
		cotto3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/3__root"]?.layer.add(cotto3TranslationXAnimation, forKey:"BakedHam/OneQuarter_TranslationX")

		let cotto3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cotto3TranslationYAnimation.duration = 1.500
		cotto3TranslationYAnimation.values = [0.000, 110.000] as [Float]
		cotto3TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto3TranslationYAnimation.timingFunctions = [linearTiming]
		cotto3TranslationYAnimation.beginTime = beginTime
		cotto3TranslationYAnimation.fillMode = fillMode
		cotto3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/3__root"]?.layer.add(cotto3TranslationYAnimation, forKey:"BakedHam/OneQuarter_TranslationY")

		let cotto6RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		cotto6RotationAnimation.duration = 1.500
		cotto6RotationAnimation.values = [0.000, -0.349] as [Float]
		cotto6RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto6RotationAnimation.timingFunctions = [linearTiming]
		cotto6RotationAnimation.beginTime = beginTime
		cotto6RotationAnimation.fillMode = fillMode
		cotto6RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/6__root"]?.layer.add(cotto6RotationAnimation, forKey:"BakedHam/OneQuarter_Rotation")

		let cotto6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cotto6TranslationXAnimation.duration = 1.500
		cotto6TranslationXAnimation.values = [0.000, -320.000] as [Float]
		cotto6TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto6TranslationXAnimation.timingFunctions = [anticOverTiming]
		cotto6TranslationXAnimation.beginTime = beginTime
		cotto6TranslationXAnimation.fillMode = fillMode
		cotto6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/6__root"]?.layer.add(cotto6TranslationXAnimation, forKey:"BakedHam/OneQuarter_TranslationX")

		let cotto6TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cotto6TranslationYAnimation.duration = 1.500
		cotto6TranslationYAnimation.values = [0.000, -160.000] as [Float]
		cotto6TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto6TranslationYAnimation.timingFunctions = [linearTiming]
		cotto6TranslationYAnimation.beginTime = beginTime
		cotto6TranslationYAnimation.fillMode = fillMode
		cotto6TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/6__root"]?.layer.add(cotto6TranslationYAnimation, forKey:"BakedHam/OneQuarter_TranslationY")

		let cotto8TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cotto8TranslationXAnimation.duration = 1.500
		cotto8TranslationXAnimation.values = [0.000, -340.000] as [Float]
		cotto8TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto8TranslationXAnimation.timingFunctions = [anticOverTiming]
		cotto8TranslationXAnimation.beginTime = beginTime
		cotto8TranslationXAnimation.fillMode = fillMode
		cotto8TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/8__root"]?.layer.add(cotto8TranslationXAnimation, forKey:"BakedHam/OneQuarter_TranslationX")

		let cotto8TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cotto8TranslationYAnimation.duration = 1.500
		cotto8TranslationYAnimation.values = [0.000, 30.000] as [Float]
		cotto8TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto8TranslationYAnimation.timingFunctions = [linearTiming]
		cotto8TranslationYAnimation.beginTime = beginTime
		cotto8TranslationYAnimation.fillMode = fillMode
		cotto8TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/8__root"]?.layer.add(cotto8TranslationYAnimation, forKey:"BakedHam/OneQuarter_TranslationY")

		let cotto4RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		cotto4RotationAnimation.duration = 1.500
		cotto4RotationAnimation.values = [0.000, -0.349] as [Float]
		cotto4RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto4RotationAnimation.timingFunctions = [linearTiming]
		cotto4RotationAnimation.beginTime = beginTime
		cotto4RotationAnimation.fillMode = fillMode
		cotto4RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/4__root"]?.layer.add(cotto4RotationAnimation, forKey:"BakedHam/OneQuarter_Rotation")

		let cotto4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cotto4TranslationXAnimation.duration = 1.500
		cotto4TranslationXAnimation.values = [0.000, -350.000] as [Float]
		cotto4TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto4TranslationXAnimation.timingFunctions = [anticOverTiming]
		cotto4TranslationXAnimation.beginTime = beginTime
		cotto4TranslationXAnimation.fillMode = fillMode
		cotto4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/4__root"]?.layer.add(cotto4TranslationXAnimation, forKey:"BakedHam/OneQuarter_TranslationX")

		let cotto4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cotto4TranslationYAnimation.duration = 1.500
		cotto4TranslationYAnimation.values = [0.000, -80.000] as [Float]
		cotto4TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto4TranslationYAnimation.timingFunctions = [linearTiming]
		cotto4TranslationYAnimation.beginTime = beginTime
		cotto4TranslationYAnimation.fillMode = fillMode
		cotto4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/4__root"]?.layer.add(cotto4TranslationYAnimation, forKey:"BakedHam/OneQuarter_TranslationY")

		let cotto1RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		cotto1RotationAnimation.duration = 1.500
		cotto1RotationAnimation.values = [0.000, -0.873, -0.873] as [Float]
		cotto1RotationAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		cotto1RotationAnimation.timingFunctions = [linearTiming, linearTiming]
		cotto1RotationAnimation.beginTime = beginTime
		cotto1RotationAnimation.fillMode = fillMode
		cotto1RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/1__root"]?.layer.add(cotto1RotationAnimation, forKey:"BakedHam/OneQuarter_Rotation")

		let cotto1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cotto1TranslationXAnimation.duration = 1.500
		cotto1TranslationXAnimation.values = [0.000, 300.000, 300.000] as [Float]
		cotto1TranslationXAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		cotto1TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		cotto1TranslationXAnimation.beginTime = beginTime
		cotto1TranslationXAnimation.fillMode = fillMode
		cotto1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/1__root"]?.layer.add(cotto1TranslationXAnimation, forKey:"BakedHam/OneQuarter_TranslationX")

		let cotto1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cotto1TranslationYAnimation.duration = 1.500
		cotto1TranslationYAnimation.values = [0.000, -120.000, -120.000] as [Float]
		cotto1TranslationYAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		cotto1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		cotto1TranslationYAnimation.beginTime = beginTime
		cotto1TranslationYAnimation.fillMode = fillMode
		cotto1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/1__root"]?.layer.add(cotto1TranslationYAnimation, forKey:"BakedHam/OneQuarter_TranslationY")

		let cotto2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		cotto2RotationAnimation.duration = 1.500
		cotto2RotationAnimation.values = [0.000, -2.094] as [Float]
		cotto2RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto2RotationAnimation.timingFunctions = [linearTiming]
		cotto2RotationAnimation.beginTime = beginTime
		cotto2RotationAnimation.fillMode = fillMode
		cotto2RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/2__root"]?.layer.add(cotto2RotationAnimation, forKey:"BakedHam/OneQuarter_Rotation")

		let cotto2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cotto2TranslationXAnimation.duration = 1.500
		cotto2TranslationXAnimation.values = [0.000, 320.000] as [Float]
		cotto2TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto2TranslationXAnimation.timingFunctions = [anticOverTiming]
		cotto2TranslationXAnimation.beginTime = beginTime
		cotto2TranslationXAnimation.fillMode = fillMode
		cotto2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/2__root"]?.layer.add(cotto2TranslationXAnimation, forKey:"BakedHam/OneQuarter_TranslationX")

		let cotto2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cotto2TranslationYAnimation.duration = 1.500
		cotto2TranslationYAnimation.values = [0.000, 20.000] as [Float]
		cotto2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cotto2TranslationYAnimation.timingFunctions = [linearTiming]
		cotto2TranslationYAnimation.beginTime = beginTime
		cotto2TranslationYAnimation.fillMode = fillMode
		cotto2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cotto/2__root"]?.layer.add(cotto2TranslationYAnimation, forKey:"BakedHam/OneQuarter_TranslationY")
	}

	public func removeBakedHamOneQuarterAnimation() {
		self.layer.removeAnimation(forKey: "BakedHamOneQuarter")
		self.viewsByName["Cotto/3__root"]?.layer.removeAnimation(forKey: "BakedHam/OneQuarter_Rotation")
		self.viewsByName["Cotto/3__root"]?.layer.removeAnimation(forKey: "BakedHam/OneQuarter_TranslationX")
		self.viewsByName["Cotto/3__root"]?.layer.removeAnimation(forKey: "BakedHam/OneQuarter_TranslationY")
		self.viewsByName["Cotto/6__root"]?.layer.removeAnimation(forKey: "BakedHam/OneQuarter_Rotation")
		self.viewsByName["Cotto/6__root"]?.layer.removeAnimation(forKey: "BakedHam/OneQuarter_TranslationX")
		self.viewsByName["Cotto/6__root"]?.layer.removeAnimation(forKey: "BakedHam/OneQuarter_TranslationY")
		self.viewsByName["Cotto/8__root"]?.layer.removeAnimation(forKey: "BakedHam/OneQuarter_TranslationX")
		self.viewsByName["Cotto/8__root"]?.layer.removeAnimation(forKey: "BakedHam/OneQuarter_TranslationY")
		self.viewsByName["Cotto/4__root"]?.layer.removeAnimation(forKey: "BakedHam/OneQuarter_Rotation")
		self.viewsByName["Cotto/4__root"]?.layer.removeAnimation(forKey: "BakedHam/OneQuarter_TranslationX")
		self.viewsByName["Cotto/4__root"]?.layer.removeAnimation(forKey: "BakedHam/OneQuarter_TranslationY")
		self.viewsByName["Cotto/1__root"]?.layer.removeAnimation(forKey: "BakedHam/OneQuarter_Rotation")
		self.viewsByName["Cotto/1__root"]?.layer.removeAnimation(forKey: "BakedHam/OneQuarter_TranslationX")
		self.viewsByName["Cotto/1__root"]?.layer.removeAnimation(forKey: "BakedHam/OneQuarter_TranslationY")
		self.viewsByName["Cotto/2__root"]?.layer.removeAnimation(forKey: "BakedHam/OneQuarter_Rotation")
		self.viewsByName["Cotto/2__root"]?.layer.removeAnimation(forKey: "BakedHam/OneQuarter_TranslationX")
		self.viewsByName["Cotto/2__root"]?.layer.removeAnimation(forKey: "BakedHam/OneQuarter_TranslationY")
	}

	// - MARK: Basil

	public func addBasilAnimation() {
		addBasilAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addBasilAnimation(completion: ((Bool) -> Void)?) {
		addBasilAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addBasilAnimation(removedOnCompletion: Bool) {
		addBasilAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addBasilAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addBasilAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addBasilAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Basil")
			self.animationCompletions[layer.animation(forKey: "Basil")!] = complete
		}
        
        let basilico2ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
        basilico2ScaleXAnimation.duration = 0.500
        basilico2ScaleXAnimation.values = [0.700, 0.300] as [Float]
        basilico2ScaleXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        basilico2ScaleXAnimation.timingFunctions = [linearTiming]
        basilico2ScaleXAnimation.beginTime = beginTime
        basilico2ScaleXAnimation.fillMode = fillMode
        basilico2ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Basilico/2__xScale"]?.layer.add(basilico2ScaleXAnimation, forKey:"Basil_ScaleX")
        
        let basilico2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
        basilico2ScaleYAnimation.duration = 0.500
        basilico2ScaleYAnimation.values = [0.700, 0.300] as [Float]
        basilico2ScaleYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        basilico2ScaleYAnimation.timingFunctions = [linearTiming]
        basilico2ScaleYAnimation.beginTime = beginTime
        basilico2ScaleYAnimation.fillMode = fillMode
        basilico2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Basilico/2__yScale"]?.layer.add(basilico2ScaleYAnimation, forKey:"Basil_ScaleY")

		let basilico2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		basilico2TranslationXAnimation.duration = 0.500
		basilico2TranslationXAnimation.values = [0.000, -282.000] as [Float]
		basilico2TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		basilico2TranslationXAnimation.timingFunctions = [linearTiming]
		basilico2TranslationXAnimation.beginTime = beginTime
		basilico2TranslationXAnimation.fillMode = fillMode
		basilico2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Basilico/2__root"]?.layer.add(basilico2TranslationXAnimation, forKey:"Basil_TranslationX")

		let basilico2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		basilico2TranslationYAnimation.duration = 0.500
		basilico2TranslationYAnimation.values = [0.000, -72.000] as [Float]
		basilico2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		basilico2TranslationYAnimation.timingFunctions = [linearTiming]
		basilico2TranslationYAnimation.beginTime = beginTime
		basilico2TranslationYAnimation.fillMode = fillMode
		basilico2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Basilico/2__root"]?.layer.add(basilico2TranslationYAnimation, forKey:"Basil_TranslationY")
        
        let basilico4ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
        basilico4ScaleXAnimation.duration = 0.500
        basilico4ScaleXAnimation.values = [0.700, 0.300] as [Float]
        basilico4ScaleXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        basilico4ScaleXAnimation.timingFunctions = [linearTiming]
        basilico4ScaleXAnimation.beginTime = beginTime
        basilico4ScaleXAnimation.fillMode = fillMode
        basilico4ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Basilico/4__xScale"]?.layer.add(basilico4ScaleXAnimation, forKey:"Basil_ScaleX")
        
        let basilico4ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
        basilico4ScaleYAnimation.duration = 0.500
        basilico4ScaleYAnimation.values = [0.700, 0.300] as [Float]
        basilico4ScaleYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        basilico4ScaleYAnimation.timingFunctions = [linearTiming]
        basilico4ScaleYAnimation.beginTime = beginTime
        basilico4ScaleYAnimation.fillMode = fillMode
        basilico4ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Basilico/4__yScale"]?.layer.add(basilico4ScaleYAnimation, forKey:"Basil_ScaleY")

		let basilico4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		basilico4TranslationXAnimation.duration = 0.500
		basilico4TranslationXAnimation.values = [0.000, 280.000] as [Float]
		basilico4TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		basilico4TranslationXAnimation.timingFunctions = [linearTiming]
		basilico4TranslationXAnimation.beginTime = beginTime
		basilico4TranslationXAnimation.fillMode = fillMode
		basilico4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Basilico/4__root"]?.layer.add(basilico4TranslationXAnimation, forKey:"Basil_TranslationX")

		let basilico4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		basilico4TranslationYAnimation.duration = 0.500
		basilico4TranslationYAnimation.values = [0.000, 110.000] as [Float]
		basilico4TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		basilico4TranslationYAnimation.timingFunctions = [linearTiming]
		basilico4TranslationYAnimation.beginTime = beginTime
		basilico4TranslationYAnimation.fillMode = fillMode
		basilico4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Basilico/4__root"]?.layer.add(basilico4TranslationYAnimation, forKey:"Basil_TranslationY")
	}

	public func removeBasilAnimation() {
        self.layer.removeAnimation(forKey: "Basil")
        self.viewsByName["Basilico/2__xScale"]?.layer.removeAnimation(forKey: "Basil_ScaleX")
        self.viewsByName["Basilico/2__yScale"]?.layer.removeAnimation(forKey: "Basil_ScaleY")
        self.viewsByName["Basilico/2__root"]?.layer.removeAnimation(forKey: "Basil_TranslationX")
        self.viewsByName["Basilico/2__root"]?.layer.removeAnimation(forKey: "Basil_TranslationY")
        self.viewsByName["Basilico/4__xScale"]?.layer.removeAnimation(forKey: "Basil_ScaleX")
        self.viewsByName["Basilico/4__yScale"]?.layer.removeAnimation(forKey: "Basil_ScaleY")
        self.viewsByName["Basilico/4__root"]?.layer.removeAnimation(forKey: "Basil_TranslationX")
        self.viewsByName["Basilico/4__root"]?.layer.removeAnimation(forKey: "Basil_TranslationY")
	}

	// - MARK: Capers

	public func addCapersAnimation() {
		addCapersAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addCapersAnimation(completion: ((Bool) -> Void)?) {
		addCapersAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addCapersAnimation(removedOnCompletion: Bool) {
		addCapersAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addCapersAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addCapersAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addCapersAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Capers")
			self.animationCompletions[layer.animation(forKey: "Capers")!] = complete
		}

		let cappero8TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cappero8TranslationXAnimation.duration = 1.500
		cappero8TranslationXAnimation.values = [0.000, 230.000] as [Float]
		cappero8TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cappero8TranslationXAnimation.timingFunctions = [anticOverTiming]
		cappero8TranslationXAnimation.beginTime = beginTime
		cappero8TranslationXAnimation.fillMode = fillMode
		cappero8TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cappero/8__root"]?.layer.add(cappero8TranslationXAnimation, forKey:"Capers_TranslationX")

		let cappero8TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cappero8TranslationYAnimation.duration = 1.500
		cappero8TranslationYAnimation.values = [0.000, -40.000] as [Float]
		cappero8TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cappero8TranslationYAnimation.timingFunctions = [linearTiming]
		cappero8TranslationYAnimation.beginTime = beginTime
		cappero8TranslationYAnimation.fillMode = fillMode
		cappero8TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cappero/8__root"]?.layer.add(cappero8TranslationYAnimation, forKey:"Capers_TranslationY")

		let cappero4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cappero4TranslationXAnimation.duration = 1.500
		cappero4TranslationXAnimation.values = [0.000, -230.000, -230.000] as [Float]
		cappero4TranslationXAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		cappero4TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		cappero4TranslationXAnimation.beginTime = beginTime
		cappero4TranslationXAnimation.fillMode = fillMode
		cappero4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cappero/4__root"]?.layer.add(cappero4TranslationXAnimation, forKey:"Capers_TranslationX")

		let cappero4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cappero4TranslationYAnimation.duration = 1.500
		cappero4TranslationYAnimation.values = [0.000, -60.000, -60.000] as [Float]
		cappero4TranslationYAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		cappero4TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		cappero4TranslationYAnimation.beginTime = beginTime
		cappero4TranslationYAnimation.fillMode = fillMode
		cappero4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cappero/4__root"]?.layer.add(cappero4TranslationYAnimation, forKey:"Capers_TranslationY")

		let cappero5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cappero5TranslationXAnimation.duration = 1.500
		cappero5TranslationXAnimation.values = [0.000, -260.000, -260.000] as [Float]
		cappero5TranslationXAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		cappero5TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		cappero5TranslationXAnimation.beginTime = beginTime
		cappero5TranslationXAnimation.fillMode = fillMode
		cappero5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cappero/5__root"]?.layer.add(cappero5TranslationXAnimation, forKey:"Capers_TranslationX")

		let cappero5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cappero5TranslationYAnimation.duration = 1.500
		cappero5TranslationYAnimation.values = [0.000, 110.000, 110.000] as [Float]
		cappero5TranslationYAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		cappero5TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		cappero5TranslationYAnimation.beginTime = beginTime
		cappero5TranslationYAnimation.fillMode = fillMode
		cappero5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cappero/5__root"]?.layer.add(cappero5TranslationYAnimation, forKey:"Capers_TranslationY")

		let cappero6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cappero6TranslationXAnimation.duration = 1.500
		cappero6TranslationXAnimation.values = [0.000, -250.000] as [Float]
		cappero6TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cappero6TranslationXAnimation.timingFunctions = [anticOverTiming]
		cappero6TranslationXAnimation.beginTime = beginTime
		cappero6TranslationXAnimation.fillMode = fillMode
		cappero6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cappero/6__root"]?.layer.add(cappero6TranslationXAnimation, forKey:"Capers_TranslationX")

		let cappero2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cappero2TranslationXAnimation.duration = 1.500
		cappero2TranslationXAnimation.values = [0.000, 240.000] as [Float]
		cappero2TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cappero2TranslationXAnimation.timingFunctions = [anticOverTiming]
		cappero2TranslationXAnimation.beginTime = beginTime
		cappero2TranslationXAnimation.fillMode = fillMode
		cappero2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cappero/2__root"]?.layer.add(cappero2TranslationXAnimation, forKey:"Capers_TranslationX")

		let cappero2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cappero2TranslationYAnimation.duration = 1.500
		cappero2TranslationYAnimation.values = [0.000, 40.000] as [Float]
		cappero2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cappero2TranslationYAnimation.timingFunctions = [linearTiming]
		cappero2TranslationYAnimation.beginTime = beginTime
		cappero2TranslationYAnimation.fillMode = fillMode
		cappero2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cappero/2__root"]?.layer.add(cappero2TranslationYAnimation, forKey:"Capers_TranslationY")

		let cappero7TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cappero7TranslationXAnimation.duration = 1.500
		cappero7TranslationXAnimation.values = [0.000, 270.000] as [Float]
		cappero7TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cappero7TranslationXAnimation.timingFunctions = [anticOverTiming]
		cappero7TranslationXAnimation.beginTime = beginTime
		cappero7TranslationXAnimation.fillMode = fillMode
		cappero7TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cappero/7__root"]?.layer.add(cappero7TranslationXAnimation, forKey:"Capers_TranslationX")

		let cappero7TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cappero7TranslationYAnimation.duration = 1.500
		cappero7TranslationYAnimation.values = [0.000, -60.000] as [Float]
		cappero7TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cappero7TranslationYAnimation.timingFunctions = [linearTiming]
		cappero7TranslationYAnimation.beginTime = beginTime
		cappero7TranslationYAnimation.fillMode = fillMode
		cappero7TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cappero/7__root"]?.layer.add(cappero7TranslationYAnimation, forKey:"Capers_TranslationY")
	}

	public func removeCapersAnimation() {
		self.layer.removeAnimation(forKey: "Capers")
		self.viewsByName["Cappero/8__root"]?.layer.removeAnimation(forKey: "Capers_TranslationX")
		self.viewsByName["Cappero/8__root"]?.layer.removeAnimation(forKey: "Capers_TranslationY")
		self.viewsByName["Cappero/4__root"]?.layer.removeAnimation(forKey: "Capers_TranslationX")
		self.viewsByName["Cappero/4__root"]?.layer.removeAnimation(forKey: "Capers_TranslationY")
		self.viewsByName["Cappero/5__root"]?.layer.removeAnimation(forKey: "Capers_TranslationX")
		self.viewsByName["Cappero/5__root"]?.layer.removeAnimation(forKey: "Capers_TranslationY")
		self.viewsByName["Cappero/6__root"]?.layer.removeAnimation(forKey: "Capers_TranslationX")
		self.viewsByName["Cappero/2__root"]?.layer.removeAnimation(forKey: "Capers_TranslationX")
		self.viewsByName["Cappero/2__root"]?.layer.removeAnimation(forKey: "Capers_TranslationY")
		self.viewsByName["Cappero/7__root"]?.layer.removeAnimation(forKey: "Capers_TranslationX")
		self.viewsByName["Cappero/7__root"]?.layer.removeAnimation(forKey: "Capers_TranslationY")
	}

	// - MARK: Chips

	public func addChipsAnimation() {
		addChipsAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addChipsAnimation(completion: ((Bool) -> Void)?) {
		addChipsAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addChipsAnimation(removedOnCompletion: Bool) {
		addChipsAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addChipsAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addChipsAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addChipsAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Chips")
			self.animationCompletions[layer.animation(forKey: "Chips")!] = complete
		}

		let patatine14RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		patatine14RotationAnimation.duration = 1.500
		patatine14RotationAnimation.values = [0.000, -0.175] as [Float]
		patatine14RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine14RotationAnimation.timingFunctions = [linearTiming]
		patatine14RotationAnimation.beginTime = beginTime
		patatine14RotationAnimation.fillMode = fillMode
		patatine14RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/14__root"]?.layer.add(patatine14RotationAnimation, forKey:"Chips_Rotation")

		let patatine14TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		patatine14TranslationXAnimation.duration = 1.500
		patatine14TranslationXAnimation.values = [0.000, -230.000] as [Float]
		patatine14TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine14TranslationXAnimation.timingFunctions = [anticOverTiming]
		patatine14TranslationXAnimation.beginTime = beginTime
		patatine14TranslationXAnimation.fillMode = fillMode
		patatine14TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/14__root"]?.layer.add(patatine14TranslationXAnimation, forKey:"Chips_TranslationX")

		let patatine14TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		patatine14TranslationYAnimation.duration = 1.500
		patatine14TranslationYAnimation.values = [0.000, 120.000] as [Float]
		patatine14TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine14TranslationYAnimation.timingFunctions = [linearTiming]
		patatine14TranslationYAnimation.beginTime = beginTime
		patatine14TranslationYAnimation.fillMode = fillMode
		patatine14TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/14__root"]?.layer.add(patatine14TranslationYAnimation, forKey:"Chips_TranslationY")

		let patatine7RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		patatine7RotationAnimation.duration = 1.500
		patatine7RotationAnimation.values = [0.000, -1.745] as [Float]
		patatine7RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine7RotationAnimation.timingFunctions = [linearTiming]
		patatine7RotationAnimation.beginTime = beginTime
		patatine7RotationAnimation.fillMode = fillMode
		patatine7RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/7__root"]?.layer.add(patatine7RotationAnimation, forKey:"Chips_Rotation")

		let patatine7TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		patatine7TranslationXAnimation.duration = 1.500
		patatine7TranslationXAnimation.values = [0.000, 280.000] as [Float]
		patatine7TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine7TranslationXAnimation.timingFunctions = [anticOverTiming]
		patatine7TranslationXAnimation.beginTime = beginTime
		patatine7TranslationXAnimation.fillMode = fillMode
		patatine7TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/7__root"]?.layer.add(patatine7TranslationXAnimation, forKey:"Chips_TranslationX")

		let patatine7TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		patatine7TranslationYAnimation.duration = 1.500
		patatine7TranslationYAnimation.values = [0.000, 100.000] as [Float]
		patatine7TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine7TranslationYAnimation.timingFunctions = [linearTiming]
		patatine7TranslationYAnimation.beginTime = beginTime
		patatine7TranslationYAnimation.fillMode = fillMode
		patatine7TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/7__root"]?.layer.add(patatine7TranslationYAnimation, forKey:"Chips_TranslationY")

		let patatine8RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		patatine8RotationAnimation.duration = 1.500
		patatine8RotationAnimation.values = [0.000, 1.745] as [Float]
		patatine8RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine8RotationAnimation.timingFunctions = [linearTiming]
		patatine8RotationAnimation.beginTime = beginTime
		patatine8RotationAnimation.fillMode = fillMode
		patatine8RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/8__root"]?.layer.add(patatine8RotationAnimation, forKey:"Chips_Rotation")

		let patatine8TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		patatine8TranslationXAnimation.duration = 1.500
		patatine8TranslationXAnimation.values = [0.000, 270.000] as [Float]
		patatine8TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine8TranslationXAnimation.timingFunctions = [anticOverTiming]
		patatine8TranslationXAnimation.beginTime = beginTime
		patatine8TranslationXAnimation.fillMode = fillMode
		patatine8TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/8__root"]?.layer.add(patatine8TranslationXAnimation, forKey:"Chips_TranslationX")

		let patatine8TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		patatine8TranslationYAnimation.duration = 1.500
		patatine8TranslationYAnimation.values = [0.000, 50.000] as [Float]
		patatine8TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine8TranslationYAnimation.timingFunctions = [linearTiming]
		patatine8TranslationYAnimation.beginTime = beginTime
		patatine8TranslationYAnimation.fillMode = fillMode
		patatine8TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/8__root"]?.layer.add(patatine8TranslationYAnimation, forKey:"Chips_TranslationY")

		let patatine15RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		patatine15RotationAnimation.duration = 1.500
		patatine15RotationAnimation.values = [0.000, 0.175] as [Float]
		patatine15RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine15RotationAnimation.timingFunctions = [linearTiming]
		patatine15RotationAnimation.beginTime = beginTime
		patatine15RotationAnimation.fillMode = fillMode
		patatine15RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/15__root"]?.layer.add(patatine15RotationAnimation, forKey:"Chips_Rotation")

		let patatine15TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		patatine15TranslationXAnimation.duration = 1.500
		patatine15TranslationXAnimation.values = [0.000, 240.000] as [Float]
		patatine15TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine15TranslationXAnimation.timingFunctions = [anticOverTiming]
		patatine15TranslationXAnimation.beginTime = beginTime
		patatine15TranslationXAnimation.fillMode = fillMode
		patatine15TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/15__root"]?.layer.add(patatine15TranslationXAnimation, forKey:"Chips_TranslationX")

		let patatine15TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		patatine15TranslationYAnimation.duration = 1.500
		patatine15TranslationYAnimation.values = [0.000, 100.000] as [Float]
		patatine15TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine15TranslationYAnimation.timingFunctions = [linearTiming]
		patatine15TranslationYAnimation.beginTime = beginTime
		patatine15TranslationYAnimation.fillMode = fillMode
		patatine15TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/15__root"]?.layer.add(patatine15TranslationYAnimation, forKey:"Chips_TranslationY")

		let patatine5RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		patatine5RotationAnimation.duration = 1.500
		patatine5RotationAnimation.values = [0.000, -0.175] as [Float]
		patatine5RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine5RotationAnimation.timingFunctions = [linearTiming]
		patatine5RotationAnimation.beginTime = beginTime
		patatine5RotationAnimation.fillMode = fillMode
		patatine5RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/5__root"]?.layer.add(patatine5RotationAnimation, forKey:"Chips_Rotation")

		let patatine5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		patatine5TranslationXAnimation.duration = 1.500
		patatine5TranslationXAnimation.values = [0.000, -200.000] as [Float]
		patatine5TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine5TranslationXAnimation.timingFunctions = [anticOverTiming]
		patatine5TranslationXAnimation.beginTime = beginTime
		patatine5TranslationXAnimation.fillMode = fillMode
		patatine5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/5__root"]?.layer.add(patatine5TranslationXAnimation, forKey:"Chips_TranslationX")

		let patatine5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		patatine5TranslationYAnimation.duration = 1.500
		patatine5TranslationYAnimation.values = [0.000, -20.000] as [Float]
		patatine5TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine5TranslationYAnimation.timingFunctions = [linearTiming]
		patatine5TranslationYAnimation.beginTime = beginTime
		patatine5TranslationYAnimation.fillMode = fillMode
		patatine5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/5__root"]?.layer.add(patatine5TranslationYAnimation, forKey:"Chips_TranslationY")

		let patatine3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		patatine3TranslationXAnimation.duration = 1.500
		patatine3TranslationXAnimation.values = [0.000, -320.000] as [Float]
		patatine3TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine3TranslationXAnimation.timingFunctions = [anticOverTiming]
		patatine3TranslationXAnimation.beginTime = beginTime
		patatine3TranslationXAnimation.fillMode = fillMode
		patatine3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/3__root"]?.layer.add(patatine3TranslationXAnimation, forKey:"Chips_TranslationX")

		let patatine3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		patatine3TranslationYAnimation.duration = 1.500
		patatine3TranslationYAnimation.values = [0.000, 60.000] as [Float]
		patatine3TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine3TranslationYAnimation.timingFunctions = [linearTiming]
		patatine3TranslationYAnimation.beginTime = beginTime
		patatine3TranslationYAnimation.fillMode = fillMode
		patatine3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/3__root"]?.layer.add(patatine3TranslationYAnimation, forKey:"Chips_TranslationY")

		let patatine11RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		patatine11RotationAnimation.duration = 1.500
		patatine11RotationAnimation.values = [0.000, -1.222] as [Float]
		patatine11RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine11RotationAnimation.timingFunctions = [linearTiming]
		patatine11RotationAnimation.beginTime = beginTime
		patatine11RotationAnimation.fillMode = fillMode
		patatine11RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/11__root"]?.layer.add(patatine11RotationAnimation, forKey:"Chips_Rotation")

		let patatine11TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		patatine11TranslationXAnimation.duration = 1.500
		patatine11TranslationXAnimation.values = [0.000, 260.000] as [Float]
		patatine11TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine11TranslationXAnimation.timingFunctions = [anticOverTiming]
		patatine11TranslationXAnimation.beginTime = beginTime
		patatine11TranslationXAnimation.fillMode = fillMode
		patatine11TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/11__root"]?.layer.add(patatine11TranslationXAnimation, forKey:"Chips_TranslationX")

		let patatine11TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		patatine11TranslationYAnimation.duration = 1.500
		patatine11TranslationYAnimation.values = [0.000, 60.000] as [Float]
		patatine11TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine11TranslationYAnimation.timingFunctions = [linearTiming]
		patatine11TranslationYAnimation.beginTime = beginTime
		patatine11TranslationYAnimation.fillMode = fillMode
		patatine11TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/11__root"]?.layer.add(patatine11TranslationYAnimation, forKey:"Chips_TranslationY")

		let patatine10RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		patatine10RotationAnimation.duration = 1.500
		patatine10RotationAnimation.values = [0.000, -0.873] as [Float]
		patatine10RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine10RotationAnimation.timingFunctions = [linearTiming]
		patatine10RotationAnimation.beginTime = beginTime
		patatine10RotationAnimation.fillMode = fillMode
		patatine10RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/10__root"]?.layer.add(patatine10RotationAnimation, forKey:"Chips_Rotation")

		let patatine10TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		patatine10TranslationXAnimation.duration = 1.500
		patatine10TranslationXAnimation.values = [0.000, -220.000] as [Float]
		patatine10TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine10TranslationXAnimation.timingFunctions = [anticOverTiming]
		patatine10TranslationXAnimation.beginTime = beginTime
		patatine10TranslationXAnimation.fillMode = fillMode
		patatine10TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/10__root"]?.layer.add(patatine10TranslationXAnimation, forKey:"Chips_TranslationX")

		let patatine10TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		patatine10TranslationYAnimation.duration = 1.500
		patatine10TranslationYAnimation.values = [0.000, 140.000] as [Float]
		patatine10TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		patatine10TranslationYAnimation.timingFunctions = [linearTiming]
		patatine10TranslationYAnimation.beginTime = beginTime
		patatine10TranslationYAnimation.fillMode = fillMode
		patatine10TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Patatine/10__root"]?.layer.add(patatine10TranslationYAnimation, forKey:"Chips_TranslationY")
	}

	public func removeChipsAnimation() {
		self.layer.removeAnimation(forKey: "Chips")
		self.viewsByName["Patatine/14__root"]?.layer.removeAnimation(forKey: "Chips_Rotation")
		self.viewsByName["Patatine/14__root"]?.layer.removeAnimation(forKey: "Chips_TranslationX")
		self.viewsByName["Patatine/14__root"]?.layer.removeAnimation(forKey: "Chips_TranslationY")
		self.viewsByName["Patatine/7__root"]?.layer.removeAnimation(forKey: "Chips_Rotation")
		self.viewsByName["Patatine/7__root"]?.layer.removeAnimation(forKey: "Chips_TranslationX")
		self.viewsByName["Patatine/7__root"]?.layer.removeAnimation(forKey: "Chips_TranslationY")
		self.viewsByName["Patatine/8__root"]?.layer.removeAnimation(forKey: "Chips_Rotation")
		self.viewsByName["Patatine/8__root"]?.layer.removeAnimation(forKey: "Chips_TranslationX")
		self.viewsByName["Patatine/8__root"]?.layer.removeAnimation(forKey: "Chips_TranslationY")
		self.viewsByName["Patatine/15__root"]?.layer.removeAnimation(forKey: "Chips_Rotation")
		self.viewsByName["Patatine/15__root"]?.layer.removeAnimation(forKey: "Chips_TranslationX")
		self.viewsByName["Patatine/15__root"]?.layer.removeAnimation(forKey: "Chips_TranslationY")
		self.viewsByName["Patatine/5__root"]?.layer.removeAnimation(forKey: "Chips_Rotation")
		self.viewsByName["Patatine/5__root"]?.layer.removeAnimation(forKey: "Chips_TranslationX")
		self.viewsByName["Patatine/5__root"]?.layer.removeAnimation(forKey: "Chips_TranslationY")
		self.viewsByName["Patatine/3__root"]?.layer.removeAnimation(forKey: "Chips_TranslationX")
		self.viewsByName["Patatine/3__root"]?.layer.removeAnimation(forKey: "Chips_TranslationY")
		self.viewsByName["Patatine/11__root"]?.layer.removeAnimation(forKey: "Chips_Rotation")
		self.viewsByName["Patatine/11__root"]?.layer.removeAnimation(forKey: "Chips_TranslationX")
		self.viewsByName["Patatine/11__root"]?.layer.removeAnimation(forKey: "Chips_TranslationY")
		self.viewsByName["Patatine/10__root"]?.layer.removeAnimation(forKey: "Chips_Rotation")
		self.viewsByName["Patatine/10__root"]?.layer.removeAnimation(forKey: "Chips_TranslationX")
		self.viewsByName["Patatine/10__root"]?.layer.removeAnimation(forKey: "Chips_TranslationY")
	}

	// - MARK: Corn

	public func addCornAnimation() {
		addCornAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addCornAnimation(completion: ((Bool) -> Void)?) {
		addCornAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addCornAnimation(removedOnCompletion: Bool) {
		addCornAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addCornAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addCornAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addCornAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 2.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Corn")
			self.animationCompletions[layer.animation(forKey: "Corn")!] = complete
		}

		let mais122OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		mais122OpacityAnimation.duration = 2.000
		mais122OpacityAnimation.values = [0.000, 1.000] as [Float]
		mais122OpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		mais122OpacityAnimation.timingFunctions = [linearTiming]
		mais122OpacityAnimation.beginTime = beginTime
		mais122OpacityAnimation.fillMode = fillMode
		mais122OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mais//1__root"]?.layer.add(mais122OpacityAnimation, forKey:"Corn_Opacity")

		let mais122ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		mais122ScaleXAnimation.duration = 2.000
		mais122ScaleXAnimation.values = [1.000, 3.000] as [Float]
		mais122ScaleXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		mais122ScaleXAnimation.timingFunctions = [linearTiming]
		mais122ScaleXAnimation.beginTime = beginTime
		mais122ScaleXAnimation.fillMode = fillMode
		mais122ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mais//1__xScale"]?.layer.add(mais122ScaleXAnimation, forKey:"Corn_ScaleX")

		let mais122ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		mais122ScaleYAnimation.duration = 2.000
		mais122ScaleYAnimation.values = [1.000, 3.000] as [Float]
		mais122ScaleYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		mais122ScaleYAnimation.timingFunctions = [linearTiming]
		mais122ScaleYAnimation.beginTime = beginTime
		mais122ScaleYAnimation.fillMode = fillMode
		mais122ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mais//1__yScale"]?.layer.add(mais122ScaleYAnimation, forKey:"Corn_ScaleY")
	}

	public func removeCornAnimation() {
		self.layer.removeAnimation(forKey: "Corn")
		self.viewsByName["Mais//1__root"]?.layer.removeAnimation(forKey: "Corn_Opacity")
		self.viewsByName["Mais//1__xScale"]?.layer.removeAnimation(forKey: "Corn_ScaleX")
		self.viewsByName["Mais//1__yScale"]?.layer.removeAnimation(forKey: "Corn_ScaleY")
	}

	// - MARK: Dough

	public func addDoughAnimation() {
		addDoughAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addDoughAnimation(completion: ((Bool) -> Void)?) {
		addDoughAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addDoughAnimation(removedOnCompletion: Bool) {
		addDoughAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addDoughAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addDoughAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addDoughAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 4.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Dough")
			self.animationCompletions[layer.animation(forKey: "Dough")!] = complete
		}

		let baseRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		baseRotationAnimation.duration = 6.000
		baseRotationAnimation.values = [0.000, 0.000, -0.785, -0.785, -1.571, -1.571, -2.356, -2.356, -3.142, -3.142, -3.927, -3.927, -4.712, -4.712, -5.498, -5.498, -6.283] as [Float]
		baseRotationAnimation.keyTimes = [0.000, 0.062, 0.125, 0.188, 0.250, 0.312, 0.375, 0.438, 0.500, 0.562, 0.625, 0.688, 0.750, 0.812, 0.875, 0.938, 1.000] as [NSNumber]
		baseRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		baseRotationAnimation.beginTime = beginTime
		baseRotationAnimation.fillMode = fillMode
		baseRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Base__root"]?.layer.add(baseRotationAnimation, forKey:"Dough_Rotation")

		let baseScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		baseScaleXAnimation.duration = 6.000
		baseScaleXAnimation.values = [0.100, 0.175, 0.150, 0.150, 0.225, 0.200, 0.200, 0.275, 0.250, 0.250, 0.325, 0.300, 0.300] as [Float]
		baseScaleXAnimation.keyTimes = [0.000, 0.062, 0.087, 0.250, 0.312, 0.338, 0.500, 0.562, 0.587, 0.750, 0.812, 0.837, 1.000] as [NSNumber]
		baseScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		baseScaleXAnimation.beginTime = beginTime
		baseScaleXAnimation.fillMode = fillMode
		baseScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Base__xScale"]?.layer.add(baseScaleXAnimation, forKey:"Dough_ScaleX")

		let baseScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		baseScaleYAnimation.duration = 6.000
		baseScaleYAnimation.values = [0.100, 0.175, 0.150, 0.150, 0.225, 0.200, 0.200, 0.275, 0.250, 0.250, 0.325, 0.300, 0.300] as [Float]
		baseScaleYAnimation.keyTimes = [0.000, 0.125, 0.188, 0.213, 0.375, 0.438, 0.463, 0.625, 0.688, 0.712, 0.875, 0.938, 0.962, 1.000] as [NSNumber]
		baseScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		baseScaleYAnimation.beginTime = beginTime
		baseScaleYAnimation.fillMode = fillMode
		baseScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Base__yScale"]?.layer.add(baseScaleYAnimation, forKey:"Dough_ScaleY")
	}

	public func removeDoughAnimation() {
		self.layer.removeAnimation(forKey: "Dough")
		self.viewsByName["Base__root"]?.layer.removeAnimation(forKey: "Dough_Rotation")
		self.viewsByName["Base__xScale"]?.layer.removeAnimation(forKey: "Dough_ScaleX")
		self.viewsByName["Base__yScale"]?.layer.removeAnimation(forKey: "Dough_ScaleY")
	}
    
    // - MARK: Eggplants
    
    public func addEggplantsAnimation() {
        addEggplantsAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
    }
    
    public func addEggplantsAnimation(completion: ((Bool) -> Void)?) {
        addEggplantsAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
    }
    
    public func addEggplantsAnimation(removedOnCompletion: Bool) {
        addEggplantsAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
    }
    
    public func addEggplantsAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
        addEggplantsAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
    }
    
    public func addEggplantsAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
        let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
        let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
        if let complete = completion {
            let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
            representativeAnimation.duration = 1.500
            representativeAnimation.delegate = self
            self.layer.add(representativeAnimation, forKey: "Eggplants")
            self.animationCompletions[layer.animation(forKey: "Eggplants")!] = complete
        }
        
        let melanzana4RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
        melanzana4RotationAnimation.duration = 1.500
        melanzana4RotationAnimation.values = [0.000, 2.007] as [Float]
        melanzana4RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        melanzana4RotationAnimation.timingFunctions = [linearTiming]
        melanzana4RotationAnimation.beginTime = beginTime
        melanzana4RotationAnimation.fillMode = fillMode
        melanzana4RotationAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Melanzana/4__root"]?.layer.add(melanzana4RotationAnimation, forKey:"Eggplants_Rotation")
        
        let melanzana4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        melanzana4TranslationXAnimation.duration = 1.500
        melanzana4TranslationXAnimation.values = [0.000, 180.000] as [Float]
        melanzana4TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        melanzana4TranslationXAnimation.timingFunctions = [anticOverTiming]
        melanzana4TranslationXAnimation.beginTime = beginTime
        melanzana4TranslationXAnimation.fillMode = fillMode
        melanzana4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Melanzana/4__root"]?.layer.add(melanzana4TranslationXAnimation, forKey:"Eggplants_TranslationX")
        
        let melanzana4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        melanzana4TranslationYAnimation.duration = 1.500
        melanzana4TranslationYAnimation.values = [0.000, -100.000] as [Float]
        melanzana4TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        melanzana4TranslationYAnimation.timingFunctions = [linearTiming]
        melanzana4TranslationYAnimation.beginTime = beginTime
        melanzana4TranslationYAnimation.fillMode = fillMode
        melanzana4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Melanzana/4__root"]?.layer.add(melanzana4TranslationYAnimation, forKey:"Eggplants_TranslationY")
        
        let melanzana5RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
        melanzana5RotationAnimation.duration = 1.500
        melanzana5RotationAnimation.values = [0.000, 0.577] as [Float]
        melanzana5RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        melanzana5RotationAnimation.timingFunctions = [linearTiming]
        melanzana5RotationAnimation.beginTime = beginTime
        melanzana5RotationAnimation.fillMode = fillMode
        melanzana5RotationAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Melanzana/5__root"]?.layer.add(melanzana5RotationAnimation, forKey:"Eggplants_Rotation")
        
        let melanzana5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        melanzana5TranslationXAnimation.duration = 1.500
        melanzana5TranslationXAnimation.values = [0.000, -220.000] as [Float]
        melanzana5TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        melanzana5TranslationXAnimation.timingFunctions = [anticOverTiming]
        melanzana5TranslationXAnimation.beginTime = beginTime
        melanzana5TranslationXAnimation.fillMode = fillMode
        melanzana5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Melanzana/5__root"]?.layer.add(melanzana5TranslationXAnimation, forKey:"Eggplants_TranslationX")
        
        let melanzana5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        melanzana5TranslationYAnimation.duration = 1.500
        melanzana5TranslationYAnimation.values = [0.000, 140.000] as [Float]
        melanzana5TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        melanzana5TranslationYAnimation.timingFunctions = [linearTiming]
        melanzana5TranslationYAnimation.beginTime = beginTime
        melanzana5TranslationYAnimation.fillMode = fillMode
        melanzana5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Melanzana/5__root"]?.layer.add(melanzana5TranslationYAnimation, forKey:"Eggplants_TranslationY")
        
        let melanzana9TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        melanzana9TranslationXAnimation.duration = 1.500
        melanzana9TranslationXAnimation.values = [0.000, -300.000] as [Float]
        melanzana9TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        melanzana9TranslationXAnimation.timingFunctions = [anticOverTiming]
        melanzana9TranslationXAnimation.beginTime = beginTime
        melanzana9TranslationXAnimation.fillMode = fillMode
        melanzana9TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Melanzana/9__root"]?.layer.add(melanzana9TranslationXAnimation, forKey:"Eggplants_TranslationX")
        
        let melanzana9TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        melanzana9TranslationYAnimation.duration = 1.500
        melanzana9TranslationYAnimation.values = [0.000, -60.000] as [Float]
        melanzana9TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        melanzana9TranslationYAnimation.timingFunctions = [linearTiming]
        melanzana9TranslationYAnimation.beginTime = beginTime
        melanzana9TranslationYAnimation.fillMode = fillMode
        melanzana9TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Melanzana/9__root"]?.layer.add(melanzana9TranslationYAnimation, forKey:"Eggplants_TranslationY")
        
        let melanzana6RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
        melanzana6RotationAnimation.duration = 1.500
        melanzana6RotationAnimation.values = [0.000, -0.831] as [Float]
        melanzana6RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        melanzana6RotationAnimation.timingFunctions = [linearTiming]
        melanzana6RotationAnimation.beginTime = beginTime
        melanzana6RotationAnimation.fillMode = fillMode
        melanzana6RotationAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Melanzana/6__root"]?.layer.add(melanzana6RotationAnimation, forKey:"Eggplants_Rotation")
        
        let melanzana6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        melanzana6TranslationXAnimation.duration = 1.500
        melanzana6TranslationXAnimation.values = [0.000, -200.000] as [Float]
        melanzana6TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        melanzana6TranslationXAnimation.timingFunctions = [anticOverTiming]
        melanzana6TranslationXAnimation.beginTime = beginTime
        melanzana6TranslationXAnimation.fillMode = fillMode
        melanzana6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Melanzana/6__root"]?.layer.add(melanzana6TranslationXAnimation, forKey:"Eggplants_TranslationX")
        
        let melanzana6TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        melanzana6TranslationYAnimation.duration = 1.500
        melanzana6TranslationYAnimation.values = [0.000, 150.000] as [Float]
        melanzana6TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        melanzana6TranslationYAnimation.timingFunctions = [linearTiming]
        melanzana6TranslationYAnimation.beginTime = beginTime
        melanzana6TranslationYAnimation.fillMode = fillMode
        melanzana6TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Melanzana/6__root"]?.layer.add(melanzana6TranslationYAnimation, forKey:"Eggplants_TranslationY")
        
        let melanzana1RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
        melanzana1RotationAnimation.duration = 1.500
        melanzana1RotationAnimation.values = [0.000, -0.304] as [Float]
        melanzana1RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        melanzana1RotationAnimation.timingFunctions = [linearTiming]
        melanzana1RotationAnimation.beginTime = beginTime
        melanzana1RotationAnimation.fillMode = fillMode
        melanzana1RotationAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Melanzana/1__root"]?.layer.add(melanzana1RotationAnimation, forKey:"Eggplants_Rotation")
        
        let melanzana1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        melanzana1TranslationXAnimation.duration = 1.500
        melanzana1TranslationXAnimation.values = [0.000, 230.000] as [Float]
        melanzana1TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        melanzana1TranslationXAnimation.timingFunctions = [anticOverTiming]
        melanzana1TranslationXAnimation.beginTime = beginTime
        melanzana1TranslationXAnimation.fillMode = fillMode
        melanzana1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Melanzana/1__root"]?.layer.add(melanzana1TranslationXAnimation, forKey:"Eggplants_TranslationX")
        
        let melanzana1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        melanzana1TranslationYAnimation.duration = 1.500
        melanzana1TranslationYAnimation.values = [0.000, 100.026] as [Float]
        melanzana1TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        melanzana1TranslationYAnimation.timingFunctions = [linearTiming]
        melanzana1TranslationYAnimation.beginTime = beginTime
        melanzana1TranslationYAnimation.fillMode = fillMode
        melanzana1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Melanzana/1__root"]?.layer.add(melanzana1TranslationYAnimation, forKey:"Eggplants_TranslationY")
        
        let melanzana2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
        melanzana2RotationAnimation.duration = 1.500
        melanzana2RotationAnimation.values = [0.000, 0.409] as [Float]
        melanzana2RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        melanzana2RotationAnimation.timingFunctions = [linearTiming]
        melanzana2RotationAnimation.beginTime = beginTime
        melanzana2RotationAnimation.fillMode = fillMode
        melanzana2RotationAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Melanzana/2__root"]?.layer.add(melanzana2RotationAnimation, forKey:"Eggplants_Rotation")
        
        let melanzana2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        melanzana2TranslationXAnimation.duration = 1.500
        melanzana2TranslationXAnimation.values = [0.000, 270.000] as [Float]
        melanzana2TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        melanzana2TranslationXAnimation.timingFunctions = [anticOverTiming]
        melanzana2TranslationXAnimation.beginTime = beginTime
        melanzana2TranslationXAnimation.fillMode = fillMode
        melanzana2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Melanzana/2__root"]?.layer.add(melanzana2TranslationXAnimation, forKey:"Eggplants_TranslationX")
        
        let melanzana2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        melanzana2TranslationYAnimation.duration = 1.500
        melanzana2TranslationYAnimation.values = [0.000, 110.000] as [Float]
        melanzana2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        melanzana2TranslationYAnimation.timingFunctions = [linearTiming]
        melanzana2TranslationYAnimation.beginTime = beginTime
        melanzana2TranslationYAnimation.fillMode = fillMode
        melanzana2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Melanzana/2__root"]?.layer.add(melanzana2TranslationYAnimation, forKey:"Eggplants_TranslationY")
    }
    
    public func removeEggplantsAnimation() {
        self.layer.removeAnimation(forKey: "Eggplants")
        self.viewsByName["Melanzana/4__root"]?.layer.removeAnimation(forKey: "Eggplants_Rotation")
        self.viewsByName["Melanzana/4__root"]?.layer.removeAnimation(forKey: "Eggplants_TranslationX")
        self.viewsByName["Melanzana/4__root"]?.layer.removeAnimation(forKey: "Eggplants_TranslationY")
        self.viewsByName["Melanzana/5__root"]?.layer.removeAnimation(forKey: "Eggplants_Rotation")
        self.viewsByName["Melanzana/5__root"]?.layer.removeAnimation(forKey: "Eggplants_TranslationX")
        self.viewsByName["Melanzana/5__root"]?.layer.removeAnimation(forKey: "Eggplants_TranslationY")
        self.viewsByName["Melanzana/9__root"]?.layer.removeAnimation(forKey: "Eggplants_TranslationX")
        self.viewsByName["Melanzana/9__root"]?.layer.removeAnimation(forKey: "Eggplants_TranslationY")
        self.viewsByName["Melanzana/6__root"]?.layer.removeAnimation(forKey: "Eggplants_Rotation")
        self.viewsByName["Melanzana/6__root"]?.layer.removeAnimation(forKey: "Eggplants_TranslationX")
        self.viewsByName["Melanzana/6__root"]?.layer.removeAnimation(forKey: "Eggplants_TranslationY")
        self.viewsByName["Melanzana/1__root"]?.layer.removeAnimation(forKey: "Eggplants_Rotation")
        self.viewsByName["Melanzana/1__root"]?.layer.removeAnimation(forKey: "Eggplants_TranslationX")
        self.viewsByName["Melanzana/1__root"]?.layer.removeAnimation(forKey: "Eggplants_TranslationY")
        self.viewsByName["Melanzana/2__root"]?.layer.removeAnimation(forKey: "Eggplants_Rotation")
        self.viewsByName["Melanzana/2__root"]?.layer.removeAnimation(forKey: "Eggplants_TranslationX")
        self.viewsByName["Melanzana/2__root"]?.layer.removeAnimation(forKey: "Eggplants_TranslationY")
    }

	// - MARK: Emmenthal

	public func addEmmenthalAnimation() {
		addEmmenthalAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addEmmenthalAnimation(completion: ((Bool) -> Void)?) {
		addEmmenthalAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addEmmenthalAnimation(removedOnCompletion: Bool) {
		addEmmenthalAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addEmmenthalAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addEmmenthalAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addEmmenthalAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Emmenthal")
			self.animationCompletions[layer.animation(forKey: "Emmenthal")!] = complete
		}

		let emmenthal10RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		emmenthal10RotationAnimation.duration = 1.500
		emmenthal10RotationAnimation.values = [0.000, 1.121] as [Float]
		emmenthal10RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		emmenthal10RotationAnimation.timingFunctions = [linearTiming]
		emmenthal10RotationAnimation.beginTime = beginTime
		emmenthal10RotationAnimation.fillMode = fillMode
		emmenthal10RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Emmenthal/10__root"]?.layer.add(emmenthal10RotationAnimation, forKey:"Emmenthal_Rotation")

		let emmenthal10TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		emmenthal10TranslationXAnimation.duration = 1.500
		emmenthal10TranslationXAnimation.values = [0.000, -326.104] as [Float]
		emmenthal10TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		emmenthal10TranslationXAnimation.timingFunctions = [anticOverTiming]
		emmenthal10TranslationXAnimation.beginTime = beginTime
		emmenthal10TranslationXAnimation.fillMode = fillMode
		emmenthal10TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Emmenthal/10__root"]?.layer.add(emmenthal10TranslationXAnimation, forKey:"Emmenthal_TranslationX")

		let emmenthal10TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		emmenthal10TranslationYAnimation.duration = 1.500
		emmenthal10TranslationYAnimation.values = [0.000, -44.760] as [Float]
		emmenthal10TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		emmenthal10TranslationYAnimation.timingFunctions = [linearTiming]
		emmenthal10TranslationYAnimation.beginTime = beginTime
		emmenthal10TranslationYAnimation.fillMode = fillMode
		emmenthal10TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Emmenthal/10__root"]?.layer.add(emmenthal10TranslationYAnimation, forKey:"Emmenthal_TranslationY")

		let emmenthal8TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		emmenthal8TranslationXAnimation.duration = 1.500
		emmenthal8TranslationXAnimation.values = [0.000, 207.401] as [Float]
		emmenthal8TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		emmenthal8TranslationXAnimation.timingFunctions = [anticOverTiming]
		emmenthal8TranslationXAnimation.beginTime = beginTime
		emmenthal8TranslationXAnimation.fillMode = fillMode
		emmenthal8TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Emmenthal/8__root"]?.layer.add(emmenthal8TranslationXAnimation, forKey:"Emmenthal_TranslationX")

		let emmenthal8TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		emmenthal8TranslationYAnimation.duration = 1.500
		emmenthal8TranslationYAnimation.values = [0.000, 40.651] as [Float]
		emmenthal8TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		emmenthal8TranslationYAnimation.timingFunctions = [linearTiming]
		emmenthal8TranslationYAnimation.beginTime = beginTime
		emmenthal8TranslationYAnimation.fillMode = fillMode
		emmenthal8TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Emmenthal/8__root"]?.layer.add(emmenthal8TranslationYAnimation, forKey:"Emmenthal_TranslationY")

		let emmenthal2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		emmenthal2RotationAnimation.duration = 1.500
		emmenthal2RotationAnimation.values = [0.000, 1.646] as [Float]
		emmenthal2RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		emmenthal2RotationAnimation.timingFunctions = [linearTiming]
		emmenthal2RotationAnimation.beginTime = beginTime
		emmenthal2RotationAnimation.fillMode = fillMode
		emmenthal2RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Emmenthal/2__root"]?.layer.add(emmenthal2RotationAnimation, forKey:"Emmenthal_Rotation")

		let emmenthal2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		emmenthal2TranslationXAnimation.duration = 1.500
		emmenthal2TranslationXAnimation.values = [0.000, -318.011] as [Float]
		emmenthal2TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		emmenthal2TranslationXAnimation.timingFunctions = [anticOverTiming]
		emmenthal2TranslationXAnimation.beginTime = beginTime
		emmenthal2TranslationXAnimation.fillMode = fillMode
		emmenthal2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Emmenthal/2__root"]?.layer.add(emmenthal2TranslationXAnimation, forKey:"Emmenthal_TranslationX")

		let emmenthal2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		emmenthal2TranslationYAnimation.duration = 1.500
		emmenthal2TranslationYAnimation.values = [0.000, 143.302] as [Float]
		emmenthal2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		emmenthal2TranslationYAnimation.timingFunctions = [linearTiming]
		emmenthal2TranslationYAnimation.beginTime = beginTime
		emmenthal2TranslationYAnimation.fillMode = fillMode
		emmenthal2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Emmenthal/2__root"]?.layer.add(emmenthal2TranslationYAnimation, forKey:"Emmenthal_TranslationY")

		let emmenthal6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		emmenthal6TranslationXAnimation.duration = 1.500
		emmenthal6TranslationXAnimation.values = [0.000, 272.927] as [Float]
		emmenthal6TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		emmenthal6TranslationXAnimation.timingFunctions = [anticOverTiming]
		emmenthal6TranslationXAnimation.beginTime = beginTime
		emmenthal6TranslationXAnimation.fillMode = fillMode
		emmenthal6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Emmenthal/6__root"]?.layer.add(emmenthal6TranslationXAnimation, forKey:"Emmenthal_TranslationX")

		let emmenthal6TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		emmenthal6TranslationYAnimation.duration = 1.500
		emmenthal6TranslationYAnimation.values = [0.000, -51.609] as [Float]
		emmenthal6TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		emmenthal6TranslationYAnimation.timingFunctions = [linearTiming]
		emmenthal6TranslationYAnimation.beginTime = beginTime
		emmenthal6TranslationYAnimation.fillMode = fillMode
		emmenthal6TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Emmenthal/6__root"]?.layer.add(emmenthal6TranslationYAnimation, forKey:"Emmenthal_TranslationY")

		let emmenthal12TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		emmenthal12TranslationXAnimation.duration = 1.500
		emmenthal12TranslationXAnimation.values = [0.000, -281.781] as [Float]
		emmenthal12TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		emmenthal12TranslationXAnimation.timingFunctions = [anticOverTiming]
		emmenthal12TranslationXAnimation.beginTime = beginTime
		emmenthal12TranslationXAnimation.fillMode = fillMode
		emmenthal12TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Emmenthal/12__root"]?.layer.add(emmenthal12TranslationXAnimation, forKey:"Emmenthal_TranslationX")

		let emmenthal12TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		emmenthal12TranslationYAnimation.duration = 1.500
		emmenthal12TranslationYAnimation.values = [0.000, 1.656] as [Float]
		emmenthal12TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		emmenthal12TranslationYAnimation.timingFunctions = [linearTiming]
		emmenthal12TranslationYAnimation.beginTime = beginTime
		emmenthal12TranslationYAnimation.fillMode = fillMode
		emmenthal12TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Emmenthal/12__root"]?.layer.add(emmenthal12TranslationYAnimation, forKey:"Emmenthal_TranslationY")

		let emmenthal5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		emmenthal5TranslationXAnimation.duration = 1.500
		emmenthal5TranslationXAnimation.values = [0.000, 305.067] as [Float]
		emmenthal5TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		emmenthal5TranslationXAnimation.timingFunctions = [anticOverTiming]
		emmenthal5TranslationXAnimation.beginTime = beginTime
		emmenthal5TranslationXAnimation.fillMode = fillMode
		emmenthal5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Emmenthal/5__root"]?.layer.add(emmenthal5TranslationXAnimation, forKey:"Emmenthal_TranslationX")

		let emmenthal5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		emmenthal5TranslationYAnimation.duration = 1.500
		emmenthal5TranslationYAnimation.values = [0.000, -39.802] as [Float]
		emmenthal5TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		emmenthal5TranslationYAnimation.timingFunctions = [linearTiming]
		emmenthal5TranslationYAnimation.beginTime = beginTime
		emmenthal5TranslationYAnimation.fillMode = fillMode
		emmenthal5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Emmenthal/5__root"]?.layer.add(emmenthal5TranslationYAnimation, forKey:"Emmenthal_TranslationY")
	}

	public func removeEmmenthalAnimation() {
		self.layer.removeAnimation(forKey: "Emmenthal")
		self.viewsByName["Emmenthal/10__root"]?.layer.removeAnimation(forKey: "Emmenthal_Rotation")
		self.viewsByName["Emmenthal/10__root"]?.layer.removeAnimation(forKey: "Emmenthal_TranslationX")
		self.viewsByName["Emmenthal/10__root"]?.layer.removeAnimation(forKey: "Emmenthal_TranslationY")
		self.viewsByName["Emmenthal/8__root"]?.layer.removeAnimation(forKey: "Emmenthal_TranslationX")
		self.viewsByName["Emmenthal/8__root"]?.layer.removeAnimation(forKey: "Emmenthal_TranslationY")
		self.viewsByName["Emmenthal/2__root"]?.layer.removeAnimation(forKey: "Emmenthal_Rotation")
		self.viewsByName["Emmenthal/2__root"]?.layer.removeAnimation(forKey: "Emmenthal_TranslationX")
		self.viewsByName["Emmenthal/2__root"]?.layer.removeAnimation(forKey: "Emmenthal_TranslationY")
		self.viewsByName["Emmenthal/6__root"]?.layer.removeAnimation(forKey: "Emmenthal_TranslationX")
		self.viewsByName["Emmenthal/6__root"]?.layer.removeAnimation(forKey: "Emmenthal_TranslationY")
		self.viewsByName["Emmenthal/12__root"]?.layer.removeAnimation(forKey: "Emmenthal_TranslationX")
		self.viewsByName["Emmenthal/12__root"]?.layer.removeAnimation(forKey: "Emmenthal_TranslationY")
		self.viewsByName["Emmenthal/5__root"]?.layer.removeAnimation(forKey: "Emmenthal_TranslationX")
		self.viewsByName["Emmenthal/5__root"]?.layer.removeAnimation(forKey: "Emmenthal_TranslationY")
	}

    // - MARK: Garlic
    
    public func addGarlicAnimation() {
        addGarlicAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
    }
    
    public func addGarlicAnimation(completion: ((Bool) -> Void)?) {
        addGarlicAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
    }
    
    public func addGarlicAnimation(removedOnCompletion: Bool) {
        addGarlicAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
    }
    
    public func addGarlicAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
        addGarlicAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
    }
    
    public func addGarlicAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
        let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
        let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
        if let complete = completion {
            let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
            representativeAnimation.duration = 1.500
            representativeAnimation.delegate = self
            self.layer.add(representativeAnimation, forKey: "Garlic")
            self.animationCompletions[layer.animation(forKey: "Garlic")!] = complete
        }
        
        let aglio6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        aglio6TranslationXAnimation.duration = 1.500
        aglio6TranslationXAnimation.values = [0.000, -260.000] as [Float]
        aglio6TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        aglio6TranslationXAnimation.timingFunctions = [anticOverTiming]
        aglio6TranslationXAnimation.beginTime = beginTime
        aglio6TranslationXAnimation.fillMode = fillMode
        aglio6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Aglio/6__root"]?.layer.add(aglio6TranslationXAnimation, forKey:"Garlic_TranslationX")
        
        let aglio6TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        aglio6TranslationYAnimation.duration = 1.500
        aglio6TranslationYAnimation.values = [0.000, 80.000] as [Float]
        aglio6TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        aglio6TranslationYAnimation.timingFunctions = [linearTiming]
        aglio6TranslationYAnimation.beginTime = beginTime
        aglio6TranslationYAnimation.fillMode = fillMode
        aglio6TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Aglio/6__root"]?.layer.add(aglio6TranslationYAnimation, forKey:"Garlic_TranslationY")
        
        let aglio2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        aglio2TranslationXAnimation.duration = 1.500
        aglio2TranslationXAnimation.values = [0.000, 240.000] as [Float]
        aglio2TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        aglio2TranslationXAnimation.timingFunctions = [anticOverTiming]
        aglio2TranslationXAnimation.beginTime = beginTime
        aglio2TranslationXAnimation.fillMode = fillMode
        aglio2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Aglio/2__root"]?.layer.add(aglio2TranslationXAnimation, forKey:"Garlic_TranslationX")
        
        let aglio2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        aglio2TranslationYAnimation.duration = 1.500
        aglio2TranslationYAnimation.values = [0.000, 80.000] as [Float]
        aglio2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        aglio2TranslationYAnimation.timingFunctions = [linearTiming]
        aglio2TranslationYAnimation.beginTime = beginTime
        aglio2TranslationYAnimation.fillMode = fillMode
        aglio2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Aglio/2__root"]?.layer.add(aglio2TranslationYAnimation, forKey:"Garlic_TranslationY")
        
        let aglio4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        aglio4TranslationXAnimation.duration = 1.500
        aglio4TranslationXAnimation.values = [0.000, -240.000] as [Float]
        aglio4TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        aglio4TranslationXAnimation.timingFunctions = [anticOverTiming]
        aglio4TranslationXAnimation.beginTime = beginTime
        aglio4TranslationXAnimation.fillMode = fillMode
        aglio4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Aglio/4__root"]?.layer.add(aglio4TranslationXAnimation, forKey:"Garlic_TranslationX")
        
        let aglio4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        aglio4TranslationYAnimation.duration = 1.500
        aglio4TranslationYAnimation.values = [0.000, 140.000] as [Float]
        aglio4TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        aglio4TranslationYAnimation.timingFunctions = [linearTiming]
        aglio4TranslationYAnimation.beginTime = beginTime
        aglio4TranslationYAnimation.fillMode = fillMode
        aglio4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Aglio/4__root"]?.layer.add(aglio4TranslationYAnimation, forKey:"Garlic_TranslationY")
        
        let aglio3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        aglio3TranslationXAnimation.duration = 1.500
        aglio3TranslationXAnimation.values = [0.000, 290.000] as [Float]
        aglio3TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        aglio3TranslationXAnimation.timingFunctions = [anticOverTiming]
        aglio3TranslationXAnimation.beginTime = beginTime
        aglio3TranslationXAnimation.fillMode = fillMode
        aglio3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Aglio/3__root"]?.layer.add(aglio3TranslationXAnimation, forKey:"Garlic_TranslationX")
        
        let aglio3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        aglio3TranslationYAnimation.duration = 1.500
        aglio3TranslationYAnimation.values = [0.000, 170.000] as [Float]
        aglio3TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        aglio3TranslationYAnimation.timingFunctions = [linearTiming]
        aglio3TranslationYAnimation.beginTime = beginTime
        aglio3TranslationYAnimation.fillMode = fillMode
        aglio3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Aglio/3__root"]?.layer.add(aglio3TranslationYAnimation, forKey:"Garlic_TranslationY")
        
        let aglio5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        aglio5TranslationXAnimation.duration = 1.500
        aglio5TranslationXAnimation.values = [0.000, 200.000, 200.000] as [Float]
        aglio5TranslationXAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
        aglio5TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
        aglio5TranslationXAnimation.beginTime = beginTime
        aglio5TranslationXAnimation.fillMode = fillMode
        aglio5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Aglio/5__root"]?.layer.add(aglio5TranslationXAnimation, forKey:"Garlic_TranslationX")
        
        let aglio5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        aglio5TranslationYAnimation.duration = 1.500
        aglio5TranslationYAnimation.values = [0.000, -20.000, -20.000] as [Float]
        aglio5TranslationYAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
        aglio5TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
        aglio5TranslationYAnimation.beginTime = beginTime
        aglio5TranslationYAnimation.fillMode = fillMode
        aglio5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Aglio/5__root"]?.layer.add(aglio5TranslationYAnimation, forKey:"Garlic_TranslationY")
        
        let aglio7TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        aglio7TranslationXAnimation.duration = 1.500
        aglio7TranslationXAnimation.values = [0.000, -240.000, -240.000] as [Float]
        aglio7TranslationXAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
        aglio7TranslationXAnimation.timingFunctions = [anticOverTiming, anticOverTiming]
        aglio7TranslationXAnimation.beginTime = beginTime
        aglio7TranslationXAnimation.fillMode = fillMode
        aglio7TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Aglio/7__root"]?.layer.add(aglio7TranslationXAnimation, forKey:"Garlic_TranslationX")
        
        let aglio7TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        aglio7TranslationYAnimation.duration = 1.500
        aglio7TranslationYAnimation.values = [0.000, -40.000, -40.000] as [Float]
        aglio7TranslationYAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
        aglio7TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
        aglio7TranslationYAnimation.beginTime = beginTime
        aglio7TranslationYAnimation.fillMode = fillMode
        aglio7TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Aglio/7__root"]?.layer.add(aglio7TranslationYAnimation, forKey:"Garlic_TranslationY")
    }
    
    public func removeGarlicAnimation() {
        self.layer.removeAnimation(forKey: "Garlic")
        self.viewsByName["Aglio/6__root"]?.layer.removeAnimation(forKey: "Garlic_TranslationX")
        self.viewsByName["Aglio/6__root"]?.layer.removeAnimation(forKey: "Garlic_TranslationY")
        self.viewsByName["Aglio/2__root"]?.layer.removeAnimation(forKey: "Garlic_TranslationX")
        self.viewsByName["Aglio/2__root"]?.layer.removeAnimation(forKey: "Garlic_TranslationY")
        self.viewsByName["Aglio/4__root"]?.layer.removeAnimation(forKey: "Garlic_TranslationX")
        self.viewsByName["Aglio/4__root"]?.layer.removeAnimation(forKey: "Garlic_TranslationY")
        self.viewsByName["Aglio/3__root"]?.layer.removeAnimation(forKey: "Garlic_TranslationX")
        self.viewsByName["Aglio/3__root"]?.layer.removeAnimation(forKey: "Garlic_TranslationY")
        self.viewsByName["Aglio/5__root"]?.layer.removeAnimation(forKey: "Garlic_TranslationX")
        self.viewsByName["Aglio/5__root"]?.layer.removeAnimation(forKey: "Garlic_TranslationY")
        self.viewsByName["Aglio/7__root"]?.layer.removeAnimation(forKey: "Garlic_TranslationX")
        self.viewsByName["Aglio/7__root"]?.layer.removeAnimation(forKey: "Garlic_TranslationY")
    }

	// - MARK: Gorgonzola

	public func addGorgonzolaAnimation() {
		addGorgonzolaAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addGorgonzolaAnimation(completion: ((Bool) -> Void)?) {
		addGorgonzolaAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addGorgonzolaAnimation(removedOnCompletion: Bool) {
		addGorgonzolaAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addGorgonzolaAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addGorgonzolaAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addGorgonzolaAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Gorgonzola")
			self.animationCompletions[layer.animation(forKey: "Gorgonzola")!] = complete
		}

		let gorgonzola1RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		gorgonzola1RotationAnimation.duration = 1.500
		gorgonzola1RotationAnimation.values = [0.000, -1.060] as [Float]
		gorgonzola1RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		gorgonzola1RotationAnimation.timingFunctions = [linearTiming]
		gorgonzola1RotationAnimation.beginTime = beginTime
		gorgonzola1RotationAnimation.fillMode = fillMode
		gorgonzola1RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Gorgonzola/1__root"]?.layer.add(gorgonzola1RotationAnimation, forKey:"Gorgonzola_Rotation")

		let gorgonzola1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		gorgonzola1TranslationXAnimation.duration = 1.500
		gorgonzola1TranslationXAnimation.values = [0.000, 190.094] as [Float]
		gorgonzola1TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		gorgonzola1TranslationXAnimation.timingFunctions = [anticOverTiming]
		gorgonzola1TranslationXAnimation.beginTime = beginTime
		gorgonzola1TranslationXAnimation.fillMode = fillMode
		gorgonzola1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Gorgonzola/1__root"]?.layer.add(gorgonzola1TranslationXAnimation, forKey:"Gorgonzola_TranslationX")

		let gorgonzola1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		gorgonzola1TranslationYAnimation.duration = 1.500
		gorgonzola1TranslationYAnimation.values = [0.000, -63.432] as [Float]
		gorgonzola1TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		gorgonzola1TranslationYAnimation.timingFunctions = [linearTiming]
		gorgonzola1TranslationYAnimation.beginTime = beginTime
		gorgonzola1TranslationYAnimation.fillMode = fillMode
		gorgonzola1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Gorgonzola/1__root"]?.layer.add(gorgonzola1TranslationYAnimation, forKey:"Gorgonzola_TranslationY")

		let gorgonzola5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		gorgonzola5TranslationXAnimation.duration = 1.500
		gorgonzola5TranslationXAnimation.values = [0.000, 191.078] as [Float]
		gorgonzola5TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		gorgonzola5TranslationXAnimation.timingFunctions = [anticOverTiming]
		gorgonzola5TranslationXAnimation.beginTime = beginTime
		gorgonzola5TranslationXAnimation.fillMode = fillMode
		gorgonzola5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Gorgonzola/5__root"]?.layer.add(gorgonzola5TranslationXAnimation, forKey:"Gorgonzola_TranslationX")

		let gorgonzola5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		gorgonzola5TranslationYAnimation.duration = 1.500
		gorgonzola5TranslationYAnimation.values = [0.000, 120.380] as [Float]
		gorgonzola5TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		gorgonzola5TranslationYAnimation.timingFunctions = [linearTiming]
		gorgonzola5TranslationYAnimation.beginTime = beginTime
		gorgonzola5TranslationYAnimation.fillMode = fillMode
		gorgonzola5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Gorgonzola/5__root"]?.layer.add(gorgonzola5TranslationYAnimation, forKey:"Gorgonzola_TranslationY")

		let gorgonzola8TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		gorgonzola8TranslationXAnimation.duration = 1.500
		gorgonzola8TranslationXAnimation.values = [0.000, -291.969] as [Float]
		gorgonzola8TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		gorgonzola8TranslationXAnimation.timingFunctions = [anticOverTiming]
		gorgonzola8TranslationXAnimation.beginTime = beginTime
		gorgonzola8TranslationXAnimation.fillMode = fillMode
		gorgonzola8TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Gorgonzola/8__root"]?.layer.add(gorgonzola8TranslationXAnimation, forKey:"Gorgonzola_TranslationX")

		let gorgonzola8TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		gorgonzola8TranslationYAnimation.duration = 1.500
		gorgonzola8TranslationYAnimation.values = [0.000, 22.630] as [Float]
		gorgonzola8TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		gorgonzola8TranslationYAnimation.timingFunctions = [linearTiming]
		gorgonzola8TranslationYAnimation.beginTime = beginTime
		gorgonzola8TranslationYAnimation.fillMode = fillMode
		gorgonzola8TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Gorgonzola/8__root"]?.layer.add(gorgonzola8TranslationYAnimation, forKey:"Gorgonzola_TranslationY")

		let gorgonzola4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		gorgonzola4TranslationXAnimation.duration = 1.500
		gorgonzola4TranslationXAnimation.values = [0.000, 315.177] as [Float]
		gorgonzola4TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		gorgonzola4TranslationXAnimation.timingFunctions = [anticOverTiming]
		gorgonzola4TranslationXAnimation.beginTime = beginTime
		gorgonzola4TranslationXAnimation.fillMode = fillMode
		gorgonzola4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Gorgonzola/4__root"]?.layer.add(gorgonzola4TranslationXAnimation, forKey:"Gorgonzola_TranslationX")

		let gorgonzola4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		gorgonzola4TranslationYAnimation.duration = 1.500
		gorgonzola4TranslationYAnimation.values = [0.000, 60.448] as [Float]
		gorgonzola4TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		gorgonzola4TranslationYAnimation.timingFunctions = [linearTiming]
		gorgonzola4TranslationYAnimation.beginTime = beginTime
		gorgonzola4TranslationYAnimation.fillMode = fillMode
		gorgonzola4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Gorgonzola/4__root"]?.layer.add(gorgonzola4TranslationYAnimation, forKey:"Gorgonzola_TranslationY")

		let gorgonzola7TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		gorgonzola7TranslationXAnimation.duration = 1.500
		gorgonzola7TranslationXAnimation.values = [0.000, -311.641] as [Float]
		gorgonzola7TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		gorgonzola7TranslationXAnimation.timingFunctions = [anticOverTiming]
		gorgonzola7TranslationXAnimation.beginTime = beginTime
		gorgonzola7TranslationXAnimation.fillMode = fillMode
		gorgonzola7TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Gorgonzola/7__root"]?.layer.add(gorgonzola7TranslationXAnimation, forKey:"Gorgonzola_TranslationX")

		let gorgonzola7TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		gorgonzola7TranslationYAnimation.duration = 1.500
		gorgonzola7TranslationYAnimation.values = [0.000, 60.125] as [Float]
		gorgonzola7TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		gorgonzola7TranslationYAnimation.timingFunctions = [linearTiming]
		gorgonzola7TranslationYAnimation.beginTime = beginTime
		gorgonzola7TranslationYAnimation.fillMode = fillMode
		gorgonzola7TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Gorgonzola/7__root"]?.layer.add(gorgonzola7TranslationYAnimation, forKey:"Gorgonzola_TranslationY")

		let gorgonzola12TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		gorgonzola12TranslationXAnimation.duration = 1.500
		gorgonzola12TranslationXAnimation.values = [0.000, -282.687] as [Float]
		gorgonzola12TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		gorgonzola12TranslationXAnimation.timingFunctions = [anticOverTiming]
		gorgonzola12TranslationXAnimation.beginTime = beginTime
		gorgonzola12TranslationXAnimation.fillMode = fillMode
		gorgonzola12TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Gorgonzola/12__root"]?.layer.add(gorgonzola12TranslationXAnimation, forKey:"Gorgonzola_TranslationX")

		let gorgonzola12TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		gorgonzola12TranslationYAnimation.duration = 1.500
		gorgonzola12TranslationYAnimation.values = [0.000, -24.031] as [Float]
		gorgonzola12TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		gorgonzola12TranslationYAnimation.timingFunctions = [linearTiming]
		gorgonzola12TranslationYAnimation.beginTime = beginTime
		gorgonzola12TranslationYAnimation.fillMode = fillMode
		gorgonzola12TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Gorgonzola/12__root"]?.layer.add(gorgonzola12TranslationYAnimation, forKey:"Gorgonzola_TranslationY")
	}

	public func removeGorgonzolaAnimation() {
		self.layer.removeAnimation(forKey: "Gorgonzola")
		self.viewsByName["Gorgonzola/1__root"]?.layer.removeAnimation(forKey: "Gorgonzola_Rotation")
		self.viewsByName["Gorgonzola/1__root"]?.layer.removeAnimation(forKey: "Gorgonzola_TranslationX")
		self.viewsByName["Gorgonzola/1__root"]?.layer.removeAnimation(forKey: "Gorgonzola_TranslationY")
		self.viewsByName["Gorgonzola/5__root"]?.layer.removeAnimation(forKey: "Gorgonzola_TranslationX")
		self.viewsByName["Gorgonzola/5__root"]?.layer.removeAnimation(forKey: "Gorgonzola_TranslationY")
		self.viewsByName["Gorgonzola/8__root"]?.layer.removeAnimation(forKey: "Gorgonzola_TranslationX")
		self.viewsByName["Gorgonzola/8__root"]?.layer.removeAnimation(forKey: "Gorgonzola_TranslationY")
		self.viewsByName["Gorgonzola/4__root"]?.layer.removeAnimation(forKey: "Gorgonzola_TranslationX")
		self.viewsByName["Gorgonzola/4__root"]?.layer.removeAnimation(forKey: "Gorgonzola_TranslationY")
		self.viewsByName["Gorgonzola/7__root"]?.layer.removeAnimation(forKey: "Gorgonzola_TranslationX")
		self.viewsByName["Gorgonzola/7__root"]?.layer.removeAnimation(forKey: "Gorgonzola_TranslationY")
		self.viewsByName["Gorgonzola/12__root"]?.layer.removeAnimation(forKey: "Gorgonzola_TranslationX")
		self.viewsByName["Gorgonzola/12__root"]?.layer.removeAnimation(forKey: "Gorgonzola_TranslationY")
	}

    // - MARK: Grana
    
    public func addGranaAnimation() {
        addGranaAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
    }
    
    public func addGranaAnimation(completion: ((Bool) -> Void)?) {
        addGranaAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
    }
    
    public func addGranaAnimation(removedOnCompletion: Bool) {
        addGranaAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
    }
    
    public func addGranaAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
        addGranaAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
    }
    
    public func addGranaAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
        let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
        let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
        if let complete = completion {
            let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
            representativeAnimation.duration = 1.500
            representativeAnimation.delegate = self
            self.layer.add(representativeAnimation, forKey: "Grana")
            self.animationCompletions[layer.animation(forKey: "Grana")!] = complete
        }
        
        let grana1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        grana1TranslationXAnimation.duration = 1.500
        grana1TranslationXAnimation.values = [0.000, 240.234] as [Float]
        grana1TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana1TranslationXAnimation.timingFunctions = [anticOverTiming]
        grana1TranslationXAnimation.beginTime = beginTime
        grana1TranslationXAnimation.fillMode = fillMode
        grana1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/1__root"]?.layer.add(grana1TranslationXAnimation, forKey:"Grana_TranslationX")
        
        let grana1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        grana1TranslationYAnimation.duration = 1.500
        grana1TranslationYAnimation.values = [0.000, 58.036] as [Float]
        grana1TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana1TranslationYAnimation.timingFunctions = [linearTiming]
        grana1TranslationYAnimation.beginTime = beginTime
        grana1TranslationYAnimation.fillMode = fillMode
        grana1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/1__root"]?.layer.add(grana1TranslationYAnimation, forKey:"Grana_TranslationY")
        
        let grana7TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        grana7TranslationXAnimation.duration = 1.500
        grana7TranslationXAnimation.values = [0.000, -262.839] as [Float]
        grana7TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana7TranslationXAnimation.timingFunctions = [anticOverTiming]
        grana7TranslationXAnimation.beginTime = beginTime
        grana7TranslationXAnimation.fillMode = fillMode
        grana7TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/7__root"]?.layer.add(grana7TranslationXAnimation, forKey:"Grana_TranslationX")
        
        let grana7TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        grana7TranslationYAnimation.duration = 1.500
        grana7TranslationYAnimation.values = [0.000, 61.839] as [Float]
        grana7TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana7TranslationYAnimation.timingFunctions = [linearTiming]
        grana7TranslationYAnimation.beginTime = beginTime
        grana7TranslationYAnimation.fillMode = fillMode
        grana7TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/7__root"]?.layer.add(grana7TranslationYAnimation, forKey:"Grana_TranslationY")
        
        let grana15RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
        grana15RotationAnimation.duration = 1.500
        grana15RotationAnimation.values = [0.000, -0.436] as [Float]
        grana15RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana15RotationAnimation.timingFunctions = [linearTiming]
        grana15RotationAnimation.beginTime = beginTime
        grana15RotationAnimation.fillMode = fillMode
        grana15RotationAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/15__root"]?.layer.add(grana15RotationAnimation, forKey:"Grana_Rotation")
        
        let grana15TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        grana15TranslationXAnimation.duration = 1.500
        grana15TranslationXAnimation.values = [0.000, -281.010] as [Float]
        grana15TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana15TranslationXAnimation.timingFunctions = [anticOverTiming]
        grana15TranslationXAnimation.beginTime = beginTime
        grana15TranslationXAnimation.fillMode = fillMode
        grana15TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/15__root"]?.layer.add(grana15TranslationXAnimation, forKey:"Grana_TranslationX")
        
        let grana15TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        grana15TranslationYAnimation.duration = 1.500
        grana15TranslationYAnimation.values = [0.000, 12.448] as [Float]
        grana15TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana15TranslationYAnimation.timingFunctions = [linearTiming]
        grana15TranslationYAnimation.beginTime = beginTime
        grana15TranslationYAnimation.fillMode = fillMode
        grana15TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/15__root"]?.layer.add(grana15TranslationYAnimation, forKey:"Grana_TranslationY")
        
        let grana11RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
        grana11RotationAnimation.duration = 1.500
        grana11RotationAnimation.values = [0.000, 0.501] as [Float]
        grana11RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana11RotationAnimation.timingFunctions = [linearTiming]
        grana11RotationAnimation.beginTime = beginTime
        grana11RotationAnimation.fillMode = fillMode
        grana11RotationAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/11__root"]?.layer.add(grana11RotationAnimation, forKey:"Grana_Rotation")
        
        let grana11TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        grana11TranslationXAnimation.duration = 1.500
        grana11TranslationXAnimation.values = [0.000, 298.703] as [Float]
        grana11TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana11TranslationXAnimation.timingFunctions = [anticOverTiming]
        grana11TranslationXAnimation.beginTime = beginTime
        grana11TranslationXAnimation.fillMode = fillMode
        grana11TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/11__root"]?.layer.add(grana11TranslationXAnimation, forKey:"Grana_TranslationX")
        
        let grana11TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        grana11TranslationYAnimation.duration = 1.500
        grana11TranslationYAnimation.values = [0.000, -17.516] as [Float]
        grana11TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana11TranslationYAnimation.timingFunctions = [linearTiming]
        grana11TranslationYAnimation.beginTime = beginTime
        grana11TranslationYAnimation.fillMode = fillMode
        grana11TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/11__root"]?.layer.add(grana11TranslationYAnimation, forKey:"Grana_TranslationY")
        
        let grana3RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
        grana3RotationAnimation.duration = 1.500
        grana3RotationAnimation.values = [0.000, -0.415] as [Float]
        grana3RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana3RotationAnimation.timingFunctions = [linearTiming]
        grana3RotationAnimation.beginTime = beginTime
        grana3RotationAnimation.fillMode = fillMode
        grana3RotationAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/3__root"]?.layer.add(grana3RotationAnimation, forKey:"Grana_Rotation")
        
        let grana3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        grana3TranslationXAnimation.duration = 1.500
        grana3TranslationXAnimation.values = [0.000, 298.239] as [Float]
        grana3TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana3TranslationXAnimation.timingFunctions = [anticOverTiming]
        grana3TranslationXAnimation.beginTime = beginTime
        grana3TranslationXAnimation.fillMode = fillMode
        grana3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/3__root"]?.layer.add(grana3TranslationXAnimation, forKey:"Grana_TranslationX")
        
        let grana3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        grana3TranslationYAnimation.duration = 1.500
        grana3TranslationYAnimation.values = [0.000, 86.578] as [Float]
        grana3TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana3TranslationYAnimation.timingFunctions = [linearTiming]
        grana3TranslationYAnimation.beginTime = beginTime
        grana3TranslationYAnimation.fillMode = fillMode
        grana3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/3__root"]?.layer.add(grana3TranslationYAnimation, forKey:"Grana_TranslationY")
        
        let grana13RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
        grana13RotationAnimation.duration = 1.500
        grana13RotationAnimation.values = [0.000, -1.243] as [Float]
        grana13RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana13RotationAnimation.timingFunctions = [linearTiming]
        grana13RotationAnimation.beginTime = beginTime
        grana13RotationAnimation.fillMode = fillMode
        grana13RotationAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/13__root"]?.layer.add(grana13RotationAnimation, forKey:"Grana_Rotation")
        
        let grana13TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        grana13TranslationXAnimation.duration = 1.500
        grana13TranslationXAnimation.values = [0.000, -236.385] as [Float]
        grana13TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana13TranslationXAnimation.timingFunctions = [anticOverTiming]
        grana13TranslationXAnimation.beginTime = beginTime
        grana13TranslationXAnimation.fillMode = fillMode
        grana13TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/13__root"]?.layer.add(grana13TranslationXAnimation, forKey:"Grana_TranslationX")
        
        let grana13TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        grana13TranslationYAnimation.duration = 1.500
        grana13TranslationYAnimation.values = [0.000, 58.510] as [Float]
        grana13TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana13TranslationYAnimation.timingFunctions = [linearTiming]
        grana13TranslationYAnimation.beginTime = beginTime
        grana13TranslationYAnimation.fillMode = fillMode
        grana13TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/13__root"]?.layer.add(grana13TranslationYAnimation, forKey:"Grana_TranslationY")
        
        let grana5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        grana5TranslationXAnimation.duration = 1.500
        grana5TranslationXAnimation.values = [0.000, 219.953] as [Float]
        grana5TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana5TranslationXAnimation.timingFunctions = [anticOverTiming]
        grana5TranslationXAnimation.beginTime = beginTime
        grana5TranslationXAnimation.fillMode = fillMode
        grana5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/5__root"]?.layer.add(grana5TranslationXAnimation, forKey:"Grana_TranslationX")
        
        let grana5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        grana5TranslationYAnimation.duration = 1.500
        grana5TranslationYAnimation.values = [0.000, 94.542] as [Float]
        grana5TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana5TranslationYAnimation.timingFunctions = [linearTiming]
        grana5TranslationYAnimation.beginTime = beginTime
        grana5TranslationYAnimation.fillMode = fillMode
        grana5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/5__root"]?.layer.add(grana5TranslationYAnimation, forKey:"Grana_TranslationY")
        
        let grana4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        grana4TranslationXAnimation.duration = 1.500
        grana4TranslationXAnimation.values = [0.000, -365.157] as [Float]
        grana4TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana4TranslationXAnimation.timingFunctions = [anticOverTiming]
        grana4TranslationXAnimation.beginTime = beginTime
        grana4TranslationXAnimation.fillMode = fillMode
        grana4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/4__root"]?.layer.add(grana4TranslationXAnimation, forKey:"Grana_TranslationX")
        
        let grana4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        grana4TranslationYAnimation.duration = 1.500
        grana4TranslationYAnimation.values = [0.000, 131.182] as [Float]
        grana4TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        grana4TranslationYAnimation.timingFunctions = [linearTiming]
        grana4TranslationYAnimation.beginTime = beginTime
        grana4TranslationYAnimation.fillMode = fillMode
        grana4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Grana/4__root"]?.layer.add(grana4TranslationYAnimation, forKey:"Grana_TranslationY")
    }
    
    public func removeGranaAnimation() {
        self.layer.removeAnimation(forKey: "Grana")
        self.viewsByName["Grana/1__root"]?.layer.removeAnimation(forKey: "Grana_TranslationX")
        self.viewsByName["Grana/1__root"]?.layer.removeAnimation(forKey: "Grana_TranslationY")
        self.viewsByName["Grana/7__root"]?.layer.removeAnimation(forKey: "Grana_TranslationX")
        self.viewsByName["Grana/7__root"]?.layer.removeAnimation(forKey: "Grana_TranslationY")
        self.viewsByName["Grana/15__root"]?.layer.removeAnimation(forKey: "Grana_Rotation")
        self.viewsByName["Grana/15__root"]?.layer.removeAnimation(forKey: "Grana_TranslationX")
        self.viewsByName["Grana/15__root"]?.layer.removeAnimation(forKey: "Grana_TranslationY")
        self.viewsByName["Grana/11__root"]?.layer.removeAnimation(forKey: "Grana_Rotation")
        self.viewsByName["Grana/11__root"]?.layer.removeAnimation(forKey: "Grana_TranslationX")
        self.viewsByName["Grana/11__root"]?.layer.removeAnimation(forKey: "Grana_TranslationY")
        self.viewsByName["Grana/3__root"]?.layer.removeAnimation(forKey: "Grana_Rotation")
        self.viewsByName["Grana/3__root"]?.layer.removeAnimation(forKey: "Grana_TranslationX")
        self.viewsByName["Grana/3__root"]?.layer.removeAnimation(forKey: "Grana_TranslationY")
        self.viewsByName["Grana/13__root"]?.layer.removeAnimation(forKey: "Grana_Rotation")
        self.viewsByName["Grana/13__root"]?.layer.removeAnimation(forKey: "Grana_TranslationX")
        self.viewsByName["Grana/13__root"]?.layer.removeAnimation(forKey: "Grana_TranslationY")
        self.viewsByName["Grana/5__root"]?.layer.removeAnimation(forKey: "Grana_TranslationX")
        self.viewsByName["Grana/5__root"]?.layer.removeAnimation(forKey: "Grana_TranslationY")
        self.viewsByName["Grana/4__root"]?.layer.removeAnimation(forKey: "Grana_TranslationX")
        self.viewsByName["Grana/4__root"]?.layer.removeAnimation(forKey: "Grana_TranslationY")
    }

	// - MARK: Mozzarella

	public func addMozzarellaAnimation() {
		addMozzarellaAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addMozzarellaAnimation(completion: ((Bool) -> Void)?) {
		addMozzarellaAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addMozzarellaAnimation(removedOnCompletion: Bool) {
		addMozzarellaAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addMozzarellaAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addMozzarellaAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addMozzarellaAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Mozzarella")
			self.animationCompletions[layer.animation(forKey: "Mozzarella")!] = complete
		}

		let mozzarella4ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		mozzarella4ScaleXAnimation.duration = 1.500
		mozzarella4ScaleXAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella4ScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella4ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella4ScaleXAnimation.beginTime = beginTime
		mozzarella4ScaleXAnimation.fillMode = fillMode
		mozzarella4ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/4__xScale"]?.layer.add(mozzarella4ScaleXAnimation, forKey:"Mozzarella_ScaleX")

		let mozzarella4ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		mozzarella4ScaleYAnimation.duration = 1.500
		mozzarella4ScaleYAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella4ScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella4ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella4ScaleYAnimation.beginTime = beginTime
		mozzarella4ScaleYAnimation.fillMode = fillMode
		mozzarella4ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/4__yScale"]?.layer.add(mozzarella4ScaleYAnimation, forKey:"Mozzarella_ScaleY")

		let mozzarella4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		mozzarella4TranslationXAnimation.duration = 1.500
		mozzarella4TranslationXAnimation.values = [0.000, -380.000, -380.000] as [Float]
		mozzarella4TranslationXAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella4TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		mozzarella4TranslationXAnimation.beginTime = beginTime
		mozzarella4TranslationXAnimation.fillMode = fillMode
		mozzarella4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/4__root"]?.layer.add(mozzarella4TranslationXAnimation, forKey:"Mozzarella_TranslationX")

		let mozzarella4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		mozzarella4TranslationYAnimation.duration = 1.500
		mozzarella4TranslationYAnimation.values = [0.000, -45.000, -45.000] as [Float]
		mozzarella4TranslationYAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella4TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		mozzarella4TranslationYAnimation.beginTime = beginTime
		mozzarella4TranslationYAnimation.fillMode = fillMode
		mozzarella4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/4__root"]?.layer.add(mozzarella4TranslationYAnimation, forKey:"Mozzarella_TranslationY")

		let mozzarella3ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		mozzarella3ScaleXAnimation.duration = 1.500
		mozzarella3ScaleXAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella3ScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella3ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella3ScaleXAnimation.beginTime = beginTime
		mozzarella3ScaleXAnimation.fillMode = fillMode
		mozzarella3ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/3__xScale"]?.layer.add(mozzarella3ScaleXAnimation, forKey:"Mozzarella_ScaleX")

		let mozzarella3ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		mozzarella3ScaleYAnimation.duration = 1.500
		mozzarella3ScaleYAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella3ScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella3ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella3ScaleYAnimation.beginTime = beginTime
		mozzarella3ScaleYAnimation.fillMode = fillMode
		mozzarella3ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/3__yScale"]?.layer.add(mozzarella3ScaleYAnimation, forKey:"Mozzarella_ScaleY")

		let mozzarella3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		mozzarella3TranslationXAnimation.duration = 1.500
		mozzarella3TranslationXAnimation.values = [0.000, -295.000, -295.000] as [Float]
		mozzarella3TranslationXAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella3TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		mozzarella3TranslationXAnimation.beginTime = beginTime
		mozzarella3TranslationXAnimation.fillMode = fillMode
		mozzarella3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/3__root"]?.layer.add(mozzarella3TranslationXAnimation, forKey:"Mozzarella_TranslationX")

		let mozzarella3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		mozzarella3TranslationYAnimation.duration = 1.500
		mozzarella3TranslationYAnimation.values = [0.000, 50.000, 50.000] as [Float]
		mozzarella3TranslationYAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella3TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		mozzarella3TranslationYAnimation.beginTime = beginTime
		mozzarella3TranslationYAnimation.fillMode = fillMode
		mozzarella3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/3__root"]?.layer.add(mozzarella3TranslationYAnimation, forKey:"Mozzarella_TranslationY")

		let mozzarella6ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		mozzarella6ScaleXAnimation.duration = 1.500
		mozzarella6ScaleXAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella6ScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella6ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella6ScaleXAnimation.beginTime = beginTime
		mozzarella6ScaleXAnimation.fillMode = fillMode
		mozzarella6ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/6__xScale"]?.layer.add(mozzarella6ScaleXAnimation, forKey:"Mozzarella_ScaleX")

		let mozzarella6ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		mozzarella6ScaleYAnimation.duration = 1.500
		mozzarella6ScaleYAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella6ScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella6ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella6ScaleYAnimation.beginTime = beginTime
		mozzarella6ScaleYAnimation.fillMode = fillMode
		mozzarella6ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/6__yScale"]?.layer.add(mozzarella6ScaleYAnimation, forKey:"Mozzarella_ScaleY")

		let mozzarella6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		mozzarella6TranslationXAnimation.duration = 1.500
		mozzarella6TranslationXAnimation.values = [0.000, 340.000, 340.000] as [Float]
		mozzarella6TranslationXAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella6TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		mozzarella6TranslationXAnimation.beginTime = beginTime
		mozzarella6TranslationXAnimation.fillMode = fillMode
		mozzarella6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/6__root"]?.layer.add(mozzarella6TranslationXAnimation, forKey:"Mozzarella_TranslationX")

		let mozzarella6TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		mozzarella6TranslationYAnimation.duration = 1.500
		mozzarella6TranslationYAnimation.values = [0.000, 80.000, 80.000] as [Float]
		mozzarella6TranslationYAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella6TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		mozzarella6TranslationYAnimation.beginTime = beginTime
		mozzarella6TranslationYAnimation.fillMode = fillMode
		mozzarella6TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/6__root"]?.layer.add(mozzarella6TranslationYAnimation, forKey:"Mozzarella_TranslationY")

		let mozzarella8ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		mozzarella8ScaleXAnimation.duration = 1.500
		mozzarella8ScaleXAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella8ScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella8ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella8ScaleXAnimation.beginTime = beginTime
		mozzarella8ScaleXAnimation.fillMode = fillMode
		mozzarella8ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/8__xScale"]?.layer.add(mozzarella8ScaleXAnimation, forKey:"Mozzarella_ScaleX")

		let mozzarella8ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		mozzarella8ScaleYAnimation.duration = 1.500
		mozzarella8ScaleYAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella8ScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella8ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella8ScaleYAnimation.beginTime = beginTime
		mozzarella8ScaleYAnimation.fillMode = fillMode
		mozzarella8ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/8__yScale"]?.layer.add(mozzarella8ScaleYAnimation, forKey:"Mozzarella_ScaleY")

		let mozzarella8TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		mozzarella8TranslationXAnimation.duration = 1.500
		mozzarella8TranslationXAnimation.values = [0.000, -340.000, -340.000] as [Float]
		mozzarella8TranslationXAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella8TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		mozzarella8TranslationXAnimation.beginTime = beginTime
		mozzarella8TranslationXAnimation.fillMode = fillMode
		mozzarella8TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/8__root"]?.layer.add(mozzarella8TranslationXAnimation, forKey:"Mozzarella_TranslationX")

		let mozzarella8TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		mozzarella8TranslationYAnimation.duration = 1.500
		mozzarella8TranslationYAnimation.values = [0.000, 120.000, 120.000] as [Float]
		mozzarella8TranslationYAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella8TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		mozzarella8TranslationYAnimation.beginTime = beginTime
		mozzarella8TranslationYAnimation.fillMode = fillMode
		mozzarella8TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/8__root"]?.layer.add(mozzarella8TranslationYAnimation, forKey:"Mozzarella_TranslationY")

		let mozzarella2ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		mozzarella2ScaleXAnimation.duration = 1.500
		mozzarella2ScaleXAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella2ScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella2ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella2ScaleXAnimation.beginTime = beginTime
		mozzarella2ScaleXAnimation.fillMode = fillMode
		mozzarella2ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/2__xScale"]?.layer.add(mozzarella2ScaleXAnimation, forKey:"Mozzarella_ScaleX")

		let mozzarella2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		mozzarella2ScaleYAnimation.duration = 1.500
		mozzarella2ScaleYAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella2ScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella2ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella2ScaleYAnimation.beginTime = beginTime
		mozzarella2ScaleYAnimation.fillMode = fillMode
		mozzarella2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/2__yScale"]?.layer.add(mozzarella2ScaleYAnimation, forKey:"Mozzarella_ScaleY")

		let mozzarella2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		mozzarella2TranslationXAnimation.duration = 1.500
		mozzarella2TranslationXAnimation.values = [0.000, 300.000, 300.000] as [Float]
		mozzarella2TranslationXAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella2TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		mozzarella2TranslationXAnimation.beginTime = beginTime
		mozzarella2TranslationXAnimation.fillMode = fillMode
		mozzarella2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/2__root"]?.layer.add(mozzarella2TranslationXAnimation, forKey:"Mozzarella_TranslationX")

		let mozzarella2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		mozzarella2TranslationYAnimation.duration = 1.500
		mozzarella2TranslationYAnimation.values = [0.000, -45.000, -45.000] as [Float]
		mozzarella2TranslationYAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella2TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		mozzarella2TranslationYAnimation.beginTime = beginTime
		mozzarella2TranslationYAnimation.fillMode = fillMode
		mozzarella2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/2__root"]?.layer.add(mozzarella2TranslationYAnimation, forKey:"Mozzarella_TranslationY")

		let mozzarella7ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		mozzarella7ScaleXAnimation.duration = 1.500
		mozzarella7ScaleXAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella7ScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella7ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella7ScaleXAnimation.beginTime = beginTime
		mozzarella7ScaleXAnimation.fillMode = fillMode
		mozzarella7ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/7__xScale"]?.layer.add(mozzarella7ScaleXAnimation, forKey:"Mozzarella_ScaleX")

		let mozzarella7ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		mozzarella7ScaleYAnimation.duration = 1.500
		mozzarella7ScaleYAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella7ScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella7ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella7ScaleYAnimation.beginTime = beginTime
		mozzarella7ScaleYAnimation.fillMode = fillMode
		mozzarella7ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/7__yScale"]?.layer.add(mozzarella7ScaleYAnimation, forKey:"Mozzarella_ScaleY")

		let mozzarella7TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		mozzarella7TranslationXAnimation.duration = 1.500
		mozzarella7TranslationXAnimation.values = [0.000, -295.000, -295.000] as [Float]
		mozzarella7TranslationXAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella7TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		mozzarella7TranslationXAnimation.beginTime = beginTime
		mozzarella7TranslationXAnimation.fillMode = fillMode
		mozzarella7TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/7__root"]?.layer.add(mozzarella7TranslationXAnimation, forKey:"Mozzarella_TranslationX")

		let mozzarella7TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		mozzarella7TranslationYAnimation.duration = 1.500
		mozzarella7TranslationYAnimation.values = [0.000, 60.000, 60.000] as [Float]
		mozzarella7TranslationYAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella7TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		mozzarella7TranslationYAnimation.beginTime = beginTime
		mozzarella7TranslationYAnimation.fillMode = fillMode
		mozzarella7TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/7__root"]?.layer.add(mozzarella7TranslationYAnimation, forKey:"Mozzarella_TranslationY")

		let mozzarella9ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		mozzarella9ScaleXAnimation.duration = 1.500
		mozzarella9ScaleXAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella9ScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella9ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella9ScaleXAnimation.beginTime = beginTime
		mozzarella9ScaleXAnimation.fillMode = fillMode
		mozzarella9ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/9__xScale"]?.layer.add(mozzarella9ScaleXAnimation, forKey:"Mozzarella_ScaleX")

		let mozzarella9ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		mozzarella9ScaleYAnimation.duration = 1.500
		mozzarella9ScaleYAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella9ScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella9ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella9ScaleYAnimation.beginTime = beginTime
		mozzarella9ScaleYAnimation.fillMode = fillMode
		mozzarella9ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/9__yScale"]?.layer.add(mozzarella9ScaleYAnimation, forKey:"Mozzarella_ScaleY")

		let mozzarella9TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		mozzarella9TranslationXAnimation.duration = 1.500
		mozzarella9TranslationXAnimation.values = [0.000, 310.000, 310.000] as [Float]
		mozzarella9TranslationXAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella9TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		mozzarella9TranslationXAnimation.beginTime = beginTime
		mozzarella9TranslationXAnimation.fillMode = fillMode
		mozzarella9TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/9__root"]?.layer.add(mozzarella9TranslationXAnimation, forKey:"Mozzarella_TranslationX")

		let mozzarella9TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		mozzarella9TranslationYAnimation.duration = 1.500
		mozzarella9TranslationYAnimation.values = [0.000, 90.000, 90.000] as [Float]
		mozzarella9TranslationYAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella9TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		mozzarella9TranslationYAnimation.beginTime = beginTime
		mozzarella9TranslationYAnimation.fillMode = fillMode
		mozzarella9TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/9__root"]?.layer.add(mozzarella9TranslationYAnimation, forKey:"Mozzarella_TranslationY")

		let mozzarella5ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		mozzarella5ScaleXAnimation.duration = 1.500
		mozzarella5ScaleXAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella5ScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella5ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella5ScaleXAnimation.beginTime = beginTime
		mozzarella5ScaleXAnimation.fillMode = fillMode
		mozzarella5ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/5__xScale"]?.layer.add(mozzarella5ScaleXAnimation, forKey:"Mozzarella_ScaleX")

		let mozzarella5ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		mozzarella5ScaleYAnimation.duration = 1.500
		mozzarella5ScaleYAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella5ScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella5ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella5ScaleYAnimation.beginTime = beginTime
		mozzarella5ScaleYAnimation.fillMode = fillMode
		mozzarella5ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/5__yScale"]?.layer.add(mozzarella5ScaleYAnimation, forKey:"Mozzarella_ScaleY")

		let mozzarella5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		mozzarella5TranslationXAnimation.duration = 1.500
		mozzarella5TranslationXAnimation.values = [0.000, 259.000, 259.000] as [Float]
		mozzarella5TranslationXAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella5TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		mozzarella5TranslationXAnimation.beginTime = beginTime
		mozzarella5TranslationXAnimation.fillMode = fillMode
		mozzarella5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/5__root"]?.layer.add(mozzarella5TranslationXAnimation, forKey:"Mozzarella_TranslationX")

		let mozzarella5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		mozzarella5TranslationYAnimation.duration = 1.500
		mozzarella5TranslationYAnimation.values = [0.000, -35.000, -35.000] as [Float]
		mozzarella5TranslationYAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella5TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		mozzarella5TranslationYAnimation.beginTime = beginTime
		mozzarella5TranslationYAnimation.fillMode = fillMode
		mozzarella5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/5__root"]?.layer.add(mozzarella5TranslationYAnimation, forKey:"Mozzarella_TranslationY")

		let mozzarella1ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		mozzarella1ScaleXAnimation.duration = 1.500
		mozzarella1ScaleXAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella1ScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella1ScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella1ScaleXAnimation.beginTime = beginTime
		mozzarella1ScaleXAnimation.fillMode = fillMode
		mozzarella1ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/1__xScale"]?.layer.add(mozzarella1ScaleXAnimation, forKey:"Mozzarella_ScaleX")

		let mozzarella1ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		mozzarella1ScaleYAnimation.duration = 1.500
		mozzarella1ScaleYAnimation.values = [0.200, 0.200, 0.400, 0.300] as [Float]
		mozzarella1ScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		mozzarella1ScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mozzarella1ScaleYAnimation.beginTime = beginTime
		mozzarella1ScaleYAnimation.fillMode = fillMode
		mozzarella1ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/1__yScale"]?.layer.add(mozzarella1ScaleYAnimation, forKey:"Mozzarella_ScaleY")

		let mozzarella1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		mozzarella1TranslationXAnimation.duration = 1.500
		mozzarella1TranslationXAnimation.values = [0.000, -310.000, -310.000] as [Float]
		mozzarella1TranslationXAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella1TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		mozzarella1TranslationXAnimation.beginTime = beginTime
		mozzarella1TranslationXAnimation.fillMode = fillMode
		mozzarella1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/1__root"]?.layer.add(mozzarella1TranslationXAnimation, forKey:"Mozzarella_TranslationX")

		let mozzarella1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		mozzarella1TranslationYAnimation.duration = 1.500
		mozzarella1TranslationYAnimation.values = [0.000, -70.000, -70.000] as [Float]
		mozzarella1TranslationYAnimation.keyTimes = [0.000, 0.333, 1.000] as [NSNumber]
		mozzarella1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		mozzarella1TranslationYAnimation.beginTime = beginTime
		mozzarella1TranslationYAnimation.fillMode = fillMode
		mozzarella1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mozzarella/1__root"]?.layer.add(mozzarella1TranslationYAnimation, forKey:"Mozzarella_TranslationY")
	}

	public func removeMozzarellaAnimation() {
		self.layer.removeAnimation(forKey: "Mozzarella")
		self.viewsByName["Mozzarella/4__xScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleX")
		self.viewsByName["Mozzarella/4__yScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleY")
		self.viewsByName["Mozzarella/4__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationX")
		self.viewsByName["Mozzarella/4__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationY")
		self.viewsByName["Mozzarella/3__xScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleX")
		self.viewsByName["Mozzarella/3__yScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleY")
		self.viewsByName["Mozzarella/3__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationX")
		self.viewsByName["Mozzarella/3__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationY")
		self.viewsByName["Mozzarella/6__xScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleX")
		self.viewsByName["Mozzarella/6__yScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleY")
		self.viewsByName["Mozzarella/6__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationX")
		self.viewsByName["Mozzarella/6__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationY")
		self.viewsByName["Mozzarella/8__xScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleX")
		self.viewsByName["Mozzarella/8__yScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleY")
		self.viewsByName["Mozzarella/8__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationX")
		self.viewsByName["Mozzarella/8__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationY")
		self.viewsByName["Mozzarella/2__xScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleX")
		self.viewsByName["Mozzarella/2__yScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleY")
		self.viewsByName["Mozzarella/2__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationX")
		self.viewsByName["Mozzarella/2__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationY")
		self.viewsByName["Mozzarella/7__xScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleX")
		self.viewsByName["Mozzarella/7__yScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleY")
		self.viewsByName["Mozzarella/7__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationX")
		self.viewsByName["Mozzarella/7__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationY")
		self.viewsByName["Mozzarella/9__xScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleX")
		self.viewsByName["Mozzarella/9__yScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleY")
		self.viewsByName["Mozzarella/9__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationX")
		self.viewsByName["Mozzarella/9__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationY")
		self.viewsByName["Mozzarella/5__xScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleX")
		self.viewsByName["Mozzarella/5__yScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleY")
		self.viewsByName["Mozzarella/5__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationX")
		self.viewsByName["Mozzarella/5__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationY")
		self.viewsByName["Mozzarella/1__xScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleX")
		self.viewsByName["Mozzarella/1__yScale"]?.layer.removeAnimation(forKey: "Mozzarella_ScaleY")
		self.viewsByName["Mozzarella/1__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationX")
		self.viewsByName["Mozzarella/1__root"]?.layer.removeAnimation(forKey: "Mozzarella_TranslationY")
	}

	// - MARK: Mushrooms

	public func addMushroomsAnimation() {
		addMushroomsAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addMushroomsAnimation(completion: ((Bool) -> Void)?) {
		addMushroomsAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addMushroomsAnimation(removedOnCompletion: Bool) {
		addMushroomsAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addMushroomsAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addMushroomsAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addMushroomsAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Mushrooms")
			self.animationCompletions[layer.animation(forKey: "Mushrooms")!] = complete
		}

		let fungo12RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		fungo12RotationAnimation.duration = 1.500
		fungo12RotationAnimation.values = [0.000, 0.693] as [Float]
		fungo12RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo12RotationAnimation.timingFunctions = [linearTiming]
		fungo12RotationAnimation.beginTime = beginTime
		fungo12RotationAnimation.fillMode = fillMode
		fungo12RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/12__root"]?.layer.add(fungo12RotationAnimation, forKey:"Mushrooms_Rotation")

		let fungo12TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fungo12TranslationXAnimation.duration = 1.500
		fungo12TranslationXAnimation.values = [0.000, -186.603] as [Float]
		fungo12TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo12TranslationXAnimation.timingFunctions = [anticOverTiming]
		fungo12TranslationXAnimation.beginTime = beginTime
		fungo12TranslationXAnimation.fillMode = fillMode
		fungo12TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/12__root"]?.layer.add(fungo12TranslationXAnimation, forKey:"Mushrooms_TranslationX")

		let fungo12TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fungo12TranslationYAnimation.duration = 1.500
		fungo12TranslationYAnimation.values = [0.000, -27.152] as [Float]
		fungo12TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo12TranslationYAnimation.timingFunctions = [linearTiming]
		fungo12TranslationYAnimation.beginTime = beginTime
		fungo12TranslationYAnimation.fillMode = fillMode
		fungo12TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/12__root"]?.layer.add(fungo12TranslationYAnimation, forKey:"Mushrooms_TranslationY")

		let fungo1RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		fungo1RotationAnimation.duration = 1.500
		fungo1RotationAnimation.values = [0.000, -2.865] as [Float]
		fungo1RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo1RotationAnimation.timingFunctions = [linearTiming]
		fungo1RotationAnimation.beginTime = beginTime
		fungo1RotationAnimation.fillMode = fillMode
		fungo1RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/1__root"]?.layer.add(fungo1RotationAnimation, forKey:"Mushrooms_Rotation")

		let fungo1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fungo1TranslationXAnimation.duration = 1.500
		fungo1TranslationXAnimation.values = [0.000, 192.926] as [Float]
		fungo1TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo1TranslationXAnimation.timingFunctions = [anticOverTiming]
		fungo1TranslationXAnimation.beginTime = beginTime
		fungo1TranslationXAnimation.fillMode = fillMode
		fungo1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/1__root"]?.layer.add(fungo1TranslationXAnimation, forKey:"Mushrooms_TranslationX")

		let fungo1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fungo1TranslationYAnimation.duration = 1.500
		fungo1TranslationYAnimation.values = [0.000, 156.497] as [Float]
		fungo1TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo1TranslationYAnimation.timingFunctions = [linearTiming]
		fungo1TranslationYAnimation.beginTime = beginTime
		fungo1TranslationYAnimation.fillMode = fillMode
		fungo1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/1__root"]?.layer.add(fungo1TranslationYAnimation, forKey:"Mushrooms_TranslationY")

		let fungo6RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		fungo6RotationAnimation.duration = 1.500
		fungo6RotationAnimation.values = [0.000, -1.251] as [Float]
		fungo6RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo6RotationAnimation.timingFunctions = [linearTiming]
		fungo6RotationAnimation.beginTime = beginTime
		fungo6RotationAnimation.fillMode = fillMode
		fungo6RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/6__root"]?.layer.add(fungo6RotationAnimation, forKey:"Mushrooms_Rotation")

		let fungo6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fungo6TranslationXAnimation.duration = 1.500
		fungo6TranslationXAnimation.values = [0.000, 315.782] as [Float]
		fungo6TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo6TranslationXAnimation.timingFunctions = [anticOverTiming]
		fungo6TranslationXAnimation.beginTime = beginTime
		fungo6TranslationXAnimation.fillMode = fillMode
		fungo6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/6__root"]?.layer.add(fungo6TranslationXAnimation, forKey:"Mushrooms_TranslationX")

		let fungo6TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fungo6TranslationYAnimation.duration = 1.500
		fungo6TranslationYAnimation.values = [0.000, 84.818] as [Float]
		fungo6TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo6TranslationYAnimation.timingFunctions = [linearTiming]
		fungo6TranslationYAnimation.beginTime = beginTime
		fungo6TranslationYAnimation.fillMode = fillMode
		fungo6TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/6__root"]?.layer.add(fungo6TranslationYAnimation, forKey:"Mushrooms_TranslationY")

		let fungo3RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		fungo3RotationAnimation.duration = 1.500
		fungo3RotationAnimation.values = [0.000, 1.129] as [Float]
		fungo3RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo3RotationAnimation.timingFunctions = [linearTiming]
		fungo3RotationAnimation.beginTime = beginTime
		fungo3RotationAnimation.fillMode = fillMode
		fungo3RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/3__root"]?.layer.add(fungo3RotationAnimation, forKey:"Mushrooms_Rotation")

		let fungo3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fungo3TranslationXAnimation.duration = 1.500
		fungo3TranslationXAnimation.values = [0.000, 270.381] as [Float]
		fungo3TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo3TranslationXAnimation.timingFunctions = [anticOverTiming]
		fungo3TranslationXAnimation.beginTime = beginTime
		fungo3TranslationXAnimation.fillMode = fillMode
		fungo3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/3__root"]?.layer.add(fungo3TranslationXAnimation, forKey:"Mushrooms_TranslationX")

		let fungo3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fungo3TranslationYAnimation.duration = 1.500
		fungo3TranslationYAnimation.values = [0.000, 111.362] as [Float]
		fungo3TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo3TranslationYAnimation.timingFunctions = [linearTiming]
		fungo3TranslationYAnimation.beginTime = beginTime
		fungo3TranslationYAnimation.fillMode = fillMode
		fungo3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/3__root"]?.layer.add(fungo3TranslationYAnimation, forKey:"Mushrooms_TranslationY")

		let fungo13RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		fungo13RotationAnimation.duration = 1.500
		fungo13RotationAnimation.values = [0.000, -0.739] as [Float]
		fungo13RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo13RotationAnimation.timingFunctions = [linearTiming]
		fungo13RotationAnimation.beginTime = beginTime
		fungo13RotationAnimation.fillMode = fillMode
		fungo13RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/13__root"]?.layer.add(fungo13RotationAnimation, forKey:"Mushrooms_Rotation")

		let fungo13TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fungo13TranslationXAnimation.duration = 1.500
		fungo13TranslationXAnimation.values = [0.000, -180.848] as [Float]
		fungo13TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo13TranslationXAnimation.timingFunctions = [anticOverTiming]
		fungo13TranslationXAnimation.beginTime = beginTime
		fungo13TranslationXAnimation.fillMode = fillMode
		fungo13TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/13__root"]?.layer.add(fungo13TranslationXAnimation, forKey:"Mushrooms_TranslationX")

		let fungo13TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fungo13TranslationYAnimation.duration = 1.500
		fungo13TranslationYAnimation.values = [0.000, -191.132] as [Float]
		fungo13TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo13TranslationYAnimation.timingFunctions = [linearTiming]
		fungo13TranslationYAnimation.beginTime = beginTime
		fungo13TranslationYAnimation.fillMode = fillMode
		fungo13TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/13__root"]?.layer.add(fungo13TranslationYAnimation, forKey:"Mushrooms_TranslationY")

		let fungo10RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		fungo10RotationAnimation.duration = 1.500
		fungo10RotationAnimation.values = [0.000, -3.367] as [Float]
		fungo10RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo10RotationAnimation.timingFunctions = [linearTiming]
		fungo10RotationAnimation.beginTime = beginTime
		fungo10RotationAnimation.fillMode = fillMode
		fungo10RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/10__root"]?.layer.add(fungo10RotationAnimation, forKey:"Mushrooms_Rotation")

		let fungo10TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fungo10TranslationXAnimation.duration = 1.500
		fungo10TranslationXAnimation.values = [0.000, -245.472] as [Float]
		fungo10TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo10TranslationXAnimation.timingFunctions = [anticOverTiming]
		fungo10TranslationXAnimation.beginTime = beginTime
		fungo10TranslationXAnimation.fillMode = fillMode
		fungo10TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/10__root"]?.layer.add(fungo10TranslationXAnimation, forKey:"Mushrooms_TranslationX")

		let fungo10TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fungo10TranslationYAnimation.duration = 1.500
		fungo10TranslationYAnimation.values = [0.000, 51.364] as [Float]
		fungo10TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo10TranslationYAnimation.timingFunctions = [linearTiming]
		fungo10TranslationYAnimation.beginTime = beginTime
		fungo10TranslationYAnimation.fillMode = fillMode
		fungo10TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/10__root"]?.layer.add(fungo10TranslationYAnimation, forKey:"Mushrooms_TranslationY")

		let fungo9RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		fungo9RotationAnimation.duration = 1.500
		fungo9RotationAnimation.values = [0.000, -4.407] as [Float]
		fungo9RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo9RotationAnimation.timingFunctions = [linearTiming]
		fungo9RotationAnimation.beginTime = beginTime
		fungo9RotationAnimation.fillMode = fillMode
		fungo9RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/9__root"]?.layer.add(fungo9RotationAnimation, forKey:"Mushrooms_Rotation")

		let fungo9TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fungo9TranslationXAnimation.duration = 1.500
		fungo9TranslationXAnimation.values = [0.000, -249.765] as [Float]
		fungo9TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo9TranslationXAnimation.timingFunctions = [anticOverTiming]
		fungo9TranslationXAnimation.beginTime = beginTime
		fungo9TranslationXAnimation.fillMode = fillMode
		fungo9TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/9__root"]?.layer.add(fungo9TranslationXAnimation, forKey:"Mushrooms_TranslationX")

		let fungo9TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fungo9TranslationYAnimation.duration = 1.500
		fungo9TranslationYAnimation.values = [0.000, 167.364] as [Float]
		fungo9TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo9TranslationYAnimation.timingFunctions = [linearTiming]
		fungo9TranslationYAnimation.beginTime = beginTime
		fungo9TranslationYAnimation.fillMode = fillMode
		fungo9TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/9__root"]?.layer.add(fungo9TranslationYAnimation, forKey:"Mushrooms_TranslationY")

		let fungo4RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		fungo4RotationAnimation.duration = 1.500
		fungo4RotationAnimation.values = [0.000, -3.774] as [Float]
		fungo4RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo4RotationAnimation.timingFunctions = [linearTiming]
		fungo4RotationAnimation.beginTime = beginTime
		fungo4RotationAnimation.fillMode = fillMode
		fungo4RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/4__root"]?.layer.add(fungo4RotationAnimation, forKey:"Mushrooms_Rotation")

		let fungo4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fungo4TranslationXAnimation.duration = 1.500
		fungo4TranslationXAnimation.values = [0.000, 309.192] as [Float]
		fungo4TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo4TranslationXAnimation.timingFunctions = [anticOverTiming]
		fungo4TranslationXAnimation.beginTime = beginTime
		fungo4TranslationXAnimation.fillMode = fillMode
		fungo4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/4__root"]?.layer.add(fungo4TranslationXAnimation, forKey:"Mushrooms_TranslationX")

		let fungo4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fungo4TranslationYAnimation.duration = 1.500
		fungo4TranslationYAnimation.values = [0.000, 55.462] as [Float]
		fungo4TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo4TranslationYAnimation.timingFunctions = [linearTiming]
		fungo4TranslationYAnimation.beginTime = beginTime
		fungo4TranslationYAnimation.fillMode = fillMode
		fungo4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/4__root"]?.layer.add(fungo4TranslationYAnimation, forKey:"Mushrooms_TranslationY")
	}

	public func removeMushroomsAnimation() {
		self.layer.removeAnimation(forKey: "Mushrooms")
		self.viewsByName["Fungo/12__root"]?.layer.removeAnimation(forKey: "Mushrooms_Rotation")
		self.viewsByName["Fungo/12__root"]?.layer.removeAnimation(forKey: "Mushrooms_TranslationX")
		self.viewsByName["Fungo/12__root"]?.layer.removeAnimation(forKey: "Mushrooms_TranslationY")
		self.viewsByName["Fungo/1__root"]?.layer.removeAnimation(forKey: "Mushrooms_Rotation")
		self.viewsByName["Fungo/1__root"]?.layer.removeAnimation(forKey: "Mushrooms_TranslationX")
		self.viewsByName["Fungo/1__root"]?.layer.removeAnimation(forKey: "Mushrooms_TranslationY")
		self.viewsByName["Fungo/6__root"]?.layer.removeAnimation(forKey: "Mushrooms_Rotation")
		self.viewsByName["Fungo/6__root"]?.layer.removeAnimation(forKey: "Mushrooms_TranslationX")
		self.viewsByName["Fungo/6__root"]?.layer.removeAnimation(forKey: "Mushrooms_TranslationY")
		self.viewsByName["Fungo/3__root"]?.layer.removeAnimation(forKey: "Mushrooms_Rotation")
		self.viewsByName["Fungo/3__root"]?.layer.removeAnimation(forKey: "Mushrooms_TranslationX")
		self.viewsByName["Fungo/3__root"]?.layer.removeAnimation(forKey: "Mushrooms_TranslationY")
		self.viewsByName["Fungo/13__root"]?.layer.removeAnimation(forKey: "Mushrooms_Rotation")
		self.viewsByName["Fungo/13__root"]?.layer.removeAnimation(forKey: "Mushrooms_TranslationX")
		self.viewsByName["Fungo/13__root"]?.layer.removeAnimation(forKey: "Mushrooms_TranslationY")
		self.viewsByName["Fungo/10__root"]?.layer.removeAnimation(forKey: "Mushrooms_Rotation")
		self.viewsByName["Fungo/10__root"]?.layer.removeAnimation(forKey: "Mushrooms_TranslationX")
		self.viewsByName["Fungo/10__root"]?.layer.removeAnimation(forKey: "Mushrooms_TranslationY")
		self.viewsByName["Fungo/9__root"]?.layer.removeAnimation(forKey: "Mushrooms_Rotation")
		self.viewsByName["Fungo/9__root"]?.layer.removeAnimation(forKey: "Mushrooms_TranslationX")
		self.viewsByName["Fungo/9__root"]?.layer.removeAnimation(forKey: "Mushrooms_TranslationY")
		self.viewsByName["Fungo/4__root"]?.layer.removeAnimation(forKey: "Mushrooms_Rotation")
		self.viewsByName["Fungo/4__root"]?.layer.removeAnimation(forKey: "Mushrooms_TranslationX")
		self.viewsByName["Fungo/4__root"]?.layer.removeAnimation(forKey: "Mushrooms_TranslationY")
	}

	// - MARK: Mushrooms/OneQuarter

	public func addMushroomsOneQuarterAnimation() {
		addMushroomsOneQuarterAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addMushroomsOneQuarterAnimation(completion: ((Bool) -> Void)?) {
		addMushroomsOneQuarterAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addMushroomsOneQuarterAnimation(removedOnCompletion: Bool) {
		addMushroomsOneQuarterAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addMushroomsOneQuarterAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addMushroomsOneQuarterAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addMushroomsOneQuarterAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "MushroomsOneQuarter")
			self.animationCompletions[layer.animation(forKey: "MushroomsOneQuarter")!] = complete
		}

		let fungo12RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		fungo12RotationAnimation.duration = 1.500
		fungo12RotationAnimation.values = [0.000, 0.693] as [Float]
		fungo12RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo12RotationAnimation.timingFunctions = [linearTiming]
		fungo12RotationAnimation.beginTime = beginTime
		fungo12RotationAnimation.fillMode = fillMode
		fungo12RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/12__root"]?.layer.add(fungo12RotationAnimation, forKey:"Mushrooms/OneQuarter_Rotation")

		let fungo12TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fungo12TranslationXAnimation.duration = 1.500
		fungo12TranslationXAnimation.values = [0.000, -213.348] as [Float]
		fungo12TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo12TranslationXAnimation.timingFunctions = [anticOverTiming]
		fungo12TranslationXAnimation.beginTime = beginTime
		fungo12TranslationXAnimation.fillMode = fillMode
		fungo12TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/12__root"]?.layer.add(fungo12TranslationXAnimation, forKey:"Mushrooms/OneQuarter_TranslationX")

		let fungo12TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fungo12TranslationYAnimation.duration = 1.500
		fungo12TranslationYAnimation.values = [0.000, 3.446] as [Float]
		fungo12TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo12TranslationYAnimation.timingFunctions = [linearTiming]
		fungo12TranslationYAnimation.beginTime = beginTime
		fungo12TranslationYAnimation.fillMode = fillMode
		fungo12TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/12__root"]?.layer.add(fungo12TranslationYAnimation, forKey:"Mushrooms/OneQuarter_TranslationY")

		let fungo1RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		fungo1RotationAnimation.duration = 1.500
		fungo1RotationAnimation.values = [0.000, -2.865] as [Float]
		fungo1RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo1RotationAnimation.timingFunctions = [linearTiming]
		fungo1RotationAnimation.beginTime = beginTime
		fungo1RotationAnimation.fillMode = fillMode
		fungo1RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/1__root"]?.layer.add(fungo1RotationAnimation, forKey:"Mushrooms/OneQuarter_Rotation")

		let fungo1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fungo1TranslationXAnimation.duration = 1.500
		fungo1TranslationXAnimation.values = [0.000, 235.401] as [Float]
		fungo1TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo1TranslationXAnimation.timingFunctions = [anticOverTiming]
		fungo1TranslationXAnimation.beginTime = beginTime
		fungo1TranslationXAnimation.fillMode = fillMode
		fungo1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/1__root"]?.layer.add(fungo1TranslationXAnimation, forKey:"Mushrooms/OneQuarter_TranslationX")

		let fungo1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fungo1TranslationYAnimation.duration = 1.500
		fungo1TranslationYAnimation.values = [0.000, 231.273] as [Float]
		fungo1TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo1TranslationYAnimation.timingFunctions = [linearTiming]
		fungo1TranslationYAnimation.beginTime = beginTime
		fungo1TranslationYAnimation.fillMode = fillMode
		fungo1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/1__root"]?.layer.add(fungo1TranslationYAnimation, forKey:"Mushrooms/OneQuarter_TranslationY")

		let fungo6RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		fungo6RotationAnimation.duration = 1.500
		fungo6RotationAnimation.values = [0.000, -1.251] as [Float]
		fungo6RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo6RotationAnimation.timingFunctions = [linearTiming]
		fungo6RotationAnimation.beginTime = beginTime
		fungo6RotationAnimation.fillMode = fillMode
		fungo6RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/6__root"]?.layer.add(fungo6RotationAnimation, forKey:"Mushrooms/OneQuarter_Rotation")

		let fungo6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fungo6TranslationXAnimation.duration = 1.500
		fungo6TranslationXAnimation.values = [0.000, 332.929] as [Float]
		fungo6TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo6TranslationXAnimation.timingFunctions = [anticOverTiming]
		fungo6TranslationXAnimation.beginTime = beginTime
		fungo6TranslationXAnimation.fillMode = fillMode
		fungo6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/6__root"]?.layer.add(fungo6TranslationXAnimation, forKey:"Mushrooms/OneQuarter_TranslationX")

		let fungo6TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fungo6TranslationYAnimation.duration = 1.500
		fungo6TranslationYAnimation.values = [0.000, 155.523] as [Float]
		fungo6TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo6TranslationYAnimation.timingFunctions = [linearTiming]
		fungo6TranslationYAnimation.beginTime = beginTime
		fungo6TranslationYAnimation.fillMode = fillMode
		fungo6TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/6__root"]?.layer.add(fungo6TranslationYAnimation, forKey:"Mushrooms/OneQuarter_TranslationY")

		let fungo3RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		fungo3RotationAnimation.duration = 1.500
		fungo3RotationAnimation.values = [0.000, 1.129] as [Float]
		fungo3RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo3RotationAnimation.timingFunctions = [linearTiming]
		fungo3RotationAnimation.beginTime = beginTime
		fungo3RotationAnimation.fillMode = fillMode
		fungo3RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/3__root"]?.layer.add(fungo3RotationAnimation, forKey:"Mushrooms/OneQuarter_Rotation")

		let fungo3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fungo3TranslationXAnimation.duration = 1.500
		fungo3TranslationXAnimation.values = [0.000, 270.381] as [Float]
		fungo3TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo3TranslationXAnimation.timingFunctions = [anticOverTiming]
		fungo3TranslationXAnimation.beginTime = beginTime
		fungo3TranslationXAnimation.fillMode = fillMode
		fungo3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/3__root"]?.layer.add(fungo3TranslationXAnimation, forKey:"Mushrooms/OneQuarter_TranslationX")

		let fungo3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fungo3TranslationYAnimation.duration = 1.500
		fungo3TranslationYAnimation.values = [0.000, 111.362] as [Float]
		fungo3TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo3TranslationYAnimation.timingFunctions = [linearTiming]
		fungo3TranslationYAnimation.beginTime = beginTime
		fungo3TranslationYAnimation.fillMode = fillMode
		fungo3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/3__root"]?.layer.add(fungo3TranslationYAnimation, forKey:"Mushrooms/OneQuarter_TranslationY")

		let fungo13RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		fungo13RotationAnimation.duration = 1.500
		fungo13RotationAnimation.values = [0.000, -0.739] as [Float]
		fungo13RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo13RotationAnimation.timingFunctions = [linearTiming]
		fungo13RotationAnimation.beginTime = beginTime
		fungo13RotationAnimation.fillMode = fillMode
		fungo13RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/13__root"]?.layer.add(fungo13RotationAnimation, forKey:"Mushrooms/OneQuarter_Rotation")

		let fungo13TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fungo13TranslationXAnimation.duration = 1.500
		fungo13TranslationXAnimation.values = [0.000, -226.372] as [Float]
		fungo13TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo13TranslationXAnimation.timingFunctions = [anticOverTiming]
		fungo13TranslationXAnimation.beginTime = beginTime
		fungo13TranslationXAnimation.fillMode = fillMode
		fungo13TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/13__root"]?.layer.add(fungo13TranslationXAnimation, forKey:"Mushrooms/OneQuarter_TranslationX")

		let fungo13TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fungo13TranslationYAnimation.duration = 1.500
		fungo13TranslationYAnimation.values = [0.000, -119.254] as [Float]
		fungo13TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo13TranslationYAnimation.timingFunctions = [linearTiming]
		fungo13TranslationYAnimation.beginTime = beginTime
		fungo13TranslationYAnimation.fillMode = fillMode
		fungo13TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/13__root"]?.layer.add(fungo13TranslationYAnimation, forKey:"Mushrooms/OneQuarter_TranslationY")

		let fungo10RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		fungo10RotationAnimation.duration = 1.500
		fungo10RotationAnimation.values = [0.000, -3.367] as [Float]
		fungo10RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo10RotationAnimation.timingFunctions = [linearTiming]
		fungo10RotationAnimation.beginTime = beginTime
		fungo10RotationAnimation.fillMode = fillMode
		fungo10RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/10__root"]?.layer.add(fungo10RotationAnimation, forKey:"Mushrooms/OneQuarter_Rotation")

		let fungo10TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fungo10TranslationXAnimation.duration = 1.500
		fungo10TranslationXAnimation.values = [0.000, -283.072] as [Float]
		fungo10TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo10TranslationXAnimation.timingFunctions = [anticOverTiming]
		fungo10TranslationXAnimation.beginTime = beginTime
		fungo10TranslationXAnimation.fillMode = fillMode
		fungo10TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/10__root"]?.layer.add(fungo10TranslationXAnimation, forKey:"Mushrooms/OneQuarter_TranslationX")

		let fungo10TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fungo10TranslationYAnimation.duration = 1.500
		fungo10TranslationYAnimation.values = [0.000, 155.268] as [Float]
		fungo10TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo10TranslationYAnimation.timingFunctions = [linearTiming]
		fungo10TranslationYAnimation.beginTime = beginTime
		fungo10TranslationYAnimation.fillMode = fillMode
		fungo10TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/10__root"]?.layer.add(fungo10TranslationYAnimation, forKey:"Mushrooms/OneQuarter_TranslationY")

		let fungo9RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		fungo9RotationAnimation.duration = 1.500
		fungo9RotationAnimation.values = [0.000, -4.407] as [Float]
		fungo9RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo9RotationAnimation.timingFunctions = [linearTiming]
		fungo9RotationAnimation.beginTime = beginTime
		fungo9RotationAnimation.fillMode = fillMode
		fungo9RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/9__root"]?.layer.add(fungo9RotationAnimation, forKey:"Mushrooms/OneQuarter_Rotation")

		let fungo9TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fungo9TranslationXAnimation.duration = 1.500
		fungo9TranslationXAnimation.values = [0.000, -269.951] as [Float]
		fungo9TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo9TranslationXAnimation.timingFunctions = [anticOverTiming]
		fungo9TranslationXAnimation.beginTime = beginTime
		fungo9TranslationXAnimation.fillMode = fillMode
		fungo9TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/9__root"]?.layer.add(fungo9TranslationXAnimation, forKey:"Mushrooms/OneQuarter_TranslationX")

		let fungo9TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fungo9TranslationYAnimation.duration = 1.500
		fungo9TranslationYAnimation.values = [0.000, 241.979] as [Float]
		fungo9TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo9TranslationYAnimation.timingFunctions = [linearTiming]
		fungo9TranslationYAnimation.beginTime = beginTime
		fungo9TranslationYAnimation.fillMode = fillMode
		fungo9TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/9__root"]?.layer.add(fungo9TranslationYAnimation, forKey:"Mushrooms/OneQuarter_TranslationY")

		let fungo4RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		fungo4RotationAnimation.duration = 1.500
		fungo4RotationAnimation.values = [0.000, -3.774] as [Float]
		fungo4RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo4RotationAnimation.timingFunctions = [linearTiming]
		fungo4RotationAnimation.beginTime = beginTime
		fungo4RotationAnimation.fillMode = fillMode
		fungo4RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/4__root"]?.layer.add(fungo4RotationAnimation, forKey:"Mushrooms/OneQuarter_Rotation")

		let fungo4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fungo4TranslationXAnimation.duration = 1.500
		fungo4TranslationXAnimation.values = [0.000, 309.192] as [Float]
		fungo4TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo4TranslationXAnimation.timingFunctions = [anticOverTiming]
		fungo4TranslationXAnimation.beginTime = beginTime
		fungo4TranslationXAnimation.fillMode = fillMode
		fungo4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/4__root"]?.layer.add(fungo4TranslationXAnimation, forKey:"Mushrooms/OneQuarter_TranslationX")

		let fungo4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fungo4TranslationYAnimation.duration = 1.500
		fungo4TranslationYAnimation.values = [0.000, 55.462] as [Float]
		fungo4TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		fungo4TranslationYAnimation.timingFunctions = [linearTiming]
		fungo4TranslationYAnimation.beginTime = beginTime
		fungo4TranslationYAnimation.fillMode = fillMode
		fungo4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Fungo/4__root"]?.layer.add(fungo4TranslationYAnimation, forKey:"Mushrooms/OneQuarter_TranslationY")
	}

	public func removeMushroomsOneQuarterAnimation() {
		self.layer.removeAnimation(forKey: "MushroomsOneQuarter")
		self.viewsByName["Fungo/12__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_Rotation")
		self.viewsByName["Fungo/12__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_TranslationX")
		self.viewsByName["Fungo/12__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_TranslationY")
		self.viewsByName["Fungo/1__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_Rotation")
		self.viewsByName["Fungo/1__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_TranslationX")
		self.viewsByName["Fungo/1__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_TranslationY")
		self.viewsByName["Fungo/6__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_Rotation")
		self.viewsByName["Fungo/6__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_TranslationX")
		self.viewsByName["Fungo/6__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_TranslationY")
		self.viewsByName["Fungo/3__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_Rotation")
		self.viewsByName["Fungo/3__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_TranslationX")
		self.viewsByName["Fungo/3__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_TranslationY")
		self.viewsByName["Fungo/13__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_Rotation")
		self.viewsByName["Fungo/13__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_TranslationX")
		self.viewsByName["Fungo/13__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_TranslationY")
		self.viewsByName["Fungo/10__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_Rotation")
		self.viewsByName["Fungo/10__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_TranslationX")
		self.viewsByName["Fungo/10__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_TranslationY")
		self.viewsByName["Fungo/9__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_Rotation")
		self.viewsByName["Fungo/9__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_TranslationX")
		self.viewsByName["Fungo/9__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_TranslationY")
		self.viewsByName["Fungo/4__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_Rotation")
		self.viewsByName["Fungo/4__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_TranslationX")
		self.viewsByName["Fungo/4__root"]?.layer.removeAnimation(forKey: "Mushrooms/OneQuarter_TranslationY")
	}

	// - MARK: Olives/Black

	public func addOlivesBlackAnimation() {
		addOlivesBlackAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addOlivesBlackAnimation(completion: ((Bool) -> Void)?) {
		addOlivesBlackAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addOlivesBlackAnimation(removedOnCompletion: Bool) {
		addOlivesBlackAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addOlivesBlackAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addOlivesBlackAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addOlivesBlackAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "OlivesBlack")
			self.animationCompletions[layer.animation(forKey: "OlivesBlack")!] = complete
        }
        
        let olivaNera6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        olivaNera6TranslationXAnimation.duration = 1.500
        olivaNera6TranslationXAnimation.values = [0.000, -274.549] as [Float]
        olivaNera6TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        olivaNera6TranslationXAnimation.timingFunctions = [anticOverTiming]
        olivaNera6TranslationXAnimation.beginTime = beginTime
        olivaNera6TranslationXAnimation.fillMode = fillMode
        olivaNera6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/6__root"]?.layer.add(olivaNera6TranslationXAnimation, forKey:"Olives/Black_TranslationX")
        
        let olivaNera6TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        olivaNera6TranslationYAnimation.duration = 1.500
        olivaNera6TranslationYAnimation.values = [0.000, 53.211] as [Float]
        olivaNera6TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        olivaNera6TranslationYAnimation.timingFunctions = [linearTiming]
        olivaNera6TranslationYAnimation.beginTime = beginTime
        olivaNera6TranslationYAnimation.fillMode = fillMode
        olivaNera6TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/6__root"]?.layer.add(olivaNera6TranslationYAnimation, forKey:"Olives/Black_TranslationY")
        
        let olivaNera4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        olivaNera4TranslationXAnimation.duration = 1.500
        olivaNera4TranslationXAnimation.values = [0.000, -200.000, -228.161] as [Float]
        olivaNera4TranslationXAnimation.keyTimes = [0.000, 0.940, 1.000] as [NSNumber]
        olivaNera4TranslationXAnimation.timingFunctions = [linearTiming, anticOverTiming]
        olivaNera4TranslationXAnimation.beginTime = beginTime
        olivaNera4TranslationXAnimation.fillMode = fillMode
        olivaNera4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/4__root"]?.layer.add(olivaNera4TranslationXAnimation, forKey:"Olives/Black_TranslationX")
        
        let olivaNera4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        olivaNera4TranslationYAnimation.duration = 1.500
        olivaNera4TranslationYAnimation.values = [0.000, 220.000, 121.091] as [Float]
        olivaNera4TranslationYAnimation.keyTimes = [0.000, 0.940, 1.000] as [NSNumber]
        olivaNera4TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
        olivaNera4TranslationYAnimation.beginTime = beginTime
        olivaNera4TranslationYAnimation.fillMode = fillMode
        olivaNera4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/4__root"]?.layer.add(olivaNera4TranslationYAnimation, forKey:"Olives/Black_TranslationY")
        
        let olivaNera3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        olivaNera3TranslationXAnimation.duration = 1.500
        olivaNera3TranslationXAnimation.values = [0.000, 236.044] as [Float]
        olivaNera3TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        olivaNera3TranslationXAnimation.timingFunctions = [anticOverTiming]
        olivaNera3TranslationXAnimation.beginTime = beginTime
        olivaNera3TranslationXAnimation.fillMode = fillMode
        olivaNera3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/3__root"]?.layer.add(olivaNera3TranslationXAnimation, forKey:"Olives/Black_TranslationX")
        
        let olivaNera3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        olivaNera3TranslationYAnimation.duration = 1.500
        olivaNera3TranslationYAnimation.values = [0.000, 78.513] as [Float]
        olivaNera3TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        olivaNera3TranslationYAnimation.timingFunctions = [linearTiming]
        olivaNera3TranslationYAnimation.beginTime = beginTime
        olivaNera3TranslationYAnimation.fillMode = fillMode
        olivaNera3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/3__root"]?.layer.add(olivaNera3TranslationYAnimation, forKey:"Olives/Black_TranslationY")
        
        let olivaNera8TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        olivaNera8TranslationXAnimation.duration = 1.500
        olivaNera8TranslationXAnimation.values = [0.000, 250.000, 243.086] as [Float]
        olivaNera8TranslationXAnimation.keyTimes = [0.000, 0.940, 1.000] as [NSNumber]
        olivaNera8TranslationXAnimation.timingFunctions = [linearTiming, anticOverTiming]
        olivaNera8TranslationXAnimation.beginTime = beginTime
        olivaNera8TranslationXAnimation.fillMode = fillMode
        olivaNera8TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/8__root"]?.layer.add(olivaNera8TranslationXAnimation, forKey:"Olives/Black_TranslationX")
        
        let olivaNera8TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        olivaNera8TranslationYAnimation.duration = 1.500
        olivaNera8TranslationYAnimation.values = [0.000, -40.000, -31.302] as [Float]
        olivaNera8TranslationYAnimation.keyTimes = [0.000, 0.940, 1.000] as [NSNumber]
        olivaNera8TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
        olivaNera8TranslationYAnimation.beginTime = beginTime
        olivaNera8TranslationYAnimation.fillMode = fillMode
        olivaNera8TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/8__root"]?.layer.add(olivaNera8TranslationYAnimation, forKey:"Olives/Black_TranslationY")
        
        let olivaNera5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        olivaNera5TranslationXAnimation.duration = 1.500
        olivaNera5TranslationXAnimation.values = [0.000, -240.000, -297.383] as [Float]
        olivaNera5TranslationXAnimation.keyTimes = [0.000, 0.940, 1.000] as [NSNumber]
        olivaNera5TranslationXAnimation.timingFunctions = [linearTiming, anticOverTiming]
        olivaNera5TranslationXAnimation.beginTime = beginTime
        olivaNera5TranslationXAnimation.fillMode = fillMode
        olivaNera5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/5__root"]?.layer.add(olivaNera5TranslationXAnimation, forKey:"Olives/Black_TranslationX")
        
        let olivaNera5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        olivaNera5TranslationYAnimation.duration = 1.500
        olivaNera5TranslationYAnimation.values = [0.000, -10.000, -21.457] as [Float]
        olivaNera5TranslationYAnimation.keyTimes = [0.000, 0.940, 1.000] as [NSNumber]
        olivaNera5TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
        olivaNera5TranslationYAnimation.beginTime = beginTime
        olivaNera5TranslationYAnimation.fillMode = fillMode
        olivaNera5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/5__root"]?.layer.add(olivaNera5TranslationYAnimation, forKey:"Olives/Black_TranslationY")
        
        let olivaNera10TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        olivaNera10TranslationXAnimation.duration = 1.500
        olivaNera10TranslationXAnimation.values = [0.000, 270.000, 318.877] as [Float]
        olivaNera10TranslationXAnimation.keyTimes = [0.000, 0.940, 1.000] as [NSNumber]
        olivaNera10TranslationXAnimation.timingFunctions = [linearTiming, anticOverTiming]
        olivaNera10TranslationXAnimation.beginTime = beginTime
        olivaNera10TranslationXAnimation.fillMode = fillMode
        olivaNera10TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/10__root"]?.layer.add(olivaNera10TranslationXAnimation, forKey:"Olives/Black_TranslationX")
        
        let olivaNera10TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        olivaNera10TranslationYAnimation.duration = 1.500
        olivaNera10TranslationYAnimation.values = [0.000, 58.570] as [Float]
        olivaNera10TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        olivaNera10TranslationYAnimation.timingFunctions = [linearTiming]
        olivaNera10TranslationYAnimation.beginTime = beginTime
        olivaNera10TranslationYAnimation.fillMode = fillMode
        olivaNera10TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/10__root"]?.layer.add(olivaNera10TranslationYAnimation, forKey:"Olives/Black_TranslationY")
	}

	public func removeOlivesBlackAnimation() {
		self.layer.removeAnimation(forKey: "OlivesBlack")
		self.viewsByName["Oliva/Nera/6__root"]?.layer.removeAnimation(forKey: "Olives/Black_TranslationX")
		self.viewsByName["Oliva/Nera/6__root"]?.layer.removeAnimation(forKey: "Olives/Black_TranslationY")
		self.viewsByName["Oliva/Nera/4__root"]?.layer.removeAnimation(forKey: "Olives/Black_TranslationX")
		self.viewsByName["Oliva/Nera/4__root"]?.layer.removeAnimation(forKey: "Olives/Black_TranslationY")
		self.viewsByName["Oliva/Nera/3__root"]?.layer.removeAnimation(forKey: "Olives/Black_TranslationX")
		self.viewsByName["Oliva/Nera/3__root"]?.layer.removeAnimation(forKey: "Olives/Black_TranslationY")
		self.viewsByName["Oliva/Nera/8__root"]?.layer.removeAnimation(forKey: "Olives/Black_TranslationX")
		self.viewsByName["Oliva/Nera/8__root"]?.layer.removeAnimation(forKey: "Olives/Black_TranslationY")
		self.viewsByName["Oliva/Nera/5__root"]?.layer.removeAnimation(forKey: "Olives/Black_TranslationX")
		self.viewsByName["Oliva/Nera/5__root"]?.layer.removeAnimation(forKey: "Olives/Black_TranslationY")
		self.viewsByName["Oliva/Nera/10__root"]?.layer.removeAnimation(forKey: "Olives/Black_TranslationX")
		self.viewsByName["Oliva/Nera/10__root"]?.layer.removeAnimation(forKey: "Olives/Black_TranslationY")
	}

	// - MARK: Olives/Black/OneQuarter

	public func addOlivesBlackOneQuarterAnimation() {
		addOlivesBlackOneQuarterAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addOlivesBlackOneQuarterAnimation(completion: ((Bool) -> Void)?) {
		addOlivesBlackOneQuarterAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addOlivesBlackOneQuarterAnimation(removedOnCompletion: Bool) {
		addOlivesBlackOneQuarterAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addOlivesBlackOneQuarterAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addOlivesBlackOneQuarterAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addOlivesBlackOneQuarterAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "OlivesBlackOneQuarter")
			self.animationCompletions[layer.animation(forKey: "OlivesBlackOneQuarter")!] = complete
        }
        
        let olivaNera6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        olivaNera6TranslationXAnimation.duration = 1.500
        olivaNera6TranslationXAnimation.values = [0.000, -191.996] as [Float]
        olivaNera6TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        olivaNera6TranslationXAnimation.timingFunctions = [anticOverTiming]
        olivaNera6TranslationXAnimation.beginTime = beginTime
        olivaNera6TranslationXAnimation.fillMode = fillMode
        olivaNera6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/6__root"]?.layer.add(olivaNera6TranslationXAnimation, forKey:"Olives/Black/OneQuarter_TranslationX")
        
        let olivaNera6TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        olivaNera6TranslationYAnimation.duration = 1.500
        olivaNera6TranslationYAnimation.values = [0.000, 97.424] as [Float]
        olivaNera6TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        olivaNera6TranslationYAnimation.timingFunctions = [linearTiming]
        olivaNera6TranslationYAnimation.beginTime = beginTime
        olivaNera6TranslationYAnimation.fillMode = fillMode
        olivaNera6TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/6__root"]?.layer.add(olivaNera6TranslationYAnimation, forKey:"Olives/Black/OneQuarter_TranslationY")
        
        let olivaNera4RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
        olivaNera4RotationAnimation.duration = 1.500
        olivaNera4RotationAnimation.values = [0.000, 0.013] as [Float]
        olivaNera4RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        olivaNera4RotationAnimation.timingFunctions = [linearTiming]
        olivaNera4RotationAnimation.beginTime = beginTime
        olivaNera4RotationAnimation.fillMode = fillMode
        olivaNera4RotationAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/4__root"]?.layer.add(olivaNera4RotationAnimation, forKey:"Olives/Black/OneQuarter_Rotation")
        
        let olivaNera4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        olivaNera4TranslationXAnimation.duration = 1.500
        olivaNera4TranslationXAnimation.values = [0.000, -194.979] as [Float]
        olivaNera4TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        olivaNera4TranslationXAnimation.timingFunctions = [anticOverTiming]
        olivaNera4TranslationXAnimation.beginTime = beginTime
        olivaNera4TranslationXAnimation.fillMode = fillMode
        olivaNera4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/4__root"]?.layer.add(olivaNera4TranslationXAnimation, forKey:"Olives/Black/OneQuarter_TranslationX")
        
        let olivaNera4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        olivaNera4TranslationYAnimation.duration = 1.500
        olivaNera4TranslationYAnimation.values = [0.000, 179.843] as [Float]
        olivaNera4TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        olivaNera4TranslationYAnimation.timingFunctions = [linearTiming]
        olivaNera4TranslationYAnimation.beginTime = beginTime
        olivaNera4TranslationYAnimation.fillMode = fillMode
        olivaNera4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/4__root"]?.layer.add(olivaNera4TranslationYAnimation, forKey:"Olives/Black/OneQuarter_TranslationY")
        
        let olivaNera3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        olivaNera3TranslationXAnimation.duration = 1.500
        olivaNera3TranslationXAnimation.values = [0.000, 340.000, 347.884] as [Float]
        olivaNera3TranslationXAnimation.keyTimes = [0.000, 0.940, 1.000] as [NSNumber]
        olivaNera3TranslationXAnimation.timingFunctions = [linearTiming, anticOverTiming]
        olivaNera3TranslationXAnimation.beginTime = beginTime
        olivaNera3TranslationXAnimation.fillMode = fillMode
        olivaNera3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/3__root"]?.layer.add(olivaNera3TranslationXAnimation, forKey:"Olives/Black/OneQuarter_TranslationX")
        
        let olivaNera3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        olivaNera3TranslationYAnimation.duration = 1.500
        olivaNera3TranslationYAnimation.values = [0.000, 170.000, 142.807] as [Float]
        olivaNera3TranslationYAnimation.keyTimes = [0.000, 0.940, 1.000] as [NSNumber]
        olivaNera3TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
        olivaNera3TranslationYAnimation.beginTime = beginTime
        olivaNera3TranslationYAnimation.fillMode = fillMode
        olivaNera3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/3__root"]?.layer.add(olivaNera3TranslationYAnimation, forKey:"Olives/Black/OneQuarter_TranslationY")
        
        let olivaNera8TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        olivaNera8TranslationXAnimation.duration = 1.500
        olivaNera8TranslationXAnimation.values = [0.000, 350.000, 376.549] as [Float]
        olivaNera8TranslationXAnimation.keyTimes = [0.000, 0.940, 1.000] as [NSNumber]
        olivaNera8TranslationXAnimation.timingFunctions = [linearTiming, anticOverTiming]
        olivaNera8TranslationXAnimation.beginTime = beginTime
        olivaNera8TranslationXAnimation.fillMode = fillMode
        olivaNera8TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/8__root"]?.layer.add(olivaNera8TranslationXAnimation, forKey:"Olives/Black/OneQuarter_TranslationX")
        
        let olivaNera8TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        olivaNera8TranslationYAnimation.duration = 1.500
        olivaNera8TranslationYAnimation.values = [0.000, -100.000, -81.626] as [Float]
        olivaNera8TranslationYAnimation.keyTimes = [0.000, 0.940, 1.000] as [NSNumber]
        olivaNera8TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
        olivaNera8TranslationYAnimation.beginTime = beginTime
        olivaNera8TranslationYAnimation.fillMode = fillMode
        olivaNera8TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/8__root"]?.layer.add(olivaNera8TranslationYAnimation, forKey:"Olives/Black/OneQuarter_TranslationY")
        
        let olivaNera5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        olivaNera5TranslationXAnimation.duration = 1.500
        olivaNera5TranslationXAnimation.values = [0.000, -180.079] as [Float]
        olivaNera5TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        olivaNera5TranslationXAnimation.timingFunctions = [anticOverTiming]
        olivaNera5TranslationXAnimation.beginTime = beginTime
        olivaNera5TranslationXAnimation.fillMode = fillMode
        olivaNera5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/5__root"]?.layer.add(olivaNera5TranslationXAnimation, forKey:"Olives/Black/OneQuarter_TranslationX")
        
        let olivaNera5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        olivaNera5TranslationYAnimation.duration = 1.500
        olivaNera5TranslationYAnimation.values = [0.000, -7.817] as [Float]
        olivaNera5TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        olivaNera5TranslationYAnimation.timingFunctions = [linearTiming]
        olivaNera5TranslationYAnimation.beginTime = beginTime
        olivaNera5TranslationYAnimation.fillMode = fillMode
        olivaNera5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/5__root"]?.layer.add(olivaNera5TranslationYAnimation, forKey:"Olives/Black/OneQuarter_TranslationY")
        
        let olivaNera10TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        olivaNera10TranslationXAnimation.duration = 1.500
        olivaNera10TranslationXAnimation.values = [0.000, 440.000, 421.507] as [Float]
        olivaNera10TranslationXAnimation.keyTimes = [0.000, 0.940, 1.000] as [NSNumber]
        olivaNera10TranslationXAnimation.timingFunctions = [linearTiming, anticOverTiming]
        olivaNera10TranslationXAnimation.beginTime = beginTime
        olivaNera10TranslationXAnimation.fillMode = fillMode
        olivaNera10TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/10__root"]?.layer.add(olivaNera10TranslationXAnimation, forKey:"Olives/Black/OneQuarter_TranslationX")
        
        let olivaNera10TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        olivaNera10TranslationYAnimation.duration = 1.500
        olivaNera10TranslationYAnimation.values = [0.000, 90.000, 74.839] as [Float]
        olivaNera10TranslationYAnimation.keyTimes = [0.000, 0.940, 1.000] as [NSNumber]
        olivaNera10TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
        olivaNera10TranslationYAnimation.beginTime = beginTime
        olivaNera10TranslationYAnimation.fillMode = fillMode
        olivaNera10TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Oliva/Nera/10__root"]?.layer.add(olivaNera10TranslationYAnimation, forKey:"Olives/Black/OneQuarter_TranslationY")
	}

	public func removeOlivesBlackOneQuarterAnimation() {
		self.layer.removeAnimation(forKey: "OlivesBlackOneQuarter")
		self.viewsByName["Oliva/Nera/6__root"]?.layer.removeAnimation(forKey: "Olives/Black/OneQuarter_TranslationX")
		self.viewsByName["Oliva/Nera/6__root"]?.layer.removeAnimation(forKey: "Olives/Black/OneQuarter_TranslationY")
		self.viewsByName["Oliva/Nera/4__root"]?.layer.removeAnimation(forKey: "Olives/Black/OneQuarter_Rotation")
		self.viewsByName["Oliva/Nera/4__root"]?.layer.removeAnimation(forKey: "Olives/Black/OneQuarter_TranslationX")
		self.viewsByName["Oliva/Nera/4__root"]?.layer.removeAnimation(forKey: "Olives/Black/OneQuarter_TranslationY")
		self.viewsByName["Oliva/Nera/3__root"]?.layer.removeAnimation(forKey: "Olives/Black/OneQuarter_TranslationX")
		self.viewsByName["Oliva/Nera/3__root"]?.layer.removeAnimation(forKey: "Olives/Black/OneQuarter_TranslationY")
		self.viewsByName["Oliva/Nera/8__root"]?.layer.removeAnimation(forKey: "Olives/Black/OneQuarter_TranslationX")
		self.viewsByName["Oliva/Nera/8__root"]?.layer.removeAnimation(forKey: "Olives/Black/OneQuarter_TranslationY")
		self.viewsByName["Oliva/Nera/5__root"]?.layer.removeAnimation(forKey: "Olives/Black/OneQuarter_TranslationX")
		self.viewsByName["Oliva/Nera/5__root"]?.layer.removeAnimation(forKey: "Olives/Black/OneQuarter_TranslationY")
		self.viewsByName["Oliva/Nera/10__root"]?.layer.removeAnimation(forKey: "Olives/Black/OneQuarter_TranslationX")
		self.viewsByName["Oliva/Nera/10__root"]?.layer.removeAnimation(forKey: "Olives/Black/OneQuarter_TranslationY")
	}

	// - MARK: Olives/Green

	public func addOlivesGreenAnimation() {
		addOlivesGreenAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addOlivesGreenAnimation(completion: ((Bool) -> Void)?) {
		addOlivesGreenAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addOlivesGreenAnimation(removedOnCompletion: Bool) {
		addOlivesGreenAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addOlivesGreenAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addOlivesGreenAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addOlivesGreenAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "OlivesGreen")
			self.animationCompletions[layer.animation(forKey: "OlivesGreen")!] = complete
		}

		let olivaVerde1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		olivaVerde1TranslationXAnimation.duration = 1.500
		olivaVerde1TranslationXAnimation.values = [0.000, 230.000] as [Float]
		olivaVerde1TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		olivaVerde1TranslationXAnimation.timingFunctions = [anticOverTiming]
		olivaVerde1TranslationXAnimation.beginTime = beginTime
		olivaVerde1TranslationXAnimation.fillMode = fillMode
		olivaVerde1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Oliva/Verde/1__root"]?.layer.add(olivaVerde1TranslationXAnimation, forKey:"Olives/Green_TranslationX")

		let olivaVerde1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		olivaVerde1TranslationYAnimation.duration = 1.500
		olivaVerde1TranslationYAnimation.values = [0.000, 70.000] as [Float]
		olivaVerde1TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		olivaVerde1TranslationYAnimation.timingFunctions = [linearTiming]
		olivaVerde1TranslationYAnimation.beginTime = beginTime
		olivaVerde1TranslationYAnimation.fillMode = fillMode
		olivaVerde1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Oliva/Verde/1__root"]?.layer.add(olivaVerde1TranslationYAnimation, forKey:"Olives/Green_TranslationY")

		let olivaVerde9TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		olivaVerde9TranslationXAnimation.duration = 1.500
		olivaVerde9TranslationXAnimation.values = [0.000, -280.000] as [Float]
		olivaVerde9TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		olivaVerde9TranslationXAnimation.timingFunctions = [anticOverTiming]
		olivaVerde9TranslationXAnimation.beginTime = beginTime
		olivaVerde9TranslationXAnimation.fillMode = fillMode
		olivaVerde9TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Oliva/Verde/9__root"]?.layer.add(olivaVerde9TranslationXAnimation, forKey:"Olives/Green_TranslationX")

		let olivaVerde9TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		olivaVerde9TranslationYAnimation.duration = 1.500
		olivaVerde9TranslationYAnimation.values = [0.000, -80.000] as [Float]
		olivaVerde9TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		olivaVerde9TranslationYAnimation.timingFunctions = [linearTiming]
		olivaVerde9TranslationYAnimation.beginTime = beginTime
		olivaVerde9TranslationYAnimation.fillMode = fillMode
		olivaVerde9TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Oliva/Verde/9__root"]?.layer.add(olivaVerde9TranslationYAnimation, forKey:"Olives/Green_TranslationY")

		let olivaVerde2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		olivaVerde2TranslationXAnimation.duration = 1.500
		olivaVerde2TranslationXAnimation.values = [0.000, 180.000, 180.000] as [Float]
		olivaVerde2TranslationXAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		olivaVerde2TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		olivaVerde2TranslationXAnimation.beginTime = beginTime
		olivaVerde2TranslationXAnimation.fillMode = fillMode
		olivaVerde2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Oliva/Verde/2__root"]?.layer.add(olivaVerde2TranslationXAnimation, forKey:"Olives/Green_TranslationX")

		let olivaVerde2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		olivaVerde2TranslationYAnimation.duration = 1.500
		olivaVerde2TranslationYAnimation.values = [0.000, 70.000, 70.000] as [Float]
		olivaVerde2TranslationYAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		olivaVerde2TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		olivaVerde2TranslationYAnimation.beginTime = beginTime
		olivaVerde2TranslationYAnimation.fillMode = fillMode
		olivaVerde2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Oliva/Verde/2__root"]?.layer.add(olivaVerde2TranslationYAnimation, forKey:"Olives/Green_TranslationY")

		let olivaVerde6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		olivaVerde6TranslationXAnimation.duration = 1.500
		olivaVerde6TranslationXAnimation.values = [0.000, -300.000, -300.000] as [Float]
		olivaVerde6TranslationXAnimation.keyTimes = [0.000, 0.997, 1.000] as [NSNumber]
		olivaVerde6TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		olivaVerde6TranslationXAnimation.beginTime = beginTime
		olivaVerde6TranslationXAnimation.fillMode = fillMode
		olivaVerde6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Oliva/Verde/6__root"]?.layer.add(olivaVerde6TranslationXAnimation, forKey:"Olives/Green_TranslationX")

		let olivaVerde6TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		olivaVerde6TranslationYAnimation.duration = 1.500
		olivaVerde6TranslationYAnimation.values = [0.000, 216.393, 220.000] as [Float]
		olivaVerde6TranslationYAnimation.keyTimes = [0.000, 0.994, 1.000] as [NSNumber]
		olivaVerde6TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		olivaVerde6TranslationYAnimation.beginTime = beginTime
		olivaVerde6TranslationYAnimation.fillMode = fillMode
		olivaVerde6TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Oliva/Verde/6__root"]?.layer.add(olivaVerde6TranslationYAnimation, forKey:"Olives/Green_TranslationY")

		let olivaVerde7TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		olivaVerde7TranslationXAnimation.duration = 1.500
		olivaVerde7TranslationXAnimation.values = [0.000, -250.000] as [Float]
		olivaVerde7TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		olivaVerde7TranslationXAnimation.timingFunctions = [anticOverTiming]
		olivaVerde7TranslationXAnimation.beginTime = beginTime
		olivaVerde7TranslationXAnimation.fillMode = fillMode
		olivaVerde7TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Oliva/Verde/7__root"]?.layer.add(olivaVerde7TranslationXAnimation, forKey:"Olives/Green_TranslationX")

		let olivaVerde7TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		olivaVerde7TranslationYAnimation.duration = 1.500
		olivaVerde7TranslationYAnimation.values = [0.000, -50.000] as [Float]
		olivaVerde7TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		olivaVerde7TranslationYAnimation.timingFunctions = [linearTiming]
		olivaVerde7TranslationYAnimation.beginTime = beginTime
		olivaVerde7TranslationYAnimation.fillMode = fillMode
		olivaVerde7TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Oliva/Verde/7__root"]?.layer.add(olivaVerde7TranslationYAnimation, forKey:"Olives/Green_TranslationY")

		let olivaVerde3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		olivaVerde3TranslationXAnimation.duration = 1.500
		olivaVerde3TranslationXAnimation.values = [0.000, 280.000] as [Float]
		olivaVerde3TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		olivaVerde3TranslationXAnimation.timingFunctions = [anticOverTiming]
		olivaVerde3TranslationXAnimation.beginTime = beginTime
		olivaVerde3TranslationXAnimation.fillMode = fillMode
		olivaVerde3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Oliva/Verde/3__root"]?.layer.add(olivaVerde3TranslationXAnimation, forKey:"Olives/Green_TranslationX")

		let olivaVerde3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		olivaVerde3TranslationYAnimation.duration = 1.500
		olivaVerde3TranslationYAnimation.values = [0.000, 130.000] as [Float]
		olivaVerde3TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		olivaVerde3TranslationYAnimation.timingFunctions = [linearTiming]
		olivaVerde3TranslationYAnimation.beginTime = beginTime
		olivaVerde3TranslationYAnimation.fillMode = fillMode
		olivaVerde3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Oliva/Verde/3__root"]?.layer.add(olivaVerde3TranslationYAnimation, forKey:"Olives/Green_TranslationY")
	}

	public func removeOlivesGreenAnimation() {
		self.layer.removeAnimation(forKey: "OlivesGreen")
		self.viewsByName["Oliva/Verde/1__root"]?.layer.removeAnimation(forKey: "Olives/Green_TranslationX")
		self.viewsByName["Oliva/Verde/1__root"]?.layer.removeAnimation(forKey: "Olives/Green_TranslationY")
		self.viewsByName["Oliva/Verde/9__root"]?.layer.removeAnimation(forKey: "Olives/Green_TranslationX")
		self.viewsByName["Oliva/Verde/9__root"]?.layer.removeAnimation(forKey: "Olives/Green_TranslationY")
		self.viewsByName["Oliva/Verde/2__root"]?.layer.removeAnimation(forKey: "Olives/Green_TranslationX")
		self.viewsByName["Oliva/Verde/2__root"]?.layer.removeAnimation(forKey: "Olives/Green_TranslationY")
		self.viewsByName["Oliva/Verde/6__root"]?.layer.removeAnimation(forKey: "Olives/Green_TranslationX")
		self.viewsByName["Oliva/Verde/6__root"]?.layer.removeAnimation(forKey: "Olives/Green_TranslationY")
		self.viewsByName["Oliva/Verde/7__root"]?.layer.removeAnimation(forKey: "Olives/Green_TranslationX")
		self.viewsByName["Oliva/Verde/7__root"]?.layer.removeAnimation(forKey: "Olives/Green_TranslationY")
		self.viewsByName["Oliva/Verde/3__root"]?.layer.removeAnimation(forKey: "Olives/Green_TranslationX")
		self.viewsByName["Oliva/Verde/3__root"]?.layer.removeAnimation(forKey: "Olives/Green_TranslationY")
	}

	// - MARK: Onion

	public func addOnionAnimation() {
		addOnionAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addOnionAnimation(completion: ((Bool) -> Void)?) {
		addOnionAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addOnionAnimation(removedOnCompletion: Bool) {
		addOnionAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addOnionAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addOnionAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addOnionAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Onion")
			self.animationCompletions[layer.animation(forKey: "Onion")!] = complete
		}

		let cipolla1RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		cipolla1RotationAnimation.duration = 1.500
		cipolla1RotationAnimation.values = [0.000, -0.498] as [Float]
		cipolla1RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cipolla1RotationAnimation.timingFunctions = [linearTiming]
		cipolla1RotationAnimation.beginTime = beginTime
		cipolla1RotationAnimation.fillMode = fillMode
		cipolla1RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cipolla/1__root"]?.layer.add(cipolla1RotationAnimation, forKey:"Onion_Rotation")

		let cipolla1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cipolla1TranslationXAnimation.duration = 1.500
		cipolla1TranslationXAnimation.values = [0.000, 218.647] as [Float]
		cipolla1TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cipolla1TranslationXAnimation.timingFunctions = [anticOverTiming]
		cipolla1TranslationXAnimation.beginTime = beginTime
		cipolla1TranslationXAnimation.fillMode = fillMode
		cipolla1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cipolla/1__root"]?.layer.add(cipolla1TranslationXAnimation, forKey:"Onion_TranslationX")

		let cipolla1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cipolla1TranslationYAnimation.duration = 1.500
		cipolla1TranslationYAnimation.values = [0.000, 20.161] as [Float]
		cipolla1TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cipolla1TranslationYAnimation.timingFunctions = [linearTiming]
		cipolla1TranslationYAnimation.beginTime = beginTime
		cipolla1TranslationYAnimation.fillMode = fillMode
		cipolla1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cipolla/1__root"]?.layer.add(cipolla1TranslationYAnimation, forKey:"Onion_TranslationY")

		let cipolla7TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cipolla7TranslationXAnimation.duration = 1.500
		cipolla7TranslationXAnimation.values = [0.000, 231.025] as [Float]
		cipolla7TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cipolla7TranslationXAnimation.timingFunctions = [anticOverTiming]
		cipolla7TranslationXAnimation.beginTime = beginTime
		cipolla7TranslationXAnimation.fillMode = fillMode
		cipolla7TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cipolla/7__root"]?.layer.add(cipolla7TranslationXAnimation, forKey:"Onion_TranslationX")

		let cipolla7TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cipolla7TranslationYAnimation.duration = 1.500
		cipolla7TranslationYAnimation.values = [0.000, -25.661] as [Float]
		cipolla7TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cipolla7TranslationYAnimation.timingFunctions = [linearTiming]
		cipolla7TranslationYAnimation.beginTime = beginTime
		cipolla7TranslationYAnimation.fillMode = fillMode
		cipolla7TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cipolla/7__root"]?.layer.add(cipolla7TranslationYAnimation, forKey:"Onion_TranslationY")

		let cipolla5RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		cipolla5RotationAnimation.duration = 1.500
		cipolla5RotationAnimation.values = [0.000, 0.479] as [Float]
		cipolla5RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cipolla5RotationAnimation.timingFunctions = [linearTiming]
		cipolla5RotationAnimation.beginTime = beginTime
		cipolla5RotationAnimation.fillMode = fillMode
		cipolla5RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cipolla/5__root"]?.layer.add(cipolla5RotationAnimation, forKey:"Onion_Rotation")

		let cipolla5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cipolla5TranslationXAnimation.duration = 1.500
		cipolla5TranslationXAnimation.values = [0.000, -295.863] as [Float]
		cipolla5TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cipolla5TranslationXAnimation.timingFunctions = [anticOverTiming]
		cipolla5TranslationXAnimation.beginTime = beginTime
		cipolla5TranslationXAnimation.fillMode = fillMode
		cipolla5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cipolla/5__root"]?.layer.add(cipolla5TranslationXAnimation, forKey:"Onion_TranslationX")

		let cipolla5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cipolla5TranslationYAnimation.duration = 1.500
		cipolla5TranslationYAnimation.values = [0.000, -25.407] as [Float]
		cipolla5TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cipolla5TranslationYAnimation.timingFunctions = [linearTiming]
		cipolla5TranslationYAnimation.beginTime = beginTime
		cipolla5TranslationYAnimation.fillMode = fillMode
		cipolla5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cipolla/5__root"]?.layer.add(cipolla5TranslationYAnimation, forKey:"Onion_TranslationY")

		let cipolla12RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		cipolla12RotationAnimation.duration = 1.500
		cipolla12RotationAnimation.values = [0.000, 0.567] as [Float]
		cipolla12RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cipolla12RotationAnimation.timingFunctions = [linearTiming]
		cipolla12RotationAnimation.beginTime = beginTime
		cipolla12RotationAnimation.fillMode = fillMode
		cipolla12RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cipolla/12__root"]?.layer.add(cipolla12RotationAnimation, forKey:"Onion_Rotation")

		let cipolla12TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cipolla12TranslationXAnimation.duration = 1.500
		cipolla12TranslationXAnimation.values = [0.000, -209.862] as [Float]
		cipolla12TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cipolla12TranslationXAnimation.timingFunctions = [anticOverTiming]
		cipolla12TranslationXAnimation.beginTime = beginTime
		cipolla12TranslationXAnimation.fillMode = fillMode
		cipolla12TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cipolla/12__root"]?.layer.add(cipolla12TranslationXAnimation, forKey:"Onion_TranslationX")

		let cipolla12TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cipolla12TranslationYAnimation.duration = 1.500
		cipolla12TranslationYAnimation.values = [0.000, 18.981] as [Float]
		cipolla12TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cipolla12TranslationYAnimation.timingFunctions = [linearTiming]
		cipolla12TranslationYAnimation.beginTime = beginTime
		cipolla12TranslationYAnimation.fillMode = fillMode
		cipolla12TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cipolla/12__root"]?.layer.add(cipolla12TranslationYAnimation, forKey:"Onion_TranslationY")

		let cipolla8RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		cipolla8RotationAnimation.duration = 1.500
		cipolla8RotationAnimation.values = [0.000, 2.827] as [Float]
		cipolla8RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cipolla8RotationAnimation.timingFunctions = [linearTiming]
		cipolla8RotationAnimation.beginTime = beginTime
		cipolla8RotationAnimation.fillMode = fillMode
		cipolla8RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cipolla/8__root"]?.layer.add(cipolla8RotationAnimation, forKey:"Onion_Rotation")

		let cipolla8TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cipolla8TranslationXAnimation.duration = 1.500
		cipolla8TranslationXAnimation.values = [0.000, -171.429] as [Float]
		cipolla8TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cipolla8TranslationXAnimation.timingFunctions = [anticOverTiming]
		cipolla8TranslationXAnimation.beginTime = beginTime
		cipolla8TranslationXAnimation.fillMode = fillMode
		cipolla8TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cipolla/8__root"]?.layer.add(cipolla8TranslationXAnimation, forKey:"Onion_TranslationX")

		let cipolla8TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cipolla8TranslationYAnimation.duration = 1.500
		cipolla8TranslationYAnimation.values = [0.000, 77.424] as [Float]
		cipolla8TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cipolla8TranslationYAnimation.timingFunctions = [linearTiming]
		cipolla8TranslationYAnimation.beginTime = beginTime
		cipolla8TranslationYAnimation.fillMode = fillMode
		cipolla8TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cipolla/8__root"]?.layer.add(cipolla8TranslationYAnimation, forKey:"Onion_TranslationY")

		let cipolla3RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		cipolla3RotationAnimation.duration = 1.500
		cipolla3RotationAnimation.values = [0.000, 0.558] as [Float]
		cipolla3RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cipolla3RotationAnimation.timingFunctions = [linearTiming]
		cipolla3RotationAnimation.beginTime = beginTime
		cipolla3RotationAnimation.fillMode = fillMode
		cipolla3RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cipolla/3__root"]?.layer.add(cipolla3RotationAnimation, forKey:"Onion_Rotation")

		let cipolla3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cipolla3TranslationXAnimation.duration = 1.500
		cipolla3TranslationXAnimation.values = [0.000, 300.213] as [Float]
		cipolla3TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cipolla3TranslationXAnimation.timingFunctions = [anticOverTiming]
		cipolla3TranslationXAnimation.beginTime = beginTime
		cipolla3TranslationXAnimation.fillMode = fillMode
		cipolla3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cipolla/3__root"]?.layer.add(cipolla3TranslationXAnimation, forKey:"Onion_TranslationX")

		let cipolla3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cipolla3TranslationYAnimation.duration = 1.500
		cipolla3TranslationYAnimation.values = [0.000, 47.111] as [Float]
		cipolla3TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		cipolla3TranslationYAnimation.timingFunctions = [linearTiming]
		cipolla3TranslationYAnimation.beginTime = beginTime
		cipolla3TranslationYAnimation.fillMode = fillMode
		cipolla3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cipolla/3__root"]?.layer.add(cipolla3TranslationYAnimation, forKey:"Onion_TranslationY")
	}

	public func removeOnionAnimation() {
		self.layer.removeAnimation(forKey: "Onion")
		self.viewsByName["Cipolla/1__root"]?.layer.removeAnimation(forKey: "Onion_Rotation")
		self.viewsByName["Cipolla/1__root"]?.layer.removeAnimation(forKey: "Onion_TranslationX")
		self.viewsByName["Cipolla/1__root"]?.layer.removeAnimation(forKey: "Onion_TranslationY")
		self.viewsByName["Cipolla/7__root"]?.layer.removeAnimation(forKey: "Onion_TranslationX")
		self.viewsByName["Cipolla/7__root"]?.layer.removeAnimation(forKey: "Onion_TranslationY")
		self.viewsByName["Cipolla/5__root"]?.layer.removeAnimation(forKey: "Onion_Rotation")
		self.viewsByName["Cipolla/5__root"]?.layer.removeAnimation(forKey: "Onion_TranslationX")
		self.viewsByName["Cipolla/5__root"]?.layer.removeAnimation(forKey: "Onion_TranslationY")
		self.viewsByName["Cipolla/12__root"]?.layer.removeAnimation(forKey: "Onion_Rotation")
		self.viewsByName["Cipolla/12__root"]?.layer.removeAnimation(forKey: "Onion_TranslationX")
		self.viewsByName["Cipolla/12__root"]?.layer.removeAnimation(forKey: "Onion_TranslationY")
		self.viewsByName["Cipolla/8__root"]?.layer.removeAnimation(forKey: "Onion_Rotation")
		self.viewsByName["Cipolla/8__root"]?.layer.removeAnimation(forKey: "Onion_TranslationX")
		self.viewsByName["Cipolla/8__root"]?.layer.removeAnimation(forKey: "Onion_TranslationY")
		self.viewsByName["Cipolla/3__root"]?.layer.removeAnimation(forKey: "Onion_Rotation")
		self.viewsByName["Cipolla/3__root"]?.layer.removeAnimation(forKey: "Onion_TranslationX")
		self.viewsByName["Cipolla/3__root"]?.layer.removeAnimation(forKey: "Onion_TranslationY")
	}
    
    // - MARK: Origan
    
    public func addOriganAnimation() {
        addOriganAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
    }
    
    public func addOriganAnimation(completion: ((Bool) -> Void)?) {
        addOriganAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
    }
    
    public func addOriganAnimation(removedOnCompletion: Bool) {
        addOriganAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
    }
    
    public func addOriganAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
        addOriganAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
    }
    
    public func addOriganAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
        let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
        if let complete = completion {
            let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
            representativeAnimation.duration = 2.000
            representativeAnimation.delegate = self
            self.layer.add(representativeAnimation, forKey: "Origan")
            self.animationCompletions[layer.animation(forKey: "Origan")!] = complete
        }
        
        let origanoOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
        origanoOpacityAnimation.duration = 2.000
        origanoOpacityAnimation.values = [0.000, 1.000] as [Float]
        origanoOpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        origanoOpacityAnimation.timingFunctions = [linearTiming]
        origanoOpacityAnimation.beginTime = beginTime
        origanoOpacityAnimation.fillMode = fillMode
        origanoOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Origano__root"]?.layer.add(origanoOpacityAnimation, forKey:"Origan_Opacity")
        
        let origanoScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
        origanoScaleXAnimation.duration = 2.000
        origanoScaleXAnimation.values = [0.250, 0.500] as [Float]
        origanoScaleXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        origanoScaleXAnimation.timingFunctions = [linearTiming]
        origanoScaleXAnimation.beginTime = beginTime
        origanoScaleXAnimation.fillMode = fillMode
        origanoScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Origano__xScale"]?.layer.add(origanoScaleXAnimation, forKey:"Origan_ScaleX")
        
        let origanoScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
        origanoScaleYAnimation.duration = 2.000
        origanoScaleYAnimation.values = [0.250, 0.500] as [Float]
        origanoScaleYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        origanoScaleYAnimation.timingFunctions = [linearTiming]
        origanoScaleYAnimation.beginTime = beginTime
        origanoScaleYAnimation.fillMode = fillMode
        origanoScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Origano__yScale"]?.layer.add(origanoScaleYAnimation, forKey:"Origan_ScaleY")
    }
    
    public func removeOriganAnimation() {
        self.layer.removeAnimation(forKey: "Origan")
        self.viewsByName["Origano__root"]?.layer.removeAnimation(forKey: "Origan_Opacity")
        self.viewsByName["Origano__xScale"]?.layer.removeAnimation(forKey: "Origan_ScaleX")
        self.viewsByName["Origano__yScale"]?.layer.removeAnimation(forKey: "Origan_ScaleY")
    }
    
    // - MARK: Parmeasan
    
    public func addParmeasanAnimation() {
        addParmeasanAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
    }
    
    public func addParmeasanAnimation(completion: ((Bool) -> Void)?) {
        addParmeasanAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
    }
    
    public func addParmeasanAnimation(removedOnCompletion: Bool) {
        addParmeasanAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
    }
    
    public func addParmeasanAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
        addParmeasanAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
    }
    
    public func addParmeasanAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
        let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
        if let complete = completion {
            let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
            representativeAnimation.duration = 2.000
            representativeAnimation.delegate = self
            self.layer.add(representativeAnimation, forKey: "Parmeasan")
            self.animationCompletions[layer.animation(forKey: "Parmeasan")!] = complete
        }
        
        let parmigianoOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
        parmigianoOpacityAnimation.duration = 2.000
        parmigianoOpacityAnimation.values = [0.000, 1.000] as [Float]
        parmigianoOpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        parmigianoOpacityAnimation.timingFunctions = [linearTiming]
        parmigianoOpacityAnimation.beginTime = beginTime
        parmigianoOpacityAnimation.fillMode = fillMode
        parmigianoOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Parmigiano__root"]?.layer.add(parmigianoOpacityAnimation, forKey:"Parmeasan_Opacity")
        
        let parmigianoScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
        parmigianoScaleXAnimation.duration = 2.000
        parmigianoScaleXAnimation.values = [0.250, 0.500] as [Float]
        parmigianoScaleXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        parmigianoScaleXAnimation.timingFunctions = [linearTiming]
        parmigianoScaleXAnimation.beginTime = beginTime
        parmigianoScaleXAnimation.fillMode = fillMode
        parmigianoScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Parmigiano__xScale"]?.layer.add(parmigianoScaleXAnimation, forKey:"Parmeasan_ScaleX")
        
        let parmigianoScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
        parmigianoScaleYAnimation.duration = 2.000
        parmigianoScaleYAnimation.values = [0.250, 0.500] as [Float]
        parmigianoScaleYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
        parmigianoScaleYAnimation.timingFunctions = [linearTiming]
        parmigianoScaleYAnimation.beginTime = beginTime
        parmigianoScaleYAnimation.fillMode = fillMode
        parmigianoScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["Parmigiano__yScale"]?.layer.add(parmigianoScaleYAnimation, forKey:"Parmeasan_ScaleY")
    }
    
    public func removeParmeasanAnimation() {
        self.layer.removeAnimation(forKey: "Parmeasan")
        self.viewsByName["Parmigiano__root"]?.layer.removeAnimation(forKey: "Parmeasan_Opacity")
        self.viewsByName["Parmigiano__xScale"]?.layer.removeAnimation(forKey: "Parmeasan_ScaleX")
        self.viewsByName["Parmigiano__yScale"]?.layer.removeAnimation(forKey: "Parmeasan_ScaleY")
    }

	// - MARK: Peppers

	public func addPeppersAnimation() {
		addPeppersAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addPeppersAnimation(completion: ((Bool) -> Void)?) {
		addPeppersAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addPeppersAnimation(removedOnCompletion: Bool) {
		addPeppersAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addPeppersAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addPeppersAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addPeppersAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Peppers")
			self.animationCompletions[layer.animation(forKey: "Peppers")!] = complete
		}

		let peperone7RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		peperone7RotationAnimation.duration = 1.500
		peperone7RotationAnimation.values = [0.000, -2.767] as [Float]
		peperone7RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		peperone7RotationAnimation.timingFunctions = [linearTiming]
		peperone7RotationAnimation.beginTime = beginTime
		peperone7RotationAnimation.fillMode = fillMode
		peperone7RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/7__root"]?.layer.add(peperone7RotationAnimation, forKey:"Peppers_Rotation")

		let peperone7TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		peperone7TranslationXAnimation.duration = 1.500
		peperone7TranslationXAnimation.values = [0.000, -262.988] as [Float]
		peperone7TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		peperone7TranslationXAnimation.timingFunctions = [anticOverTiming]
		peperone7TranslationXAnimation.beginTime = beginTime
		peperone7TranslationXAnimation.fillMode = fillMode
		peperone7TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/7__root"]?.layer.add(peperone7TranslationXAnimation, forKey:"Peppers_TranslationX")

		let peperone7TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		peperone7TranslationYAnimation.duration = 1.500
		peperone7TranslationYAnimation.values = [0.000, 94.358] as [Float]
		peperone7TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		peperone7TranslationYAnimation.timingFunctions = [linearTiming]
		peperone7TranslationYAnimation.beginTime = beginTime
		peperone7TranslationYAnimation.fillMode = fillMode
		peperone7TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/7__root"]?.layer.add(peperone7TranslationYAnimation, forKey:"Peppers_TranslationY")

		let peperone12RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		peperone12RotationAnimation.duration = 1.500
		peperone12RotationAnimation.values = [0.000, 0.528] as [Float]
		peperone12RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		peperone12RotationAnimation.timingFunctions = [linearTiming]
		peperone12RotationAnimation.beginTime = beginTime
		peperone12RotationAnimation.fillMode = fillMode
		peperone12RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/12__root"]?.layer.add(peperone12RotationAnimation, forKey:"Peppers_Rotation")

		let peperone12TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		peperone12TranslationXAnimation.duration = 1.500
		peperone12TranslationXAnimation.values = [0.000, -241.837] as [Float]
		peperone12TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		peperone12TranslationXAnimation.timingFunctions = [anticOverTiming]
		peperone12TranslationXAnimation.beginTime = beginTime
		peperone12TranslationXAnimation.fillMode = fillMode
		peperone12TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/12__root"]?.layer.add(peperone12TranslationXAnimation, forKey:"Peppers_TranslationX")

		let peperone12TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		peperone12TranslationYAnimation.duration = 1.500
		peperone12TranslationYAnimation.values = [0.000, -79.752] as [Float]
		peperone12TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		peperone12TranslationYAnimation.timingFunctions = [linearTiming]
		peperone12TranslationYAnimation.beginTime = beginTime
		peperone12TranslationYAnimation.fillMode = fillMode
		peperone12TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/12__root"]?.layer.add(peperone12TranslationYAnimation, forKey:"Peppers_TranslationY")

		let peperone8RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		peperone8RotationAnimation.duration = 1.500
		peperone8RotationAnimation.values = [0.000, -0.321] as [Float]
		peperone8RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		peperone8RotationAnimation.timingFunctions = [linearTiming]
		peperone8RotationAnimation.beginTime = beginTime
		peperone8RotationAnimation.fillMode = fillMode
		peperone8RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/8__root"]?.layer.add(peperone8RotationAnimation, forKey:"Peppers_Rotation")

		let peperone8TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		peperone8TranslationXAnimation.duration = 1.500
		peperone8TranslationXAnimation.values = [0.000, -220.622] as [Float]
		peperone8TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		peperone8TranslationXAnimation.timingFunctions = [anticOverTiming]
		peperone8TranslationXAnimation.beginTime = beginTime
		peperone8TranslationXAnimation.fillMode = fillMode
		peperone8TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/8__root"]?.layer.add(peperone8TranslationXAnimation, forKey:"Peppers_TranslationX")

		let peperone8TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		peperone8TranslationYAnimation.duration = 1.500
		peperone8TranslationYAnimation.values = [0.000, 59.428] as [Float]
		peperone8TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		peperone8TranslationYAnimation.timingFunctions = [linearTiming]
		peperone8TranslationYAnimation.beginTime = beginTime
		peperone8TranslationYAnimation.fillMode = fillMode
		peperone8TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/8__root"]?.layer.add(peperone8TranslationYAnimation, forKey:"Peppers_TranslationY")

		let peperone1RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		peperone1RotationAnimation.duration = 1.500
		peperone1RotationAnimation.values = [0.000, -0.649] as [Float]
		peperone1RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		peperone1RotationAnimation.timingFunctions = [linearTiming]
		peperone1RotationAnimation.beginTime = beginTime
		peperone1RotationAnimation.fillMode = fillMode
		peperone1RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/1__root"]?.layer.add(peperone1RotationAnimation, forKey:"Peppers_Rotation")

		let peperone1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		peperone1TranslationXAnimation.duration = 1.500
		peperone1TranslationXAnimation.values = [0.000, 197.393] as [Float]
		peperone1TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		peperone1TranslationXAnimation.timingFunctions = [anticOverTiming]
		peperone1TranslationXAnimation.beginTime = beginTime
		peperone1TranslationXAnimation.fillMode = fillMode
		peperone1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/1__root"]?.layer.add(peperone1TranslationXAnimation, forKey:"Peppers_TranslationX")

		let peperone1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		peperone1TranslationYAnimation.duration = 1.500
		peperone1TranslationYAnimation.values = [0.000, 98.612] as [Float]
		peperone1TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		peperone1TranslationYAnimation.timingFunctions = [linearTiming]
		peperone1TranslationYAnimation.beginTime = beginTime
		peperone1TranslationYAnimation.fillMode = fillMode
		peperone1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/1__root"]?.layer.add(peperone1TranslationYAnimation, forKey:"Peppers_TranslationY")

		let peperone2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		peperone2RotationAnimation.duration = 1.500
		peperone2RotationAnimation.values = [0.000, 0.902, 0.902] as [Float]
		peperone2RotationAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		peperone2RotationAnimation.timingFunctions = [linearTiming, linearTiming]
		peperone2RotationAnimation.beginTime = beginTime
		peperone2RotationAnimation.fillMode = fillMode
		peperone2RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/2__root"]?.layer.add(peperone2RotationAnimation, forKey:"Peppers_Rotation")

		let peperone2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		peperone2TranslationXAnimation.duration = 1.500
		peperone2TranslationXAnimation.values = [0.000, 245.572, 245.572] as [Float]
		peperone2TranslationXAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		peperone2TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		peperone2TranslationXAnimation.beginTime = beginTime
		peperone2TranslationXAnimation.fillMode = fillMode
		peperone2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/2__root"]?.layer.add(peperone2TranslationXAnimation, forKey:"Peppers_TranslationX")

		let peperone2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		peperone2TranslationYAnimation.duration = 1.500
		peperone2TranslationYAnimation.values = [0.000, 4.590, 4.590] as [Float]
		peperone2TranslationYAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		peperone2TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		peperone2TranslationYAnimation.beginTime = beginTime
		peperone2TranslationYAnimation.fillMode = fillMode
		peperone2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/2__root"]?.layer.add(peperone2TranslationYAnimation, forKey:"Peppers_TranslationY")

		let peperone5RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		peperone5RotationAnimation.duration = 1.500
		peperone5RotationAnimation.values = [0.000, -0.806, -0.806] as [Float]
		peperone5RotationAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		peperone5RotationAnimation.timingFunctions = [linearTiming, linearTiming]
		peperone5RotationAnimation.beginTime = beginTime
		peperone5RotationAnimation.fillMode = fillMode
		peperone5RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/5__root"]?.layer.add(peperone5RotationAnimation, forKey:"Peppers_Rotation")

		let peperone5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		peperone5TranslationXAnimation.duration = 1.500
		peperone5TranslationXAnimation.values = [0.000, 261.707, 261.707] as [Float]
		peperone5TranslationXAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		peperone5TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		peperone5TranslationXAnimation.beginTime = beginTime
		peperone5TranslationXAnimation.fillMode = fillMode
		peperone5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/5__root"]?.layer.add(peperone5TranslationXAnimation, forKey:"Peppers_TranslationX")

		let peperone5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		peperone5TranslationYAnimation.duration = 1.500
		peperone5TranslationYAnimation.values = [0.000, -1.390, -1.390] as [Float]
		peperone5TranslationYAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		peperone5TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		peperone5TranslationYAnimation.beginTime = beginTime
		peperone5TranslationYAnimation.fillMode = fillMode
		peperone5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/5__root"]?.layer.add(peperone5TranslationYAnimation, forKey:"Peppers_TranslationY")

		let peperone4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		peperone4TranslationXAnimation.duration = 1.500
		peperone4TranslationXAnimation.values = [0.000, 166.363] as [Float]
		peperone4TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		peperone4TranslationXAnimation.timingFunctions = [anticOverTiming]
		peperone4TranslationXAnimation.beginTime = beginTime
		peperone4TranslationXAnimation.fillMode = fillMode
		peperone4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/4__root"]?.layer.add(peperone4TranslationXAnimation, forKey:"Peppers_TranslationX")

		let peperone4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		peperone4TranslationYAnimation.duration = 1.500
		peperone4TranslationYAnimation.values = [0.000, -11.468] as [Float]
		peperone4TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		peperone4TranslationYAnimation.timingFunctions = [linearTiming]
		peperone4TranslationYAnimation.beginTime = beginTime
		peperone4TranslationYAnimation.fillMode = fillMode
		peperone4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/4__root"]?.layer.add(peperone4TranslationYAnimation, forKey:"Peppers_TranslationY")

		let peperone9RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		peperone9RotationAnimation.duration = 1.500
		peperone9RotationAnimation.values = [0.000, 3.361, 3.361] as [Float]
		peperone9RotationAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		peperone9RotationAnimation.timingFunctions = [linearTiming, linearTiming]
		peperone9RotationAnimation.beginTime = beginTime
		peperone9RotationAnimation.fillMode = fillMode
		peperone9RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/9__root"]?.layer.add(peperone9RotationAnimation, forKey:"Peppers_Rotation")

		let peperone9TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		peperone9TranslationXAnimation.duration = 1.500
		peperone9TranslationXAnimation.values = [0.000, -282.395, -282.395] as [Float]
		peperone9TranslationXAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		peperone9TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		peperone9TranslationXAnimation.beginTime = beginTime
		peperone9TranslationXAnimation.fillMode = fillMode
		peperone9TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/9__root"]?.layer.add(peperone9TranslationXAnimation, forKey:"Peppers_TranslationX")

		let peperone9TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		peperone9TranslationYAnimation.duration = 1.500
		peperone9TranslationYAnimation.values = [0.000, -24.841, -24.841] as [Float]
		peperone9TranslationYAnimation.keyTimes = [0.000, 1.000, 1.000] as [NSNumber]
		peperone9TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		peperone9TranslationYAnimation.beginTime = beginTime
		peperone9TranslationYAnimation.fillMode = fillMode
		peperone9TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Peperone/9__root"]?.layer.add(peperone9TranslationYAnimation, forKey:"Peppers_TranslationY")
	}

	public func removePeppersAnimation() {
		self.layer.removeAnimation(forKey: "Peppers")
		self.viewsByName["Peperone/7__root"]?.layer.removeAnimation(forKey: "Peppers_Rotation")
		self.viewsByName["Peperone/7__root"]?.layer.removeAnimation(forKey: "Peppers_TranslationX")
		self.viewsByName["Peperone/7__root"]?.layer.removeAnimation(forKey: "Peppers_TranslationY")
		self.viewsByName["Peperone/12__root"]?.layer.removeAnimation(forKey: "Peppers_Rotation")
		self.viewsByName["Peperone/12__root"]?.layer.removeAnimation(forKey: "Peppers_TranslationX")
		self.viewsByName["Peperone/12__root"]?.layer.removeAnimation(forKey: "Peppers_TranslationY")
		self.viewsByName["Peperone/8__root"]?.layer.removeAnimation(forKey: "Peppers_Rotation")
		self.viewsByName["Peperone/8__root"]?.layer.removeAnimation(forKey: "Peppers_TranslationX")
		self.viewsByName["Peperone/8__root"]?.layer.removeAnimation(forKey: "Peppers_TranslationY")
		self.viewsByName["Peperone/1__root"]?.layer.removeAnimation(forKey: "Peppers_Rotation")
		self.viewsByName["Peperone/1__root"]?.layer.removeAnimation(forKey: "Peppers_TranslationX")
		self.viewsByName["Peperone/1__root"]?.layer.removeAnimation(forKey: "Peppers_TranslationY")
		self.viewsByName["Peperone/2__root"]?.layer.removeAnimation(forKey: "Peppers_Rotation")
		self.viewsByName["Peperone/2__root"]?.layer.removeAnimation(forKey: "Peppers_TranslationX")
		self.viewsByName["Peperone/2__root"]?.layer.removeAnimation(forKey: "Peppers_TranslationY")
		self.viewsByName["Peperone/5__root"]?.layer.removeAnimation(forKey: "Peppers_Rotation")
		self.viewsByName["Peperone/5__root"]?.layer.removeAnimation(forKey: "Peppers_TranslationX")
		self.viewsByName["Peperone/5__root"]?.layer.removeAnimation(forKey: "Peppers_TranslationY")
		self.viewsByName["Peperone/4__root"]?.layer.removeAnimation(forKey: "Peppers_TranslationX")
		self.viewsByName["Peperone/4__root"]?.layer.removeAnimation(forKey: "Peppers_TranslationY")
		self.viewsByName["Peperone/9__root"]?.layer.removeAnimation(forKey: "Peppers_Rotation")
		self.viewsByName["Peperone/9__root"]?.layer.removeAnimation(forKey: "Peppers_TranslationX")
		self.viewsByName["Peperone/9__root"]?.layer.removeAnimation(forKey: "Peppers_TranslationY")
	}

	// - MARK: RawHam

	public func addRawHamAnimation() {
		addRawHamAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addRawHamAnimation(completion: ((Bool) -> Void)?) {
		addRawHamAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addRawHamAnimation(removedOnCompletion: Bool) {
		addRawHamAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addRawHamAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addRawHamAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addRawHamAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "RawHam")
			self.animationCompletions[layer.animation(forKey: "RawHam")!] = complete
		}

		let prosciuttoCrudo5RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		prosciuttoCrudo5RotationAnimation.duration = 1.500
		prosciuttoCrudo5RotationAnimation.values = [0.000, -1.978] as [Float]
		prosciuttoCrudo5RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo5RotationAnimation.timingFunctions = [linearTiming]
		prosciuttoCrudo5RotationAnimation.beginTime = beginTime
		prosciuttoCrudo5RotationAnimation.fillMode = fillMode
		prosciuttoCrudo5RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/5__root"]?.layer.add(prosciuttoCrudo5RotationAnimation, forKey:"RawHam_Rotation")

		let prosciuttoCrudo5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		prosciuttoCrudo5TranslationXAnimation.duration = 1.500
		prosciuttoCrudo5TranslationXAnimation.values = [0.000, 288.713] as [Float]
		prosciuttoCrudo5TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo5TranslationXAnimation.timingFunctions = [anticOverTiming]
		prosciuttoCrudo5TranslationXAnimation.beginTime = beginTime
		prosciuttoCrudo5TranslationXAnimation.fillMode = fillMode
		prosciuttoCrudo5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/5__root"]?.layer.add(prosciuttoCrudo5TranslationXAnimation, forKey:"RawHam_TranslationX")

		let prosciuttoCrudo5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		prosciuttoCrudo5TranslationYAnimation.duration = 1.500
		prosciuttoCrudo5TranslationYAnimation.values = [0.000, -121.490] as [Float]
		prosciuttoCrudo5TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo5TranslationYAnimation.timingFunctions = [linearTiming]
		prosciuttoCrudo5TranslationYAnimation.beginTime = beginTime
		prosciuttoCrudo5TranslationYAnimation.fillMode = fillMode
		prosciuttoCrudo5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/5__root"]?.layer.add(prosciuttoCrudo5TranslationYAnimation, forKey:"RawHam_TranslationY")

		let prosciuttoCrudo3RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		prosciuttoCrudo3RotationAnimation.duration = 1.500
		prosciuttoCrudo3RotationAnimation.values = [0.000, -0.140] as [Float]
		prosciuttoCrudo3RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo3RotationAnimation.timingFunctions = [linearTiming]
		prosciuttoCrudo3RotationAnimation.beginTime = beginTime
		prosciuttoCrudo3RotationAnimation.fillMode = fillMode
		prosciuttoCrudo3RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/3__root"]?.layer.add(prosciuttoCrudo3RotationAnimation, forKey:"RawHam_Rotation")

		let prosciuttoCrudo3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		prosciuttoCrudo3TranslationXAnimation.duration = 1.500
		prosciuttoCrudo3TranslationXAnimation.values = [0.000, 290.000] as [Float]
		prosciuttoCrudo3TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo3TranslationXAnimation.timingFunctions = [anticOverTiming]
		prosciuttoCrudo3TranslationXAnimation.beginTime = beginTime
		prosciuttoCrudo3TranslationXAnimation.fillMode = fillMode
		prosciuttoCrudo3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/3__root"]?.layer.add(prosciuttoCrudo3TranslationXAnimation, forKey:"RawHam_TranslationX")

		let prosciuttoCrudo3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		prosciuttoCrudo3TranslationYAnimation.duration = 1.500
		prosciuttoCrudo3TranslationYAnimation.values = [0.000, 97.000] as [Float]
		prosciuttoCrudo3TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo3TranslationYAnimation.timingFunctions = [linearTiming]
		prosciuttoCrudo3TranslationYAnimation.beginTime = beginTime
		prosciuttoCrudo3TranslationYAnimation.fillMode = fillMode
		prosciuttoCrudo3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/3__root"]?.layer.add(prosciuttoCrudo3TranslationYAnimation, forKey:"RawHam_TranslationY")

		let prosciuttoCrudo7RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		prosciuttoCrudo7RotationAnimation.duration = 1.500
		prosciuttoCrudo7RotationAnimation.values = [0.000, -0.202] as [Float]
		prosciuttoCrudo7RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo7RotationAnimation.timingFunctions = [linearTiming]
		prosciuttoCrudo7RotationAnimation.beginTime = beginTime
		prosciuttoCrudo7RotationAnimation.fillMode = fillMode
		prosciuttoCrudo7RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/7__root"]?.layer.add(prosciuttoCrudo7RotationAnimation, forKey:"RawHam_Rotation")

		let prosciuttoCrudo7TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		prosciuttoCrudo7TranslationXAnimation.duration = 1.500
		prosciuttoCrudo7TranslationXAnimation.values = [0.000, -334.719] as [Float]
		prosciuttoCrudo7TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo7TranslationXAnimation.timingFunctions = [anticOverTiming]
		prosciuttoCrudo7TranslationXAnimation.beginTime = beginTime
		prosciuttoCrudo7TranslationXAnimation.fillMode = fillMode
		prosciuttoCrudo7TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/7__root"]?.layer.add(prosciuttoCrudo7TranslationXAnimation, forKey:"RawHam_TranslationX")

		let prosciuttoCrudo7TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		prosciuttoCrudo7TranslationYAnimation.duration = 1.500
		prosciuttoCrudo7TranslationYAnimation.values = [0.000, -149.088] as [Float]
		prosciuttoCrudo7TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo7TranslationYAnimation.timingFunctions = [linearTiming]
		prosciuttoCrudo7TranslationYAnimation.beginTime = beginTime
		prosciuttoCrudo7TranslationYAnimation.fillMode = fillMode
		prosciuttoCrudo7TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/7__root"]?.layer.add(prosciuttoCrudo7TranslationYAnimation, forKey:"RawHam_TranslationY")

		let prosciuttoCrudo2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		prosciuttoCrudo2RotationAnimation.duration = 1.500
		prosciuttoCrudo2RotationAnimation.values = [0.000, 1.607] as [Float]
		prosciuttoCrudo2RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo2RotationAnimation.timingFunctions = [linearTiming]
		prosciuttoCrudo2RotationAnimation.beginTime = beginTime
		prosciuttoCrudo2RotationAnimation.fillMode = fillMode
		prosciuttoCrudo2RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/2__root"]?.layer.add(prosciuttoCrudo2RotationAnimation, forKey:"RawHam_Rotation")

		let prosciuttoCrudo2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		prosciuttoCrudo2TranslationXAnimation.duration = 1.500
		prosciuttoCrudo2TranslationXAnimation.values = [0.000, 211.458] as [Float]
		prosciuttoCrudo2TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo2TranslationXAnimation.timingFunctions = [anticOverTiming]
		prosciuttoCrudo2TranslationXAnimation.beginTime = beginTime
		prosciuttoCrudo2TranslationXAnimation.fillMode = fillMode
		prosciuttoCrudo2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/2__root"]?.layer.add(prosciuttoCrudo2TranslationXAnimation, forKey:"RawHam_TranslationX")

		let prosciuttoCrudo2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		prosciuttoCrudo2TranslationYAnimation.duration = 1.500
		prosciuttoCrudo2TranslationYAnimation.values = [0.000, 22.828] as [Float]
		prosciuttoCrudo2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo2TranslationYAnimation.timingFunctions = [linearTiming]
		prosciuttoCrudo2TranslationYAnimation.beginTime = beginTime
		prosciuttoCrudo2TranslationYAnimation.fillMode = fillMode
		prosciuttoCrudo2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/2__root"]?.layer.add(prosciuttoCrudo2TranslationYAnimation, forKey:"RawHam_TranslationY")

		let prosciuttoCrudo4RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		prosciuttoCrudo4RotationAnimation.duration = 1.500
		prosciuttoCrudo4RotationAnimation.values = [0.000, -2.558] as [Float]
		prosciuttoCrudo4RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo4RotationAnimation.timingFunctions = [linearTiming]
		prosciuttoCrudo4RotationAnimation.beginTime = beginTime
		prosciuttoCrudo4RotationAnimation.fillMode = fillMode
		prosciuttoCrudo4RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/4__root"]?.layer.add(prosciuttoCrudo4RotationAnimation, forKey:"RawHam_Rotation")

		let prosciuttoCrudo4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		prosciuttoCrudo4TranslationXAnimation.duration = 1.500
		prosciuttoCrudo4TranslationXAnimation.values = [0.000, -260.000] as [Float]
		prosciuttoCrudo4TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo4TranslationXAnimation.timingFunctions = [anticOverTiming]
		prosciuttoCrudo4TranslationXAnimation.beginTime = beginTime
		prosciuttoCrudo4TranslationXAnimation.fillMode = fillMode
		prosciuttoCrudo4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/4__root"]?.layer.add(prosciuttoCrudo4TranslationXAnimation, forKey:"RawHam_TranslationX")

		let prosciuttoCrudo4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		prosciuttoCrudo4TranslationYAnimation.duration = 1.500
		prosciuttoCrudo4TranslationYAnimation.values = [0.000, 160.000] as [Float]
		prosciuttoCrudo4TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo4TranslationYAnimation.timingFunctions = [linearTiming]
		prosciuttoCrudo4TranslationYAnimation.beginTime = beginTime
		prosciuttoCrudo4TranslationYAnimation.fillMode = fillMode
		prosciuttoCrudo4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/4__root"]?.layer.add(prosciuttoCrudo4TranslationYAnimation, forKey:"RawHam_TranslationY")

		let prosciuttoCrudo9RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		prosciuttoCrudo9RotationAnimation.duration = 1.500
		prosciuttoCrudo9RotationAnimation.values = [0.000, 0.493] as [Float]
		prosciuttoCrudo9RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo9RotationAnimation.timingFunctions = [linearTiming]
		prosciuttoCrudo9RotationAnimation.beginTime = beginTime
		prosciuttoCrudo9RotationAnimation.fillMode = fillMode
		prosciuttoCrudo9RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/9__root"]?.layer.add(prosciuttoCrudo9RotationAnimation, forKey:"RawHam_Rotation")

		let prosciuttoCrudo9TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		prosciuttoCrudo9TranslationXAnimation.duration = 1.500
		prosciuttoCrudo9TranslationXAnimation.values = [0.000, -390.000] as [Float]
		prosciuttoCrudo9TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo9TranslationXAnimation.timingFunctions = [anticOverTiming]
		prosciuttoCrudo9TranslationXAnimation.beginTime = beginTime
		prosciuttoCrudo9TranslationXAnimation.fillMode = fillMode
		prosciuttoCrudo9TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/9__root"]?.layer.add(prosciuttoCrudo9TranslationXAnimation, forKey:"RawHam_TranslationX")

		let prosciuttoCrudo9TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		prosciuttoCrudo9TranslationYAnimation.duration = 1.500
		prosciuttoCrudo9TranslationYAnimation.values = [0.000, 130.000] as [Float]
		prosciuttoCrudo9TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		prosciuttoCrudo9TranslationYAnimation.timingFunctions = [linearTiming]
		prosciuttoCrudo9TranslationYAnimation.beginTime = beginTime
		prosciuttoCrudo9TranslationYAnimation.fillMode = fillMode
		prosciuttoCrudo9TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Prosciutto/Crudo/9__root"]?.layer.add(prosciuttoCrudo9TranslationYAnimation, forKey:"RawHam_TranslationY")
	}

	public func removeRawHamAnimation() {
		self.layer.removeAnimation(forKey: "RawHam")
		self.viewsByName["Prosciutto/Crudo/5__root"]?.layer.removeAnimation(forKey: "RawHam_Rotation")
		self.viewsByName["Prosciutto/Crudo/5__root"]?.layer.removeAnimation(forKey: "RawHam_TranslationX")
		self.viewsByName["Prosciutto/Crudo/5__root"]?.layer.removeAnimation(forKey: "RawHam_TranslationY")
		self.viewsByName["Prosciutto/Crudo/3__root"]?.layer.removeAnimation(forKey: "RawHam_Rotation")
		self.viewsByName["Prosciutto/Crudo/3__root"]?.layer.removeAnimation(forKey: "RawHam_TranslationX")
		self.viewsByName["Prosciutto/Crudo/3__root"]?.layer.removeAnimation(forKey: "RawHam_TranslationY")
		self.viewsByName["Prosciutto/Crudo/7__root"]?.layer.removeAnimation(forKey: "RawHam_Rotation")
		self.viewsByName["Prosciutto/Crudo/7__root"]?.layer.removeAnimation(forKey: "RawHam_TranslationX")
		self.viewsByName["Prosciutto/Crudo/7__root"]?.layer.removeAnimation(forKey: "RawHam_TranslationY")
		self.viewsByName["Prosciutto/Crudo/2__root"]?.layer.removeAnimation(forKey: "RawHam_Rotation")
		self.viewsByName["Prosciutto/Crudo/2__root"]?.layer.removeAnimation(forKey: "RawHam_TranslationX")
		self.viewsByName["Prosciutto/Crudo/2__root"]?.layer.removeAnimation(forKey: "RawHam_TranslationY")
		self.viewsByName["Prosciutto/Crudo/4__root"]?.layer.removeAnimation(forKey: "RawHam_Rotation")
		self.viewsByName["Prosciutto/Crudo/4__root"]?.layer.removeAnimation(forKey: "RawHam_TranslationX")
		self.viewsByName["Prosciutto/Crudo/4__root"]?.layer.removeAnimation(forKey: "RawHam_TranslationY")
		self.viewsByName["Prosciutto/Crudo/9__root"]?.layer.removeAnimation(forKey: "RawHam_Rotation")
		self.viewsByName["Prosciutto/Crudo/9__root"]?.layer.removeAnimation(forKey: "RawHam_TranslationX")
		self.viewsByName["Prosciutto/Crudo/9__root"]?.layer.removeAnimation(forKey: "RawHam_TranslationY")
	}

	// - MARK: Salame

	public func addSalameAnimation() {
		addSalameAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addSalameAnimation(completion: ((Bool) -> Void)?) {
		addSalameAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addSalameAnimation(removedOnCompletion: Bool) {
		addSalameAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addSalameAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addSalameAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addSalameAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Salame")
			self.animationCompletions[layer.animation(forKey: "Salame")!] = complete
		}

		let salame6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		salame6TranslationXAnimation.duration = 1.500
		salame6TranslationXAnimation.values = [0.000, 290.000] as [Float]
		salame6TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salame6TranslationXAnimation.timingFunctions = [anticOverTiming]
		salame6TranslationXAnimation.beginTime = beginTime
		salame6TranslationXAnimation.fillMode = fillMode
		salame6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salame/6__root"]?.layer.add(salame6TranslationXAnimation, forKey:"Salame_TranslationX")

		let salame6TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		salame6TranslationYAnimation.duration = 1.500
		salame6TranslationYAnimation.values = [0.000, -50.000] as [Float]
		salame6TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salame6TranslationYAnimation.timingFunctions = [linearTiming]
		salame6TranslationYAnimation.beginTime = beginTime
		salame6TranslationYAnimation.fillMode = fillMode
		salame6TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salame/6__root"]?.layer.add(salame6TranslationYAnimation, forKey:"Salame_TranslationY")

		let salame1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		salame1TranslationXAnimation.duration = 1.500
		salame1TranslationXAnimation.values = [0.000, 240.000] as [Float]
		salame1TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salame1TranslationXAnimation.timingFunctions = [anticOverTiming]
		salame1TranslationXAnimation.beginTime = beginTime
		salame1TranslationXAnimation.fillMode = fillMode
		salame1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salame/1__root"]?.layer.add(salame1TranslationXAnimation, forKey:"Salame_TranslationX")

		let salame1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		salame1TranslationYAnimation.duration = 1.500
		salame1TranslationYAnimation.values = [0.000, 50.000] as [Float]
		salame1TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salame1TranslationYAnimation.timingFunctions = [linearTiming]
		salame1TranslationYAnimation.beginTime = beginTime
		salame1TranslationYAnimation.fillMode = fillMode
		salame1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salame/1__root"]?.layer.add(salame1TranslationYAnimation, forKey:"Salame_TranslationY")

		let salame14TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		salame14TranslationXAnimation.duration = 1.500
		salame14TranslationXAnimation.values = [0.000, 230.000] as [Float]
		salame14TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salame14TranslationXAnimation.timingFunctions = [anticOverTiming]
		salame14TranslationXAnimation.beginTime = beginTime
		salame14TranslationXAnimation.fillMode = fillMode
		salame14TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salame/14__root"]?.layer.add(salame14TranslationXAnimation, forKey:"Salame_TranslationX")

		let salame7TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		salame7TranslationXAnimation.duration = 1.500
		salame7TranslationXAnimation.values = [0.000, -190.000] as [Float]
		salame7TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salame7TranslationXAnimation.timingFunctions = [anticOverTiming]
		salame7TranslationXAnimation.beginTime = beginTime
		salame7TranslationXAnimation.fillMode = fillMode
		salame7TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salame/7__root"]?.layer.add(salame7TranslationXAnimation, forKey:"Salame_TranslationX")

		let salame7TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		salame7TranslationYAnimation.duration = 1.500
		salame7TranslationYAnimation.values = [0.000, 80.000] as [Float]
		salame7TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salame7TranslationYAnimation.timingFunctions = [linearTiming]
		salame7TranslationYAnimation.beginTime = beginTime
		salame7TranslationYAnimation.fillMode = fillMode
		salame7TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salame/7__root"]?.layer.add(salame7TranslationYAnimation, forKey:"Salame_TranslationY")

		let salame5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		salame5TranslationXAnimation.duration = 1.500
		salame5TranslationXAnimation.values = [0.000, -230.000] as [Float]
		salame5TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salame5TranslationXAnimation.timingFunctions = [anticOverTiming]
		salame5TranslationXAnimation.beginTime = beginTime
		salame5TranslationXAnimation.fillMode = fillMode
		salame5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salame/5__root"]?.layer.add(salame5TranslationXAnimation, forKey:"Salame_TranslationX")

		let salame5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		salame5TranslationYAnimation.duration = 1.500
		salame5TranslationYAnimation.values = [0.000, -90.000] as [Float]
		salame5TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salame5TranslationYAnimation.timingFunctions = [linearTiming]
		salame5TranslationYAnimation.beginTime = beginTime
		salame5TranslationYAnimation.fillMode = fillMode
		salame5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salame/5__root"]?.layer.add(salame5TranslationYAnimation, forKey:"Salame_TranslationY")

		let salame4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		salame4TranslationXAnimation.duration = 1.500
		salame4TranslationXAnimation.values = [0.000, -270.000] as [Float]
		salame4TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salame4TranslationXAnimation.timingFunctions = [anticOverTiming]
		salame4TranslationXAnimation.beginTime = beginTime
		salame4TranslationXAnimation.fillMode = fillMode
		salame4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salame/4__root"]?.layer.add(salame4TranslationXAnimation, forKey:"Salame_TranslationX")

		let salame4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		salame4TranslationYAnimation.duration = 1.500
		salame4TranslationYAnimation.values = [0.000, 60.000] as [Float]
		salame4TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salame4TranslationYAnimation.timingFunctions = [linearTiming]
		salame4TranslationYAnimation.beginTime = beginTime
		salame4TranslationYAnimation.fillMode = fillMode
		salame4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salame/4__root"]?.layer.add(salame4TranslationYAnimation, forKey:"Salame_TranslationY")

		let salame2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		salame2TranslationXAnimation.duration = 1.500
		salame2TranslationXAnimation.values = [0.000, 350.000] as [Float]
		salame2TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salame2TranslationXAnimation.timingFunctions = [anticOverTiming]
		salame2TranslationXAnimation.beginTime = beginTime
		salame2TranslationXAnimation.fillMode = fillMode
		salame2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salame/2__root"]?.layer.add(salame2TranslationXAnimation, forKey:"Salame_TranslationX")

		let salame2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		salame2TranslationYAnimation.duration = 1.500
		salame2TranslationYAnimation.values = [0.000, 80.000] as [Float]
		salame2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salame2TranslationYAnimation.timingFunctions = [linearTiming]
		salame2TranslationYAnimation.beginTime = beginTime
		salame2TranslationYAnimation.fillMode = fillMode
		salame2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salame/2__root"]?.layer.add(salame2TranslationYAnimation, forKey:"Salame_TranslationY")

		let salame11TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		salame11TranslationXAnimation.duration = 1.500
		salame11TranslationXAnimation.values = [0.000, -260.000] as [Float]
		salame11TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salame11TranslationXAnimation.timingFunctions = [anticOverTiming]
		salame11TranslationXAnimation.beginTime = beginTime
		salame11TranslationXAnimation.fillMode = fillMode
		salame11TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salame/11__root"]?.layer.add(salame11TranslationXAnimation, forKey:"Salame_TranslationX")

		let salame11TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		salame11TranslationYAnimation.duration = 1.500
		salame11TranslationYAnimation.values = [0.000, 140.000] as [Float]
		salame11TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salame11TranslationYAnimation.timingFunctions = [linearTiming]
		salame11TranslationYAnimation.beginTime = beginTime
		salame11TranslationYAnimation.fillMode = fillMode
		salame11TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salame/11__root"]?.layer.add(salame11TranslationYAnimation, forKey:"Salame_TranslationY")
	}

	public func removeSalameAnimation() {
		self.layer.removeAnimation(forKey: "Salame")
		self.viewsByName["Salame/6__root"]?.layer.removeAnimation(forKey: "Salame_TranslationX")
		self.viewsByName["Salame/6__root"]?.layer.removeAnimation(forKey: "Salame_TranslationY")
		self.viewsByName["Salame/1__root"]?.layer.removeAnimation(forKey: "Salame_TranslationX")
		self.viewsByName["Salame/1__root"]?.layer.removeAnimation(forKey: "Salame_TranslationY")
		self.viewsByName["Salame/14__root"]?.layer.removeAnimation(forKey: "Salame_TranslationX")
		self.viewsByName["Salame/7__root"]?.layer.removeAnimation(forKey: "Salame_TranslationX")
		self.viewsByName["Salame/7__root"]?.layer.removeAnimation(forKey: "Salame_TranslationY")
		self.viewsByName["Salame/5__root"]?.layer.removeAnimation(forKey: "Salame_TranslationX")
		self.viewsByName["Salame/5__root"]?.layer.removeAnimation(forKey: "Salame_TranslationY")
		self.viewsByName["Salame/4__root"]?.layer.removeAnimation(forKey: "Salame_TranslationX")
		self.viewsByName["Salame/4__root"]?.layer.removeAnimation(forKey: "Salame_TranslationY")
		self.viewsByName["Salame/2__root"]?.layer.removeAnimation(forKey: "Salame_TranslationX")
		self.viewsByName["Salame/2__root"]?.layer.removeAnimation(forKey: "Salame_TranslationY")
		self.viewsByName["Salame/11__root"]?.layer.removeAnimation(forKey: "Salame_TranslationX")
		self.viewsByName["Salame/11__root"]?.layer.removeAnimation(forKey: "Salame_TranslationY")
	}

	// - MARK: Sauce

	public func addSauceAnimation() {
		addSauceAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addSauceAnimation(completion: ((Bool) -> Void)?) {
		addSauceAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addSauceAnimation(removedOnCompletion: Bool) {
		addSauceAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addSauceAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addSauceAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addSauceAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 4.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Sauce")
			self.animationCompletions[layer.animation(forKey: "Sauce")!] = complete
		}

		let salsaRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		salsaRotationAnimation.duration = 4.000
		salsaRotationAnimation.values = [6.283, 12.529] as [Float]
		salsaRotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salsaRotationAnimation.timingFunctions = [linearTiming]
		salsaRotationAnimation.beginTime = beginTime
		salsaRotationAnimation.fillMode = fillMode
		salsaRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salsa__root"]?.layer.add(salsaRotationAnimation, forKey:"Sauce_Rotation")

		let salsaOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		salsaOpacityAnimation.duration = 4.000
		salsaOpacityAnimation.values = [0.000, 1.000] as [Float]
		salsaOpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salsaOpacityAnimation.timingFunctions = [easeOutTiming]
		salsaOpacityAnimation.beginTime = beginTime
		salsaOpacityAnimation.fillMode = fillMode
		salsaOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salsa__root"]?.layer.add(salsaOpacityAnimation, forKey:"Sauce_Opacity")

		let salsaScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		salsaScaleXAnimation.duration = 4.000
		salsaScaleXAnimation.values = [0.020, 0.300] as [Float]
		salsaScaleXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salsaScaleXAnimation.timingFunctions = [linearTiming]
		salsaScaleXAnimation.beginTime = beginTime
		salsaScaleXAnimation.fillMode = fillMode
		salsaScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salsa__xScale"]?.layer.add(salsaScaleXAnimation, forKey:"Sauce_ScaleX")

		let salsaScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		salsaScaleYAnimation.duration = 4.000
		salsaScaleYAnimation.values = [0.020, 0.300] as [Float]
		salsaScaleYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		salsaScaleYAnimation.timingFunctions = [linearTiming]
		salsaScaleYAnimation.beginTime = beginTime
		salsaScaleYAnimation.fillMode = fillMode
		salsaScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Salsa__yScale"]?.layer.add(salsaScaleYAnimation, forKey:"Sauce_ScaleY")
	}

	public func removeSauceAnimation() {
		self.layer.removeAnimation(forKey: "Sauce")
		self.viewsByName["Salsa__root"]?.layer.removeAnimation(forKey: "Sauce_Rotation")
		self.viewsByName["Salsa__root"]?.layer.removeAnimation(forKey: "Sauce_Opacity")
		self.viewsByName["Salsa__xScale"]?.layer.removeAnimation(forKey: "Sauce_ScaleX")
		self.viewsByName["Salsa__yScale"]?.layer.removeAnimation(forKey: "Sauce_ScaleY")
	}

	// - MARK: SourCream

	public func addSourCreamAnimation() {
		addSourCreamAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addSourCreamAnimation(completion: ((Bool) -> Void)?) {
		addSourCreamAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addSourCreamAnimation(removedOnCompletion: Bool) {
		addSourCreamAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addSourCreamAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addSourCreamAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addSourCreamAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 4.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "SourCream")
			self.animationCompletions[layer.animation(forKey: "SourCream")!] = complete
		}

		let pannaRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		pannaRotationAnimation.duration = 4.000
		pannaRotationAnimation.values = [0.003, 6.283] as [Float]
		pannaRotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		pannaRotationAnimation.timingFunctions = [linearTiming]
		pannaRotationAnimation.beginTime = beginTime
		pannaRotationAnimation.fillMode = fillMode
		pannaRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Panna__root"]?.layer.add(pannaRotationAnimation, forKey:"SourCream_Rotation")

		let pannaOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		pannaOpacityAnimation.duration = 4.000
		pannaOpacityAnimation.values = [0.000, 0.050] as [Float]
		pannaOpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		pannaOpacityAnimation.timingFunctions = [easeOutTiming]
		pannaOpacityAnimation.beginTime = beginTime
		pannaOpacityAnimation.fillMode = fillMode
		pannaOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Panna__root"]?.layer.add(pannaOpacityAnimation, forKey:"SourCream_Opacity")

		let pannaScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		pannaScaleXAnimation.duration = 4.000
		pannaScaleXAnimation.values = [0.010, 0.300] as [Float]
		pannaScaleXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		pannaScaleXAnimation.timingFunctions = [linearTiming]
		pannaScaleXAnimation.beginTime = beginTime
		pannaScaleXAnimation.fillMode = fillMode
		pannaScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Panna__xScale"]?.layer.add(pannaScaleXAnimation, forKey:"SourCream_ScaleX")

		let pannaScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		pannaScaleYAnimation.duration = 4.000
		pannaScaleYAnimation.values = [0.010, 0.300] as [Float]
		pannaScaleYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		pannaScaleYAnimation.timingFunctions = [linearTiming]
		pannaScaleYAnimation.beginTime = beginTime
		pannaScaleYAnimation.fillMode = fillMode
		pannaScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Panna__yScale"]?.layer.add(pannaScaleYAnimation, forKey:"SourCream_ScaleY")
	}

	public func removeSourCreamAnimation() {
		self.layer.removeAnimation(forKey: "SourCream")
		self.viewsByName["Panna__root"]?.layer.removeAnimation(forKey: "SourCream_Rotation")
		self.viewsByName["Panna__root"]?.layer.removeAnimation(forKey: "SourCream_Opacity")
		self.viewsByName["Panna__xScale"]?.layer.removeAnimation(forKey: "SourCream_ScaleX")
		self.viewsByName["Panna__yScale"]?.layer.removeAnimation(forKey: "SourCream_ScaleY")
	}

	// - MARK: Tuna

	public func addTunaAnimation() {
		addTunaAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addTunaAnimation(completion: ((Bool) -> Void)?) {
		addTunaAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addTunaAnimation(removedOnCompletion: Bool) {
		addTunaAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addTunaAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addTunaAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addTunaAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Tuna")
			self.animationCompletions[layer.animation(forKey: "Tuna")!] = complete
		}

		let tonno5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		tonno5TranslationXAnimation.duration = 1.500
		tonno5TranslationXAnimation.values = [0.000, -250.620] as [Float]
		tonno5TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno5TranslationXAnimation.timingFunctions = [anticOverTiming]
		tonno5TranslationXAnimation.beginTime = beginTime
		tonno5TranslationXAnimation.fillMode = fillMode
		tonno5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/5__root"]?.layer.add(tonno5TranslationXAnimation, forKey:"Tuna_TranslationX")

		let tonno5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		tonno5TranslationYAnimation.duration = 1.500
		tonno5TranslationYAnimation.values = [0.000, 86.715] as [Float]
		tonno5TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno5TranslationYAnimation.timingFunctions = [linearTiming]
		tonno5TranslationYAnimation.beginTime = beginTime
		tonno5TranslationYAnimation.fillMode = fillMode
		tonno5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/5__root"]?.layer.add(tonno5TranslationYAnimation, forKey:"Tuna_TranslationY")

		let tonno18RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		tonno18RotationAnimation.duration = 1.500
		tonno18RotationAnimation.values = [0.000, -0.549] as [Float]
		tonno18RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno18RotationAnimation.timingFunctions = [linearTiming]
		tonno18RotationAnimation.beginTime = beginTime
		tonno18RotationAnimation.fillMode = fillMode
		tonno18RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/18__root"]?.layer.add(tonno18RotationAnimation, forKey:"Tuna_Rotation")

		let tonno18TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		tonno18TranslationXAnimation.duration = 1.500
		tonno18TranslationXAnimation.values = [0.000, 210.034] as [Float]
		tonno18TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno18TranslationXAnimation.timingFunctions = [anticOverTiming]
		tonno18TranslationXAnimation.beginTime = beginTime
		tonno18TranslationXAnimation.fillMode = fillMode
		tonno18TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/18__root"]?.layer.add(tonno18TranslationXAnimation, forKey:"Tuna_TranslationX")

		let tonno18TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		tonno18TranslationYAnimation.duration = 1.500
		tonno18TranslationYAnimation.values = [0.000, -39.304] as [Float]
		tonno18TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno18TranslationYAnimation.timingFunctions = [linearTiming]
		tonno18TranslationYAnimation.beginTime = beginTime
		tonno18TranslationYAnimation.fillMode = fillMode
		tonno18TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/18__root"]?.layer.add(tonno18TranslationYAnimation, forKey:"Tuna_TranslationY")

		let tonno1RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		tonno1RotationAnimation.duration = 1.500
		tonno1RotationAnimation.values = [0.000, -0.254] as [Float]
		tonno1RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno1RotationAnimation.timingFunctions = [linearTiming]
		tonno1RotationAnimation.beginTime = beginTime
		tonno1RotationAnimation.fillMode = fillMode
		tonno1RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/1__root"]?.layer.add(tonno1RotationAnimation, forKey:"Tuna_Rotation")

		let tonno1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		tonno1TranslationXAnimation.duration = 1.500
		tonno1TranslationXAnimation.values = [0.000, 269.895] as [Float]
		tonno1TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno1TranslationXAnimation.timingFunctions = [anticOverTiming]
		tonno1TranslationXAnimation.beginTime = beginTime
		tonno1TranslationXAnimation.fillMode = fillMode
		tonno1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/1__root"]?.layer.add(tonno1TranslationXAnimation, forKey:"Tuna_TranslationX")

		let tonno1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		tonno1TranslationYAnimation.duration = 1.500
		tonno1TranslationYAnimation.values = [0.000, 15.111] as [Float]
		tonno1TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno1TranslationYAnimation.timingFunctions = [linearTiming]
		tonno1TranslationYAnimation.beginTime = beginTime
		tonno1TranslationYAnimation.fillMode = fillMode
		tonno1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/1__root"]?.layer.add(tonno1TranslationYAnimation, forKey:"Tuna_TranslationY")

		let tonno4RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		tonno4RotationAnimation.duration = 1.500
		tonno4RotationAnimation.values = [0.000, -0.721] as [Float]
		tonno4RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno4RotationAnimation.timingFunctions = [linearTiming]
		tonno4RotationAnimation.beginTime = beginTime
		tonno4RotationAnimation.fillMode = fillMode
		tonno4RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/4__root"]?.layer.add(tonno4RotationAnimation, forKey:"Tuna_Rotation")

		let tonno4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		tonno4TranslationXAnimation.duration = 1.500
		tonno4TranslationXAnimation.values = [0.000, 257.262] as [Float]
		tonno4TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno4TranslationXAnimation.timingFunctions = [anticOverTiming]
		tonno4TranslationXAnimation.beginTime = beginTime
		tonno4TranslationXAnimation.fillMode = fillMode
		tonno4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/4__root"]?.layer.add(tonno4TranslationXAnimation, forKey:"Tuna_TranslationX")

		let tonno4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		tonno4TranslationYAnimation.duration = 1.500
		tonno4TranslationYAnimation.values = [0.000, 98.912] as [Float]
		tonno4TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno4TranslationYAnimation.timingFunctions = [linearTiming]
		tonno4TranslationYAnimation.beginTime = beginTime
		tonno4TranslationYAnimation.fillMode = fillMode
		tonno4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/4__root"]?.layer.add(tonno4TranslationYAnimation, forKey:"Tuna_TranslationY")

		let tonno9TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		tonno9TranslationXAnimation.duration = 1.500
		tonno9TranslationXAnimation.values = [0.000, -300.075] as [Float]
		tonno9TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno9TranslationXAnimation.timingFunctions = [anticOverTiming]
		tonno9TranslationXAnimation.beginTime = beginTime
		tonno9TranslationXAnimation.fillMode = fillMode
		tonno9TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/9__root"]?.layer.add(tonno9TranslationXAnimation, forKey:"Tuna_TranslationX")

		let tonno9TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		tonno9TranslationYAnimation.duration = 1.500
		tonno9TranslationYAnimation.values = [0.000, -41.938] as [Float]
		tonno9TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno9TranslationYAnimation.timingFunctions = [linearTiming]
		tonno9TranslationYAnimation.beginTime = beginTime
		tonno9TranslationYAnimation.fillMode = fillMode
		tonno9TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/9__root"]?.layer.add(tonno9TranslationYAnimation, forKey:"Tuna_TranslationY")

		let tonno15RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		tonno15RotationAnimation.duration = 1.500
		tonno15RotationAnimation.values = [0.000, 1.832] as [Float]
		tonno15RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno15RotationAnimation.timingFunctions = [linearTiming]
		tonno15RotationAnimation.beginTime = beginTime
		tonno15RotationAnimation.fillMode = fillMode
		tonno15RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/15__root"]?.layer.add(tonno15RotationAnimation, forKey:"Tuna_Rotation")

		let tonno15TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		tonno15TranslationXAnimation.duration = 1.500
		tonno15TranslationXAnimation.values = [0.000, 258.533] as [Float]
		tonno15TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno15TranslationXAnimation.timingFunctions = [anticOverTiming]
		tonno15TranslationXAnimation.beginTime = beginTime
		tonno15TranslationXAnimation.fillMode = fillMode
		tonno15TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/15__root"]?.layer.add(tonno15TranslationXAnimation, forKey:"Tuna_TranslationX")

		let tonno15TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		tonno15TranslationYAnimation.duration = 1.500
		tonno15TranslationYAnimation.values = [0.000, 38.201] as [Float]
		tonno15TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno15TranslationYAnimation.timingFunctions = [linearTiming]
		tonno15TranslationYAnimation.beginTime = beginTime
		tonno15TranslationYAnimation.fillMode = fillMode
		tonno15TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/15__root"]?.layer.add(tonno15TranslationYAnimation, forKey:"Tuna_TranslationY")

		let tonno6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		tonno6TranslationXAnimation.duration = 1.500
		tonno6TranslationXAnimation.values = [0.000, -237.110] as [Float]
		tonno6TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno6TranslationXAnimation.timingFunctions = [anticOverTiming]
		tonno6TranslationXAnimation.beginTime = beginTime
		tonno6TranslationXAnimation.fillMode = fillMode
		tonno6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/6__root"]?.layer.add(tonno6TranslationXAnimation, forKey:"Tuna_TranslationX")

		let tonno6TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		tonno6TranslationYAnimation.duration = 1.500
		tonno6TranslationYAnimation.values = [0.000, -22.214] as [Float]
		tonno6TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno6TranslationYAnimation.timingFunctions = [linearTiming]
		tonno6TranslationYAnimation.beginTime = beginTime
		tonno6TranslationYAnimation.fillMode = fillMode
		tonno6TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/6__root"]?.layer.add(tonno6TranslationYAnimation, forKey:"Tuna_TranslationY")

		let tonno12RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		tonno12RotationAnimation.duration = 1.500
		tonno12RotationAnimation.values = [0.000, -0.638] as [Float]
		tonno12RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno12RotationAnimation.timingFunctions = [linearTiming]
		tonno12RotationAnimation.beginTime = beginTime
		tonno12RotationAnimation.fillMode = fillMode
		tonno12RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/12__root"]?.layer.add(tonno12RotationAnimation, forKey:"Tuna_Rotation")

		let tonno12TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		tonno12TranslationXAnimation.duration = 1.500
		tonno12TranslationXAnimation.values = [0.000, -197.473] as [Float]
		tonno12TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno12TranslationXAnimation.timingFunctions = [anticOverTiming]
		tonno12TranslationXAnimation.beginTime = beginTime
		tonno12TranslationXAnimation.fillMode = fillMode
		tonno12TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/12__root"]?.layer.add(tonno12TranslationXAnimation, forKey:"Tuna_TranslationX")

		let tonno12TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		tonno12TranslationYAnimation.duration = 1.500
		tonno12TranslationYAnimation.values = [0.000, 122.842] as [Float]
		tonno12TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		tonno12TranslationYAnimation.timingFunctions = [linearTiming]
		tonno12TranslationYAnimation.beginTime = beginTime
		tonno12TranslationYAnimation.fillMode = fillMode
		tonno12TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tonno/12__root"]?.layer.add(tonno12TranslationYAnimation, forKey:"Tuna_TranslationY")
	}

	public func removeTunaAnimation() {
		self.layer.removeAnimation(forKey: "Tuna")
		self.viewsByName["Tonno/5__root"]?.layer.removeAnimation(forKey: "Tuna_TranslationX")
		self.viewsByName["Tonno/5__root"]?.layer.removeAnimation(forKey: "Tuna_TranslationY")
		self.viewsByName["Tonno/18__root"]?.layer.removeAnimation(forKey: "Tuna_Rotation")
		self.viewsByName["Tonno/18__root"]?.layer.removeAnimation(forKey: "Tuna_TranslationX")
		self.viewsByName["Tonno/18__root"]?.layer.removeAnimation(forKey: "Tuna_TranslationY")
		self.viewsByName["Tonno/1__root"]?.layer.removeAnimation(forKey: "Tuna_Rotation")
		self.viewsByName["Tonno/1__root"]?.layer.removeAnimation(forKey: "Tuna_TranslationX")
		self.viewsByName["Tonno/1__root"]?.layer.removeAnimation(forKey: "Tuna_TranslationY")
		self.viewsByName["Tonno/4__root"]?.layer.removeAnimation(forKey: "Tuna_Rotation")
		self.viewsByName["Tonno/4__root"]?.layer.removeAnimation(forKey: "Tuna_TranslationX")
		self.viewsByName["Tonno/4__root"]?.layer.removeAnimation(forKey: "Tuna_TranslationY")
		self.viewsByName["Tonno/9__root"]?.layer.removeAnimation(forKey: "Tuna_TranslationX")
		self.viewsByName["Tonno/9__root"]?.layer.removeAnimation(forKey: "Tuna_TranslationY")
		self.viewsByName["Tonno/15__root"]?.layer.removeAnimation(forKey: "Tuna_Rotation")
		self.viewsByName["Tonno/15__root"]?.layer.removeAnimation(forKey: "Tuna_TranslationX")
		self.viewsByName["Tonno/15__root"]?.layer.removeAnimation(forKey: "Tuna_TranslationY")
		self.viewsByName["Tonno/6__root"]?.layer.removeAnimation(forKey: "Tuna_TranslationX")
		self.viewsByName["Tonno/6__root"]?.layer.removeAnimation(forKey: "Tuna_TranslationY")
		self.viewsByName["Tonno/12__root"]?.layer.removeAnimation(forKey: "Tuna_Rotation")
		self.viewsByName["Tonno/12__root"]?.layer.removeAnimation(forKey: "Tuna_TranslationX")
		self.viewsByName["Tonno/12__root"]?.layer.removeAnimation(forKey: "Tuna_TranslationY")
	}

	// - MARK: Wurstel

	public func addWurstelAnimation() {
		addWurstelAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addWurstelAnimation(completion: ((Bool) -> Void)?) {
		addWurstelAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addWurstelAnimation(removedOnCompletion: Bool) {
		addWurstelAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addWurstelAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addWurstelAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addWurstelAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Wurstel")
			self.animationCompletions[layer.animation(forKey: "Wurstel")!] = complete
		}

		let wurstel16TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		wurstel16TranslationXAnimation.duration = 1.500
		wurstel16TranslationXAnimation.values = [0.000, -300.000] as [Float]
		wurstel16TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		wurstel16TranslationXAnimation.timingFunctions = [anticOverTiming]
		wurstel16TranslationXAnimation.beginTime = beginTime
		wurstel16TranslationXAnimation.fillMode = fillMode
		wurstel16TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wurstel/16__root"]?.layer.add(wurstel16TranslationXAnimation, forKey:"Wurstel_TranslationX")

		let wurstel16TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		wurstel16TranslationYAnimation.duration = 1.500
		wurstel16TranslationYAnimation.values = [0.000, -60.000] as [Float]
		wurstel16TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		wurstel16TranslationYAnimation.timingFunctions = [linearTiming]
		wurstel16TranslationYAnimation.beginTime = beginTime
		wurstel16TranslationYAnimation.fillMode = fillMode
		wurstel16TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wurstel/16__root"]?.layer.add(wurstel16TranslationYAnimation, forKey:"Wurstel_TranslationY")

		let wurstel15TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		wurstel15TranslationXAnimation.duration = 1.500
		wurstel15TranslationXAnimation.values = [0.000, -350.000] as [Float]
		wurstel15TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		wurstel15TranslationXAnimation.timingFunctions = [anticOverTiming]
		wurstel15TranslationXAnimation.beginTime = beginTime
		wurstel15TranslationXAnimation.fillMode = fillMode
		wurstel15TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wurstel/15__root"]?.layer.add(wurstel15TranslationXAnimation, forKey:"Wurstel_TranslationX")

		let wurstel15TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		wurstel15TranslationYAnimation.duration = 1.500
		wurstel15TranslationYAnimation.values = [0.000, 90.000] as [Float]
		wurstel15TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		wurstel15TranslationYAnimation.timingFunctions = [linearTiming]
		wurstel15TranslationYAnimation.beginTime = beginTime
		wurstel15TranslationYAnimation.fillMode = fillMode
		wurstel15TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wurstel/15__root"]?.layer.add(wurstel15TranslationYAnimation, forKey:"Wurstel_TranslationY")

		let wurstel9TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		wurstel9TranslationXAnimation.duration = 1.500
		wurstel9TranslationXAnimation.values = [0.000, 260.000] as [Float]
		wurstel9TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		wurstel9TranslationXAnimation.timingFunctions = [anticOverTiming]
		wurstel9TranslationXAnimation.beginTime = beginTime
		wurstel9TranslationXAnimation.fillMode = fillMode
		wurstel9TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wurstel/9__root"]?.layer.add(wurstel9TranslationXAnimation, forKey:"Wurstel_TranslationX")

		let wurstel4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		wurstel4TranslationXAnimation.duration = 1.500
		wurstel4TranslationXAnimation.values = [0.000, 290.000] as [Float]
		wurstel4TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		wurstel4TranslationXAnimation.timingFunctions = [anticOverTiming]
		wurstel4TranslationXAnimation.beginTime = beginTime
		wurstel4TranslationXAnimation.fillMode = fillMode
		wurstel4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wurstel/4__root"]?.layer.add(wurstel4TranslationXAnimation, forKey:"Wurstel_TranslationX")

		let wurstel4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		wurstel4TranslationYAnimation.duration = 1.500
		wurstel4TranslationYAnimation.values = [0.000, 60.000] as [Float]
		wurstel4TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		wurstel4TranslationYAnimation.timingFunctions = [linearTiming]
		wurstel4TranslationYAnimation.beginTime = beginTime
		wurstel4TranslationYAnimation.fillMode = fillMode
		wurstel4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wurstel/4__root"]?.layer.add(wurstel4TranslationYAnimation, forKey:"Wurstel_TranslationY")

		let wurstel2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		wurstel2TranslationXAnimation.duration = 1.500
		wurstel2TranslationXAnimation.values = [0.000, 250.000] as [Float]
		wurstel2TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		wurstel2TranslationXAnimation.timingFunctions = [anticOverTiming]
		wurstel2TranslationXAnimation.beginTime = beginTime
		wurstel2TranslationXAnimation.fillMode = fillMode
		wurstel2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wurstel/2__root"]?.layer.add(wurstel2TranslationXAnimation, forKey:"Wurstel_TranslationX")

		let wurstel2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		wurstel2TranslationYAnimation.duration = 1.500
		wurstel2TranslationYAnimation.values = [0.000, 80.000] as [Float]
		wurstel2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		wurstel2TranslationYAnimation.timingFunctions = [linearTiming]
		wurstel2TranslationYAnimation.beginTime = beginTime
		wurstel2TranslationYAnimation.fillMode = fillMode
		wurstel2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wurstel/2__root"]?.layer.add(wurstel2TranslationYAnimation, forKey:"Wurstel_TranslationY")

		let wurstel12TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		wurstel12TranslationXAnimation.duration = 1.500
		wurstel12TranslationXAnimation.values = [0.000, -220.000] as [Float]
		wurstel12TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		wurstel12TranslationXAnimation.timingFunctions = [anticOverTiming]
		wurstel12TranslationXAnimation.beginTime = beginTime
		wurstel12TranslationXAnimation.fillMode = fillMode
		wurstel12TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wurstel/12__root"]?.layer.add(wurstel12TranslationXAnimation, forKey:"Wurstel_TranslationX")

		let wurstel12TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		wurstel12TranslationYAnimation.duration = 1.500
		wurstel12TranslationYAnimation.values = [0.000, 100.000] as [Float]
		wurstel12TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		wurstel12TranslationYAnimation.timingFunctions = [linearTiming]
		wurstel12TranslationYAnimation.beginTime = beginTime
		wurstel12TranslationYAnimation.fillMode = fillMode
		wurstel12TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wurstel/12__root"]?.layer.add(wurstel12TranslationYAnimation, forKey:"Wurstel_TranslationY")

		let wurstel5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		wurstel5TranslationXAnimation.duration = 1.500
		wurstel5TranslationXAnimation.values = [0.000, 220.000] as [Float]
		wurstel5TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		wurstel5TranslationXAnimation.timingFunctions = [anticOverTiming]
		wurstel5TranslationXAnimation.beginTime = beginTime
		wurstel5TranslationXAnimation.fillMode = fillMode
		wurstel5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wurstel/5__root"]?.layer.add(wurstel5TranslationXAnimation, forKey:"Wurstel_TranslationX")

		let wurstel17TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		wurstel17TranslationXAnimation.duration = 1.500
		wurstel17TranslationXAnimation.values = [0.000, -230.000] as [Float]
		wurstel17TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		wurstel17TranslationXAnimation.timingFunctions = [anticOverTiming]
		wurstel17TranslationXAnimation.beginTime = beginTime
		wurstel17TranslationXAnimation.fillMode = fillMode
		wurstel17TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wurstel/17__root"]?.layer.add(wurstel17TranslationXAnimation, forKey:"Wurstel_TranslationX")

		let wurstel17TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		wurstel17TranslationYAnimation.duration = 1.500
		wurstel17TranslationYAnimation.values = [0.000, 10.000] as [Float]
		wurstel17TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		wurstel17TranslationYAnimation.timingFunctions = [linearTiming]
		wurstel17TranslationYAnimation.beginTime = beginTime
		wurstel17TranslationYAnimation.fillMode = fillMode
		wurstel17TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Wurstel/17__root"]?.layer.add(wurstel17TranslationYAnimation, forKey:"Wurstel_TranslationY")
	}

	public func removeWurstelAnimation() {
		self.layer.removeAnimation(forKey: "Wurstel")
		self.viewsByName["Wurstel/16__root"]?.layer.removeAnimation(forKey: "Wurstel_TranslationX")
		self.viewsByName["Wurstel/16__root"]?.layer.removeAnimation(forKey: "Wurstel_TranslationY")
		self.viewsByName["Wurstel/15__root"]?.layer.removeAnimation(forKey: "Wurstel_TranslationX")
		self.viewsByName["Wurstel/15__root"]?.layer.removeAnimation(forKey: "Wurstel_TranslationY")
		self.viewsByName["Wurstel/9__root"]?.layer.removeAnimation(forKey: "Wurstel_TranslationX")
		self.viewsByName["Wurstel/4__root"]?.layer.removeAnimation(forKey: "Wurstel_TranslationX")
		self.viewsByName["Wurstel/4__root"]?.layer.removeAnimation(forKey: "Wurstel_TranslationY")
		self.viewsByName["Wurstel/2__root"]?.layer.removeAnimation(forKey: "Wurstel_TranslationX")
		self.viewsByName["Wurstel/2__root"]?.layer.removeAnimation(forKey: "Wurstel_TranslationY")
		self.viewsByName["Wurstel/12__root"]?.layer.removeAnimation(forKey: "Wurstel_TranslationX")
		self.viewsByName["Wurstel/12__root"]?.layer.removeAnimation(forKey: "Wurstel_TranslationY")
		self.viewsByName["Wurstel/5__root"]?.layer.removeAnimation(forKey: "Wurstel_TranslationX")
		self.viewsByName["Wurstel/17__root"]?.layer.removeAnimation(forKey: "Wurstel_TranslationX")
		self.viewsByName["Wurstel/17__root"]?.layer.removeAnimation(forKey: "Wurstel_TranslationY")
	}

	// - MARK: Zucchini

	public func addZucchiniAnimation() {
		addZucchiniAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	public func addZucchiniAnimation(completion: ((Bool) -> Void)?) {
		addZucchiniAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	public func addZucchiniAnimation(removedOnCompletion: Bool) {
		addZucchiniAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	public func addZucchiniAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addZucchiniAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	public func addZucchiniAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Zucchini")
			self.animationCompletions[layer.animation(forKey: "Zucchini")!] = complete
		}

		let zucchina9TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		zucchina9TranslationXAnimation.duration = 1.500
		zucchina9TranslationXAnimation.values = [0.000, -242.856] as [Float]
		zucchina9TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		zucchina9TranslationXAnimation.timingFunctions = [anticOverTiming]
		zucchina9TranslationXAnimation.beginTime = beginTime
		zucchina9TranslationXAnimation.fillMode = fillMode
		zucchina9TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Zucchina/9__root"]?.layer.add(zucchina9TranslationXAnimation, forKey:"Zucchini_TranslationX")

		let zucchina9TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		zucchina9TranslationYAnimation.duration = 1.500
		zucchina9TranslationYAnimation.values = [0.000, 170.538] as [Float]
		zucchina9TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		zucchina9TranslationYAnimation.timingFunctions = [linearTiming]
		zucchina9TranslationYAnimation.beginTime = beginTime
		zucchina9TranslationYAnimation.fillMode = fillMode
		zucchina9TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Zucchina/9__root"]?.layer.add(zucchina9TranslationYAnimation, forKey:"Zucchini_TranslationY")

		let zucchina10TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		zucchina10TranslationXAnimation.duration = 1.500
		zucchina10TranslationXAnimation.values = [0.000, -231.548] as [Float]
		zucchina10TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		zucchina10TranslationXAnimation.timingFunctions = [anticOverTiming]
		zucchina10TranslationXAnimation.beginTime = beginTime
		zucchina10TranslationXAnimation.fillMode = fillMode
		zucchina10TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Zucchina/10__root"]?.layer.add(zucchina10TranslationXAnimation, forKey:"Zucchini_TranslationX")

		let zucchina10TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		zucchina10TranslationYAnimation.duration = 1.500
		zucchina10TranslationYAnimation.values = [0.000, 52.967] as [Float]
		zucchina10TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		zucchina10TranslationYAnimation.timingFunctions = [linearTiming]
		zucchina10TranslationYAnimation.beginTime = beginTime
		zucchina10TranslationYAnimation.fillMode = fillMode
		zucchina10TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Zucchina/10__root"]?.layer.add(zucchina10TranslationYAnimation, forKey:"Zucchini_TranslationY")

		let zucchina6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		zucchina6TranslationXAnimation.duration = 1.500
		zucchina6TranslationXAnimation.values = [0.000, 276.080] as [Float]
		zucchina6TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		zucchina6TranslationXAnimation.timingFunctions = [anticOverTiming]
		zucchina6TranslationXAnimation.beginTime = beginTime
		zucchina6TranslationXAnimation.fillMode = fillMode
		zucchina6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Zucchina/6__root"]?.layer.add(zucchina6TranslationXAnimation, forKey:"Zucchini_TranslationX")

		let zucchina6TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		zucchina6TranslationYAnimation.duration = 1.500
		zucchina6TranslationYAnimation.values = [0.000, 13.642] as [Float]
		zucchina6TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		zucchina6TranslationYAnimation.timingFunctions = [linearTiming]
		zucchina6TranslationYAnimation.beginTime = beginTime
		zucchina6TranslationYAnimation.fillMode = fillMode
		zucchina6TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Zucchina/6__root"]?.layer.add(zucchina6TranslationYAnimation, forKey:"Zucchini_TranslationY")

		let zucchina2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		zucchina2TranslationXAnimation.duration = 1.500
		zucchina2TranslationXAnimation.values = [0.000, 201.933] as [Float]
		zucchina2TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		zucchina2TranslationXAnimation.timingFunctions = [anticOverTiming]
		zucchina2TranslationXAnimation.beginTime = beginTime
		zucchina2TranslationXAnimation.fillMode = fillMode
		zucchina2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Zucchina/2__root"]?.layer.add(zucchina2TranslationXAnimation, forKey:"Zucchini_TranslationX")

		let zucchina2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		zucchina2TranslationYAnimation.duration = 1.500
		zucchina2TranslationYAnimation.values = [0.000, 115.447] as [Float]
		zucchina2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		zucchina2TranslationYAnimation.timingFunctions = [linearTiming]
		zucchina2TranslationYAnimation.beginTime = beginTime
		zucchina2TranslationYAnimation.fillMode = fillMode
		zucchina2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Zucchina/2__root"]?.layer.add(zucchina2TranslationYAnimation, forKey:"Zucchini_TranslationY")

		let zucchina11TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		zucchina11TranslationXAnimation.duration = 1.500
		zucchina11TranslationXAnimation.values = [0.000, -223.687] as [Float]
		zucchina11TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		zucchina11TranslationXAnimation.timingFunctions = [anticOverTiming]
		zucchina11TranslationXAnimation.beginTime = beginTime
		zucchina11TranslationXAnimation.fillMode = fillMode
		zucchina11TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Zucchina/11__root"]?.layer.add(zucchina11TranslationXAnimation, forKey:"Zucchini_TranslationX")

		let zucchina11TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		zucchina11TranslationYAnimation.duration = 1.500
		zucchina11TranslationYAnimation.values = [0.000, -4.455] as [Float]
		zucchina11TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		zucchina11TranslationYAnimation.timingFunctions = [linearTiming]
		zucchina11TranslationYAnimation.beginTime = beginTime
		zucchina11TranslationYAnimation.fillMode = fillMode
		zucchina11TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Zucchina/11__root"]?.layer.add(zucchina11TranslationYAnimation, forKey:"Zucchini_TranslationY")

		let zucchina3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		zucchina3TranslationXAnimation.duration = 1.500
		zucchina3TranslationXAnimation.values = [0.000, 223.972] as [Float]
		zucchina3TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		zucchina3TranslationXAnimation.timingFunctions = [anticOverTiming]
		zucchina3TranslationXAnimation.beginTime = beginTime
		zucchina3TranslationXAnimation.fillMode = fillMode
		zucchina3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Zucchina/3__root"]?.layer.add(zucchina3TranslationXAnimation, forKey:"Zucchini_TranslationX")

		let zucchina3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		zucchina3TranslationYAnimation.duration = 1.500
		zucchina3TranslationYAnimation.values = [0.000, 39.357] as [Float]
		zucchina3TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		zucchina3TranslationYAnimation.timingFunctions = [linearTiming]
		zucchina3TranslationYAnimation.beginTime = beginTime
		zucchina3TranslationYAnimation.fillMode = fillMode
		zucchina3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Zucchina/3__root"]?.layer.add(zucchina3TranslationYAnimation, forKey:"Zucchini_TranslationY")

		let zucchina15TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		zucchina15TranslationXAnimation.duration = 1.500
		zucchina15TranslationXAnimation.values = [0.000, -260.830] as [Float]
		zucchina15TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		zucchina15TranslationXAnimation.timingFunctions = [anticOverTiming]
		zucchina15TranslationXAnimation.beginTime = beginTime
		zucchina15TranslationXAnimation.fillMode = fillMode
		zucchina15TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Zucchina/15__root"]?.layer.add(zucchina15TranslationXAnimation, forKey:"Zucchini_TranslationX")

		let zucchina15TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		zucchina15TranslationYAnimation.duration = 1.500
		zucchina15TranslationYAnimation.values = [0.000, -46.202] as [Float]
		zucchina15TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		zucchina15TranslationYAnimation.timingFunctions = [linearTiming]
		zucchina15TranslationYAnimation.beginTime = beginTime
		zucchina15TranslationYAnimation.fillMode = fillMode
		zucchina15TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Zucchina/15__root"]?.layer.add(zucchina15TranslationYAnimation, forKey:"Zucchini_TranslationY")

		let zucchina1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		zucchina1TranslationXAnimation.duration = 1.500
		zucchina1TranslationXAnimation.values = [0.000, 275.624] as [Float]
		zucchina1TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		zucchina1TranslationXAnimation.timingFunctions = [anticOverTiming]
		zucchina1TranslationXAnimation.beginTime = beginTime
		zucchina1TranslationXAnimation.fillMode = fillMode
		zucchina1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Zucchina/1__root"]?.layer.add(zucchina1TranslationXAnimation, forKey:"Zucchini_TranslationX")

		let zucchina1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		zucchina1TranslationYAnimation.duration = 1.500
		zucchina1TranslationYAnimation.values = [0.000, 85.777] as [Float]
		zucchina1TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		zucchina1TranslationYAnimation.timingFunctions = [linearTiming]
		zucchina1TranslationYAnimation.beginTime = beginTime
		zucchina1TranslationYAnimation.fillMode = fillMode
		zucchina1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Zucchina/1__root"]?.layer.add(zucchina1TranslationYAnimation, forKey:"Zucchini_TranslationY")
	}

	public func removeZucchiniAnimation() {
		self.layer.removeAnimation(forKey: "Zucchini")
		self.viewsByName["Zucchina/9__root"]?.layer.removeAnimation(forKey: "Zucchini_TranslationX")
		self.viewsByName["Zucchina/9__root"]?.layer.removeAnimation(forKey: "Zucchini_TranslationY")
		self.viewsByName["Zucchina/10__root"]?.layer.removeAnimation(forKey: "Zucchini_TranslationX")
		self.viewsByName["Zucchina/10__root"]?.layer.removeAnimation(forKey: "Zucchini_TranslationY")
		self.viewsByName["Zucchina/6__root"]?.layer.removeAnimation(forKey: "Zucchini_TranslationX")
		self.viewsByName["Zucchina/6__root"]?.layer.removeAnimation(forKey: "Zucchini_TranslationY")
		self.viewsByName["Zucchina/2__root"]?.layer.removeAnimation(forKey: "Zucchini_TranslationX")
		self.viewsByName["Zucchina/2__root"]?.layer.removeAnimation(forKey: "Zucchini_TranslationY")
		self.viewsByName["Zucchina/11__root"]?.layer.removeAnimation(forKey: "Zucchini_TranslationX")
		self.viewsByName["Zucchina/11__root"]?.layer.removeAnimation(forKey: "Zucchini_TranslationY")
		self.viewsByName["Zucchina/3__root"]?.layer.removeAnimation(forKey: "Zucchini_TranslationX")
		self.viewsByName["Zucchina/3__root"]?.layer.removeAnimation(forKey: "Zucchini_TranslationY")
		self.viewsByName["Zucchina/15__root"]?.layer.removeAnimation(forKey: "Zucchini_TranslationX")
		self.viewsByName["Zucchina/15__root"]?.layer.removeAnimation(forKey: "Zucchini_TranslationY")
		self.viewsByName["Zucchina/1__root"]?.layer.removeAnimation(forKey: "Zucchini_TranslationX")
		self.viewsByName["Zucchina/1__root"]?.layer.removeAnimation(forKey: "Zucchini_TranslationY")
	}

	// MARK: CAAnimationDelegate
	public func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	public func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "Mozzarella")
		self.layer.removeAnimation(forKey: "Gorgonzola")
		self.layer.removeAnimation(forKey: "OlivesBlack")
		self.layer.removeAnimation(forKey: "Artichokes")
		self.layer.removeAnimation(forKey: "Peppers")
		self.layer.removeAnimation(forKey: "Wurstel")
		self.layer.removeAnimation(forKey: "Sauce")
		self.layer.removeAnimation(forKey: "Salame")
		self.layer.removeAnimation(forKey: "Grana")
		self.layer.removeAnimation(forKey: "Garlic")
		self.layer.removeAnimation(forKey: "Arugula")
		self.layer.removeAnimation(forKey: "Capers")
		self.layer.removeAnimation(forKey: "Chips")
		self.layer.removeAnimation(forKey: "Basil")
		self.layer.removeAnimation(forKey: "OlivesGreen")
		self.layer.removeAnimation(forKey: "Zucchini")
		self.layer.removeAnimation(forKey: "RawHam")
		self.layer.removeAnimation(forKey: "Corn")
		self.layer.removeAnimation(forKey: "SourCream")
		self.layer.removeAnimation(forKey: "OlivesBlackOneQuarter")
		self.layer.removeAnimation(forKey: "MushroomsOneQuarter")
		self.layer.removeAnimation(forKey: "Mushrooms")
		self.layer.removeAnimation(forKey: "BakedHam")
		self.layer.removeAnimation(forKey: "BakedHamOneQuarter")
        self.layer.removeAnimation(forKey: "Dough")
        self.layer.removeAnimation(forKey: "Eggplants")
		self.layer.removeAnimation(forKey: "Anchovies")
		self.layer.removeAnimation(forKey: "Emmenthal")
		self.layer.removeAnimation(forKey: "ArtichokesOneQuarter")
		self.layer.removeAnimation(forKey: "Onion")
        self.layer.removeAnimation(forKey: "Origan")
        self.layer.removeAnimation(forKey: "Parmeasan")
		self.layer.removeAnimation(forKey: "Tuna")
	}
}
